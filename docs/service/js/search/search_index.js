var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/classes/AjaxAppender.html",[0,0.332,1,1.011]],["body/classes/AjaxAppender.html",[0,0.2,1,1.171,2,0.701,3,0.304,4,0.245,5,0.2,6,3.21,7,0.93,8,0.76,9,1.782,10,2.02,11,0.885,12,1.353,13,2.349,14,2.02,15,2.516,16,2.02,17,1.213,18,1.449,19,0.055,20,3.218,21,2.516,22,3.038,23,2.516,24,3.038,25,2.516,26,1.021,27,0.159,28,0.868,29,2.004,30,3.092,31,0.953,32,2.349,33,1.254,34,3.491,35,3.491,36,3.491,37,3.491,38,2.516,39,2.516,40,2.516,41,2.349,42,0.701,43,1.693,44,2.086,45,1.828,46,1.615,47,1.254,48,1.754,49,1.092,50,1.816,51,1.531,52,0.538,53,0.856,54,2.803,55,1.615,56,2.01,57,2.02,58,2.349,59,1.324,60,0.626,61,1.693,62,2.081,63,1.615,64,1.693,65,1.092,66,1.693,67,1.693,68,2.135,69,1.974,70,1.449,71,1.615,72,1.449,73,1.092,74,1.254,75,1.254,76,1.693,77,2.02,78,1.254,79,1.615,80,1.401,81,2.02,82,3.476,83,2.803,84,1.615,85,2.516,86,1.254,87,2.349,88,2.01,89,2.349,90,2.349,91,3.092,92,1.615,93,2.913,94,3.784,95,3.784,96,1.615,97,3.491,98,2.349,99,2.803,100,3.491,101,2.803,102,3.491,103,2.516,104,1.615,105,4.009,106,2.516,107,2.516,108,2.516,109,1.615,110,2.516,111,1.615,112,2.516,113,2.02,114,1.615,115,1.254,116,0.561,117,1.003,118,0.93,119,0.953,120,1.087,121,0.93,122,0.533,123,0.805,124,0.2,125,1.087,126,1.087,127,1.642,128,1.781,129,1.615,130,1.087,131,1.615,132,2.02,133,1.087,134,0.293,135,1.739,136,1.087,137,1.781,138,1.296,139,2.02,140,3.784,141,2.516,142,2.516,143,1.615,144,2.516,145,1.615,146,1.615,147,1.615,148,1.615,149,1.615,150,1.615,151,1.615,152,1.615,153,1.615,154,1.615,155,1.615,156,1.087,157,1.296,158,0.93,159,2.516,160,1.615,161,1.693,162,1.615,163,2.516,164,1.615,165,1.296,166,1.615,167,0.805,168,1.615,169,0.701,170,0.93,171,0.93,172,1.087,173,1.087,174,1.615,175,1.518,176,1.615,177,1.615,178,1.615,179,1.615,180,1.615,181,1.615,182,1.615,183,1.615,184,0.016,185,0.025,186,0.016]],["title/interfaces/AjaxAppenderConfiguration.html",[44,1.331,187,0.405]],["body/interfaces/AjaxAppenderConfiguration.html",[1,1.213,3,0.445,4,0.486,5,0.398,6,2.156,8,0.581,11,0.866,12,1.371,17,0.797,19,0.054,20,4.049,22,3.829,24,3.829,26,1.666,27,0.315,28,1.02,44,2.044,52,0.592,53,1.078,58,2.76,59,1.355,60,1.02,80,1.493,81,3.829,82,3.293,83,3.293,99,3.293,101,3.293,113,3.293,116,0.915,124,0.398,130,2.76,132,3.829,134,0.866,184,0.031,185,0.04,186,0.031,187,0.486,188,1.213,189,1.597,190,1.45,191,2.362,192,2.044,193,1.179,194,1.355,195,1.355,196,1.78,197,4.102,198,4.102,199,2.76]],["title/interfaces/BrowserConsoleAppenderConfiguration.html",[187,0.405,200,1.538]],["body/interfaces/BrowserConsoleAppenderConfiguration.html",[3,0.481,4,0.578,5,0.473,8,0.691,17,0.947,19,0.053,26,1.738,27,0.375,28,1.135,52,0.473,53,0.975,60,1.135,116,0.887,124,0.473,134,0.828,184,0.037,185,0.045,186,0.037,187,0.578,188,1.442,189,1.897,190,1.312,191,2.629,192,2.275,193,1.457,194,1.508,195,1.508,200,2.629,201,3.056,202,1.897,203,2.192]],["title/classes/LocalStorageAppender.html",[0,0.332,204,1.011]],["body/classes/LocalStorageAppender.html",[0,0.184,2,0.644,3,0.288,4,0.225,5,0.184,7,0.854,8,0.702,9,1.68,11,0.735,12,1.482,16,1.89,17,1.192,18,1.919,19,0.055,26,0.967,27,0.146,28,0.586,29,1.938,31,0.891,32,2.242,33,1.661,41,2.242,42,0.644,43,1.584,45,1.745,47,1.173,48,1.715,49,1.022,50,1.577,51,1.431,52,0.451,53,0.776,56,1.685,59,1.101,61,1.584,62,1.969,64,1.584,65,1.022,66,1.584,67,1.584,68,1.879,69,1.825,70,1.356,72,1.356,73,1.022,74,1.173,75,1.661,76,1.584,77,1.89,78,1.173,80,1.324,86,1.661,87,2.602,88,2.227,89,2.602,90,2.602,93,2.242,115,1.661,116,0.763,117,1.044,119,0.891,121,0.854,122,0.49,123,0.739,124,0.184,125,0.998,126,0.998,127,1.577,128,2.093,133,0.998,134,0.269,135,1.577,136,0.998,137,1.685,138,1.191,139,1.89,156,0.998,157,1.191,158,0.854,161,1.584,165,1.191,167,0.739,169,1.27,170,0.854,171,0.854,172,0.998,173,0.998,175,1.592,184,0.015,185,0.023,186,0.015,192,1.173,196,1.022,204,0.891,205,3.047,206,2.245,207,2.242,208,1.584,209,2.433,210,2.354,211,2.927,212,2.83,213,2.354,214,2.914,215,2.354,216,1.661,217,2.354,218,3.332,219,3.332,220,2.242,221,2.675,222,2.354,223,1.89,224,2.02,225,1.191,226,1.484,227,1.484,228,2.354,229,1.484,230,1.484,231,1.89,232,1.484,233,2.653,234,1.879,235,1.484,236,2.227,237,2.354,238,1.484,239,2.354,240,2.354,241,2.354,242,1.89,243,1.484,244,1.89,245,1.89,246,2.728,247,1.89,248,2.675,249,1.89,250,1.484,251,0.644,252,0.854,253,0.998,254,1.191,255,0.854,256,2.242,257,1.919,258,1.584,259,1.584,260,3.563,261,2.354,262,2.927,263,2.354,264,3.867,265,2.354,266,2.927,267,1.484,268,1.484,269,2.35,270,1.484,271,1.89,272,1.484,273,1.484,274,1.484,275,1.484,276,1.484,277,1.484,278,1.484,279,1.484,280,1.191,281,0.998,282,1.191,283,1.89,284,1.191,285,2.35,286,3.105,287,1.89,288,0.998,289,0.562,290,1.191,291,0.49,292,1.191,293,1.356,294,1.191,295,1.191,296,0.739,297,1.191,298,0.998,299,1.191,300,1.191,301,2.354,302,2.354,303,2.354,304,2.354,305,1.484,306,1.191,307,1.484,308,1.484]],["title/interfaces/LocalStorageAppenderConfiguration.html",[187,0.405,224,1.331]],["body/interfaces/LocalStorageAppenderConfiguration.html",[3,0.459,4,0.519,5,0.425,8,0.62,9,1.618,11,0.776,12,1.404,17,0.851,19,0.054,26,1.694,27,0.336,28,1.063,52,0.579,53,1.044,60,1.063,80,1.445,86,2.13,116,0.931,124,0.425,134,0.886,184,0.033,185,0.042,186,0.033,187,0.519,188,1.295,189,1.704,190,1.404,191,2.461,192,2.13,193,1.228,194,1.412,195,1.412,204,1.295,205,2.301,206,2.023,209,2.13,212,2.876,214,3.287,216,2.435,224,2.13,231,3.431,233,2.461,236,2.461,255,2.461]],["title/classes/LogLevelConverter.html",[0,0.332,122,0.882]],["body/classes/LogLevelConverter.html",[0,0.491,2,1.065,3,0.338,4,0.373,5,0.305,8,0.718,11,0.718,19,0.054,27,0.242,29,1.498,31,1.3,45,1.498,48,1.498,50,1.717,51,1.307,52,0.646,53,0.845,60,0.611,68,1.717,78,2.536,116,0.87,117,0.986,119,1.3,122,1.134,124,0.305,128,2.862,134,0.446,135,1.717,137,2.279,175,2.057,184,0.024,185,0.034,186,0.024,190,1.137,193,0.706,194,0.811,195,0.811,251,2.259,252,1.414,289,1.993,309,2.467,310,1.971,311,3.432,312,3.432,313,1.711,314,2.309,315,3.432,316,3.432,317,3.432,318,3.432,319,4.969,320,2.456,321,4.671,322,3.424,323,3.439,324,3.432,325,2.456,326,4.284,327,3.432,328,2.456,329,3.957,330,4.336,331,3.432,332,3.957,333,3.432,334,3.957,335,3.432,336,3.957,337,3.432,338,3.957,339,3.432,340,3.957,341,3.432,342,3.957,343,3.432,344,3.957,345,3.432,346,3.957,347,3.176]],["title/interfaces/LogMessage.html",[187,0.405,234,1.159]],["body/interfaces/LogMessage.html",[3,0.346,4,0.533,5,0.436,8,0.638,11,0.92,19,0.054,27,0.346,28,1.082,51,1.436,52,0.629,59,1.761,65,1.887,98,2.926,116,0.983,124,0.436,184,0.034,185,0.043,186,0.034,187,0.533,188,1.331,234,1.887,289,1.955,291,1.706,296,2.458,298,3.319,309,2.024,348,2.822,349,3.319,350,4.721]],["title/classes/Logger.html",[0,0.332,291,0.882]],["body/classes/Logger.html",[0,0.172,2,0.601,3,0.417,4,0.21,5,0.172,8,0.788,11,0.788,12,0.64,18,2.747,19,0.055,27,0.136,29,1.986,31,0.843,42,0.601,45,1.741,47,1.11,48,1.213,49,0.967,50,2.247,51,1.71,52,0.551,53,1.091,59,1.494,60,0.873,65,2.188,68,2.047,69,2.108,75,1.11,80,0.398,88,1.283,116,0.94,117,0.803,119,0.843,122,0.457,123,0.69,124,0.172,127,0.601,134,0.581,135,2.199,167,1.596,169,2.07,175,1.493,184,0.014,185,0.022,186,0.014,193,1.179,194,1.058,195,1.058,196,0.967,199,3.209,251,1.627,252,0.797,289,1.942,291,1.518,293,0.797,296,2.514,322,1.499,351,1.111,352,1.788,353,2.818,354,2.818,355,2.227,356,3.203,357,3.203,358,2.227,359,2.227,360,1.384,361,0.931,362,2.227,363,5.287,364,1.384,365,3.958,366,4.77,367,4.77,368,2.227,369,1.384,370,2.227,371,1.384,372,2.227,373,1.384,374,2.227,375,1.384,376,2.227,377,1.384,378,2.227,379,2.227,380,3.51,381,1.384,382,2.227,383,2.244,384,1.384,385,2.227,386,1.384,387,2.227,388,1.384,389,2.227,390,1.384,391,2.227,392,1.384,393,2.571,394,1.111,395,1.384,396,1.384,397,1.384,398,1.384,399,4.77,400,4.101,401,1.384,402,2.795,403,1.384,404,2.795,405,2.795,406,1.384,407,1.384,408,1.384,409,1.384,410,1.384,411,1.384,412,2.227,413,1.384,414,1.384,415,1.384,416,0.931,417,1.384,418,0.931,419,0.931,420,1.384]],["title/injectables/LoggingService.html",[421,1.538,422,1.331]],["body/injectables/LoggingService.html",[0,0.205,1,1.186,3,0.162,4,0.25,5,0.205,8,0.733,9,1.597,11,0.926,12,1.431,13,1.72,14,2.052,17,1.084,19,0.055,26,1.166,27,0.162,28,0.636,29,1.932,31,0.968,33,2.172,42,1.359,45,1.65,47,1.274,48,1.87,49,1.109,50,1.657,51,1.538,52,0.474,53,0.754,54,3.385,56,2.2,57,2.833,58,1.72,59,1.511,60,0.636,68,1.754,69,1.109,70,1.472,72,1.472,73,1.657,74,1.274,75,1.759,78,1.274,80,0.735,86,1.274,115,2.014,116,0.765,117,1.286,118,0.949,119,1.186,120,2.107,122,0.544,123,0.821,124,0.205,127,1.109,134,0.464,135,1.657,137,0.949,158,0.949,167,1.759,169,1.83,170,0.949,171,0.949,175,1.597,184,0.016,185,0.025,186,0.016,190,0.735,193,0.735,196,0.715,202,0.821,203,2.032,204,1.53,206,1.359,209,1.561,212,2.375,214,1.72,216,1.274,220,2.375,234,1.657,246,1.72,253,1.108,256,1.108,257,0.949,258,1.108,259,1.108,281,1.72,289,1.336,291,1.707,293,2.032,313,0.821,322,1.72,330,1.322,347,1.322,349,1.72,361,1.108,383,1.322,394,2.052,416,1.108,418,1.108,419,1.108,421,1.472,422,1.274,423,1.647,424,1.322,425,2.833,426,2.556,427,2.052,428,2.833,429,2.933,430,1.791,431,2.052,432,2.556,433,3.131,434,3.131,435,2.556,436,2.556,437,3.529,438,1.647,439,2.032,440,1.647,441,2.556,442,1.647,443,2.556,444,2.556,445,2.556,446,2.052,447,1.647,448,2.556,449,2.556,450,2.052,451,2.556,452,2.556,453,2.556,454,1.647,455,2.556,456,1.647,457,1.72,458,2.556,459,1.647,460,1.647,461,2.556,462,3.131,463,1.647,464,1.647,465,1.472,466,1.647,467,1.647,468,2.556,469,1.647,470,1.322,471,1.647,472,1.647,473,1.647,474,1.647,475,1.647,476,1.647,477,1.647,478,1.647,479,1.322,480,1.647,481,1.647,482,1.647,483,2.556,484,2.556,485,2.556,486,1.647,487,1.647,488,1.647,489,1.647,490,1.647,491,1.647,492,1.647,493,1.647,494,1.647,495,2.556,496,1.647,497,1.647,498,1.647,499,1.647,500,1.647,501,1.647,502,1.647,503,1.647,504,1.647,505,1.647,506,1.647,507,1.647,508,1.647,509,1.647,510,1.647,511,1.322,512,1.647,513,1.647,514,1.647,515,1.322,516,1.647,517,1.647,518,1.647,519,1.647,520,1.647,521,1.647,522,1.647,523,1.647,524,1.647,525,1.647,526,1.647,527,1.647]],["title/interfaces/LoggingServiceConfiguration.html",[187,0.405,439,1.538]],["body/interfaces/LoggingServiceConfiguration.html",[1,1.908,3,0.314,4,0.485,5,0.396,8,0.579,11,0.743,17,1.018,19,0.055,27,0.314,28,1.018,44,2.374,52,0.612,53,1.129,117,1.369,120,2.149,121,2.744,124,0.396,134,0.743,184,0.031,185,0.04,186,0.031,187,0.485,188,1.209,190,1.176,200,2.744,202,1.591,203,2.902,204,1.908,206,1.386,209,1.591,224,2.374,313,2.04,314,2.754,422,2.04,428,4.166,429,2.754,430,1.908,439,2.357,457,2.754,465,1.839,479,2.563,528,2.149,529,2.563,530,4.093,531,4.093,532,3.825,533,3.626,534,2.374]],["title/modules/LoggingServiceModule.html",[535,2.144,536,1.538]],["body/modules/LoggingServiceModule.html",[0,0.504,3,0.4,4,0.616,5,0.504,19,0.054,117,1.167,118,2.339,124,0.504,184,0.04,185,0.046,186,0.04,528,2.733,536,2.731,537,2.733,538,4.062,539,3.808,540,3.261,541,4.062,542,4.062]],["title/classes/MemoryAppender.html",[0,0.332,430,1.011]],["body/classes/MemoryAppender.html",[0,0.216,2,0.755,3,0.171,4,0.264,5,0.216,7,1.002,8,0.75,9,1.758,11,0.78,12,1.444,17,1.241,18,1.535,19,0.055,26,1.071,27,0.171,28,0.663,29,1.947,31,1.01,32,2.444,33,1.329,41,2.444,42,0.755,43,1.794,45,1.758,47,1.329,48,1.814,49,1.157,50,1.699,51,1.503,52,0.486,53,0.837,56,1.866,59,1.534,61,1.794,62,2.181,64,1.794,65,1.157,66,1.794,67,2.444,68,1.866,69,2.049,70,1.535,72,1.535,73,1.157,74,1.329,75,1.329,76,1.794,78,1.329,80,1.377,87,1.794,88,1.535,89,1.794,90,1.794,93,2.444,98,1.794,115,1.811,116,0.484,117,1.126,119,1.01,121,1.002,122,0.575,123,0.867,124,0.216,125,1.171,126,1.171,127,1.699,128,1.535,133,1.171,135,1.699,136,1.171,156,1.171,158,1.002,161,1.794,167,1.329,169,1.157,170,1.002,171,1.002,172,1.171,173,1.171,175,1.483,184,0.017,185,0.026,186,0.017,190,0.766,196,1.157,207,2.444,208,1.794,216,1.811,220,2.444,221,2.916,223,2.14,225,1.397,233,2.555,234,1.925,236,2.38,242,2.14,244,2.14,245,2.14,246,2.78,247,2.14,248,2.916,249,2.14,251,0.755,252,1.002,253,1.171,254,1.397,255,1.866,256,1.794,257,1.535,258,1.794,259,1.794,260,2.916,269,2.14,271,2.14,280,1.397,281,1.171,282,1.397,283,2.14,284,1.397,285,2.602,286,3.317,287,1.397,288,1.171,289,0.659,290,1.397,291,0.575,292,1.397,293,1.002,294,1.397,295,1.397,296,0.867,297,1.397,298,1.171,299,1.397,300,1.397,306,1.397,361,1.171,430,1.565,465,2.62,470,2.14,515,1.397,534,2.144,543,3.061,544,2.666,545,2.666,546,2.666,547,2.14,548,2.666,549,1.74,550,1.74,551,1.74,552,1.74,553,1.74,554,2.666,555,1.74,556,2.666,557,4.301,558,2.916,559,2.14,560,2.14,561,2.666,562,2.14,563,1.74,564,1.74,565,2.666,566,1.74,567,1.397,568,1.74,569,2.666,570,1.74,571,1.74]],["title/interfaces/MemoryAppenderConfiguration.html",[187,0.405,534,1.331]],["body/interfaces/MemoryAppenderConfiguration.html",[3,0.469,4,0.546,5,0.446,8,0.652,9,1.67,11,0.8,12,1.267,17,0.895,19,0.054,26,1.715,27,0.354,28,1.097,52,0.547,53,1.062,60,1.097,80,1.466,116,0.865,124,0.446,134,0.8,184,0.035,185,0.043,186,0.035,187,0.546,188,1.362,189,1.792,190,1.429,191,2.539,192,2.198,193,1.267,194,1.457,195,1.457,216,2.478,233,2.539,236,2.539,255,2.539,430,1.362,534,2.198,543,2.42]],["title/coverage.html",[572,2.919]],["body/coverage.html",[0,0.631,1,1.346,5,0.441,6,2.946,7,2.733,19,0.053,44,1.772,48,1.346,52,0.441,122,1.174,184,0.035,185,0.043,186,0.035,187,0.786,189,2.468,200,2.047,201,2.854,202,1.772,204,1.346,205,2.946,206,1.9,224,1.772,234,1.543,291,1.174,309,2.522,310,2.854,348,2.854,351,2.854,421,2.047,422,1.772,424,2.854,430,1.346,439,2.047,528,2.392,529,2.854,534,1.772,543,2.946,572,2.854,573,2.854,574,3.555,575,3.555,576,5.426,577,3.555,578,3.555,579,3.555,580,4.379,581,3.555,582,4.379,583,3.555,584,4.379,585,3.555,586,3.555,587,3.555]],["title/dependencies.html",[588,2.234,589,2.16]],["body/dependencies.html",[19,0.052,118,2.423,119,1.593,184,0.041,185,0.047,186,0.041,589,3.257,590,4.207,591,4.207,592,4.207,593,3.886]],["title/miscellaneous/enumerations.html",[594,1.793,595,2.576]],["body/miscellaneous/enumerations.html",[3,0.409,19,0.047,27,0.409,60,1.035,73,1.805,134,0.755,184,0.041,185,0.047,186,0.041,193,1.196,194,1.374,195,1.374,251,2.087,309,2.396,313,2.074,594,3.34,595,3.34,596,4.161,597,4.81]],["title/index.html",[27,0.22,598,2.234,599,2.234]],["body/index.html",[0,0.478,1,1.558,3,0.44,9,1.457,10,2.332,11,0.916,12,1.374,13,1.955,17,0.957,19,0.054,27,0.192,29,0.738,31,0.738,33,1.918,42,0.846,45,0.738,49,0.846,51,0.644,52,0.431,59,1.147,60,1.024,65,0.846,69,0.846,73,1.993,74,0.972,80,0.998,86,1.448,115,0.972,116,0.354,117,0.835,124,0.478,127,0.846,134,0.698,169,1.507,175,1.1,184,0.028,185,0.028,186,0.019,190,0.835,193,1.24,194,1.271,195,1.359,196,0.846,199,2.337,202,1.918,203,2.216,204,1.315,206,1.26,207,1.955,208,2.337,209,1.448,251,1.26,257,1.123,288,1.955,289,1.88,291,1.64,296,1.448,313,1.731,314,1.312,323,1.565,349,1.312,352,1.565,353,2.332,354,2.332,365,2.332,393,1.565,416,1.312,418,1.312,419,2.337,422,2.151,425,3.089,427,2.332,429,2.589,430,1.558,431,2.332,446,2.332,450,2.788,457,2.589,465,1.673,511,1.565,532,2.788,533,1.565,536,1.673,539,1.565,540,1.565,547,1.565,558,2.788,559,1.565,560,3.089,562,1.565,567,1.565,573,1.565,589,1.312,593,2.332,600,4.695,601,1.949,602,1.949,603,2.905,604,1.949,605,3.472,606,1.949,607,1.949,608,2.905,609,1.949,610,2.905,611,1.949,612,2.905,613,3.472,614,1.949,615,2.905,616,1.949,617,1.949,618,1.949,619,1.949,620,1.949,621,2.905,622,1.949,623,1.949,624,1.949,625,1.949,626,1.949,627,1.949,628,1.949,629,1.949,630,1.949,631,2.905,632,2.905,633,1.949,634,1.949,635,1.949,636,2.905,637,2.905,638,1.949,639,2.905,640,3.848,641,1.949,642,1.949,643,2.905,644,3.848,645,1.949,646,1.949,647,3.472,648,2.905,649,2.905,650,1.949,651,3.848,652,1.949,653,1.949,654,1.949,655,1.949,656,4.115,657,1.949,658,2.905,659,1.949,660,1.949,661,1.949,662,1.949,663,1.565,664,1.949,665,1.949,666,1.949,667,2.905,668,1.949,669,1.949,670,2.905,671,2.905,672,1.949,673,1.949,674,1.949,675,1.949,676,1.949,677,2.905,678,1.949,679,1.949,680,1.949,681,1.949,682,1.949,683,1.949,684,2.905,685,1.949,686,2.905,687,1.949,688,2.905,689,1.949,690,1.949,691,2.905,692,1.949,693,1.949,694,2.905,695,2.905,696,2.905,697,1.949,698,1.949,699,2.905,700,1.949,701,3.472,702,1.949,703,1.949,704,1.949,705,1.949,706,1.949,707,1.949,708,1.949,709,1.949,710,1.949,711,1.949,712,1.949,713,1.949,714,1.949,715,1.949,716,1.949,717,1.949,718,1.949,719,1.949,720,1.949,721,1.949,722,1.949,723,2.905,724,2.905,725,1.949,726,1.949,727,1.949,728,2.905,729,1.949,730,1.949,731,1.949,732,1.949,733,1.949,734,1.949,735,1.949,736,1.949,737,1.949,738,1.949,739,1.949,740,1.949,741,1.949,742,1.949,743,1.949,744,1.949,745,1.949,746,1.949,747,2.905,748,1.949,749,1.949,750,1.949,751,2.905,752,1.949,753,2.905]],["title/modules.html",[537,2.447]],["body/modules.html",[19,0.048,184,0.042,185,0.048,186,0.042,536,2.472,537,2.889,754,4.294]],["title/overview.html",[755,2.919]],["body/overview.html",[2,1.838,19,0.047,130,3.27,184,0.041,185,0.047,186,0.041,188,1.604,421,2.439,535,3.4,663,3.4,755,3.4,756,4.236]]],"invertedIndex":[["",{"_index":19,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["0",{"_index":132,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["1",{"_index":130,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"overview.html":{}}}],["1.2.1",{"_index":624,"title":{},"body":{"index.html":{}}}],["1.4.15",{"_index":590,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":23,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["100",{"_index":576,"title":{},"body":{"coverage.html":{}}}],["11/11",{"_index":581,"title":{},"body":{"coverage.html":{}}}],["13/13",{"_index":578,"title":{},"body":{"coverage.html":{}}}],["14/14",{"_index":583,"title":{},"body":{"coverage.html":{}}}],["18:49:43.794",{"_index":655,"title":{},"body":{"index.html":{}}}],["18:49:43.797",{"_index":657,"title":{},"body":{"index.html":{}}}],["18:49:43.801",{"_index":658,"title":{},"body":{"index.html":{}}}],["18:49:43.814",{"_index":661,"title":{},"body":{"index.html":{}}}],["2",{"_index":662,"title":{},"body":{"index.html":{}}}],["2.0.0",{"_index":621,"title":{},"body":{"index.html":{}}}],["2.2.0",{"_index":622,"title":{},"body":{"index.html":{}}}],["2.2.1",{"_index":625,"title":{},"body":{"index.html":{}}}],["2.4.8",{"_index":623,"title":{},"body":{"index.html":{}}}],["2/2",{"_index":579,"title":{},"body":{"coverage.html":{}}}],["250",{"_index":255,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["3.0.0",{"_index":620,"title":{},"body":{"index.html":{}}}],["3.1.0",{"_index":619,"title":{},"body":{"index.html":{}}}],["3.9.0",{"_index":618,"title":{},"body":{"index.html":{}}}],["3/3",{"_index":585,"title":{},"body":{"coverage.html":{}}}],["4.0.0",{"_index":613,"title":{},"body":{"index.html":{}}}],["4.7.0",{"_index":611,"title":{},"body":{"index.html":{}}}],["4/4",{"_index":580,"title":{},"body":{"coverage.html":{}}}],["42",{"_index":659,"title":{},"body":{"index.html":{}}}],["5",{"_index":663,"title":{},"body":{"index.html":{},"overview.html":{}}}],["5.0.0",{"_index":605,"title":{},"body":{"index.html":{}}}],["5.1.0",{"_index":617,"title":{},"body":{"index.html":{}}}],["5/5",{"_index":577,"title":{},"body":{"coverage.html":{}}}],["500",{"_index":217,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["6",{"_index":756,"title":{},"body":{"overview.html":{}}}],["6.0.0",{"_index":615,"title":{},"body":{"index.html":{}}}],["6/6",{"_index":582,"title":{},"body":{"coverage.html":{}}}],["60000",{"_index":25,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["7.0.0",{"_index":612,"title":{},"body":{"index.html":{}}}],["8",{"_index":151,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["8.0.0",{"_index":610,"title":{},"body":{"index.html":{}}}],["9.0.0",{"_index":593,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["9/9",{"_index":584,"title":{},"body":{"coverage.html":{}}}],["99]logger",{"_index":664,"title":{},"body":{"index.html":{}}}],["a.b",{"_index":689,"title":{},"body":{"index.html":{}}}],["a.b.c",{"_index":688,"title":{},"body":{"index.html":{}}}],["a.b.c.d",{"_index":686,"title":{},"body":{"index.html":{}}}],["a.tostring",{"_index":514,"title":{},"body":{"injectables/LoggingService.html":{}}}],["add",{"_index":288,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["added",{"_index":461,"title":{},"body":{"injectables/LoggingService.html":{}}}],["additional",{"_index":751,"title":{},"body":{"index.html":{}}}],["additionally",{"_index":690,"title":{},"body":{"index.html":{}}}],["ajax",{"_index":120,"title":{},"body":{"classes/AjaxAppender.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{}}}],["ajaxappender",{"_index":1,"title":{"classes/AjaxAppender.html":{}},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["ajaxappender(configuration.ajaxappender",{"_index":501,"title":{},"body":{"injectables/LoggingService.html":{}}}],["ajaxappender.appenderfailed.subscribe((message",{"_index":502,"title":{},"body":{"injectables/LoggingService.html":{}}}],["ajaxappender.batchsizedefault",{"_index":160,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["ajaxappender.thresholddefault",{"_index":162,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["ajaxappender.timerintervaldefault",{"_index":164,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["ajaxappenderconfiguration",{"_index":44,"title":{"interfaces/AjaxAppenderConfiguration.html":{}},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{}}}],["ajaxappenderfailed",{"_index":433,"title":{},"body":{"injectables/LoggingService.html":{}}}],["alerts",{"_index":471,"title":{},"body":{"injectables/LoggingService.html":{}}}],["allows",{"_index":247,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["already",{"_index":281,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["amend",{"_index":432,"title":{},"body":{"injectables/LoggingService.html":{}}}],["angular",{"_index":609,"title":{},"body":{"index.html":{}}}],["angular/common",{"_index":592,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":118,"title":{},"body":{"classes/AjaxAppender.html":{},"injectables/LoggingService.html":{},"modules/LoggingServiceModule.html":{},"dependencies.html":{}}}],["anything",{"_index":546,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["api",{"_index":753,"title":{},"body":{"index.html":{}}}],["app",{"_index":671,"title":{},"body":{"index.html":{}}}],["app.module.ts",{"_index":735,"title":{},"body":{"index.html":{}}}],["app_initializer",{"_index":743,"title":{},"body":{"index.html":{}}}],["append",{"_index":32,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["append(loggingevent",{"_index":61,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["appended",{"_index":67,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["appender",{"_index":9,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["appender's",{"_index":93,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["appender.configuration",{"_index":121,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{}}}],["appender.configuration.ts",{"_index":189,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{}}}],["appender.model",{"_index":462,"title":{},"body":{"injectables/LoggingService.html":{}}}],["appender.model.ts",{"_index":7,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{},"coverage.html":{}}}],["appender.model.ts:103",{"_index":63,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:104",{"_index":563,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["appender.model.ts:111",{"_index":552,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["appender.model.ts:112",{"_index":114,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:113",{"_index":226,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:120",{"_index":84,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:121",{"_index":553,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["appender.model.ts:127",{"_index":79,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:134",{"_index":551,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["appender.model.ts:135",{"_index":104,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:137",{"_index":250,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:142",{"_index":92,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:143",{"_index":555,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["appender.model.ts:144",{"_index":230,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:149",{"_index":109,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:151",{"_index":235,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:156",{"_index":96,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:161",{"_index":243,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:164",{"_index":111,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:182",{"_index":232,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:190",{"_index":227,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:32",{"_index":55,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:34",{"_index":225,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["appender.model.ts:35",{"_index":46,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:61",{"_index":550,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["appender.model.ts:69",{"_index":238,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:78",{"_index":549,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["appender.model.ts:80",{"_index":71,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:93",{"_index":229,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appenderfailed",{"_index":30,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appenders",{"_index":511,"title":{},"body":{"injectables/LoggingService.html":{},"index.html":{}}}],["appenders.find((a",{"_index":513,"title":{},"body":{"injectables/LoggingService.html":{}}}],["application/json",{"_index":149,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appmodule",{"_index":637,"title":{},"body":{"index.html":{}}}],["apps",{"_index":628,"title":{},"body":{"index.html":{}}}],["arg",{"_index":380,"title":{},"body":{"classes/Logger.html":{}}}],["arg.tostring",{"_index":412,"title":{},"body":{"classes/Logger.html":{}}}],["args",{"_index":399,"title":{},"body":{"classes/Logger.html":{}}}],["args.push(this.formatargument(param",{"_index":400,"title":{},"body":{"classes/Logger.html":{}}}],["argument",{"_index":379,"title":{},"body":{"classes/Logger.html":{}}}],["array",{"_index":533,"title":{},"body":{"interfaces/LoggingServiceConfiguration.html":{},"index.html":{}}}],["automatically",{"_index":687,"title":{},"body":{"index.html":{}}}],["available",{"_index":702,"title":{},"body":{"index.html":{}}}],["backend",{"_index":723,"title":{},"body":{"index.html":{}}}],["batch",{"_index":106,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["batchsize",{"_index":22,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["batchsizedefault",{"_index":129,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["behind",{"_index":510,"title":{},"body":{"injectables/LoggingService.html":{}}}],["below",{"_index":641,"title":{},"body":{"index.html":{}}}],["beta",{"_index":616,"title":{},"body":{"index.html":{}}}],["between",{"_index":100,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["browse",{"_index":754,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":479,"title":{},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{}}}],["browser's",{"_index":208,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["browserconsoleappender",{"_index":203,"title":{},"body":{"interfaces/BrowserConsoleAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"index.html":{}}}],["browserconsoleappenderconfiguration",{"_index":200,"title":{"interfaces/BrowserConsoleAppenderConfiguration.html":{}},"body":{"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{}}}],["builds",{"_index":682,"title":{},"body":{"index.html":{}}}],["built",{"_index":629,"title":{},"body":{"index.html":{}}}],["c",{"_index":484,"title":{},"body":{"injectables/LoggingService.html":{}}}],["call",{"_index":728,"title":{},"body":{"index.html":{}}}],["callback",{"_index":557,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["called",{"_index":558,"title":{},"body":{"classes/MemoryAppender.html":{},"index.html":{}}}],["case",{"_index":330,"title":{},"body":{"classes/LogLevelConverter.html":{},"injectables/LoggingService.html":{}}}],["catch",{"_index":418,"title":{},"body":{"classes/Logger.html":{},"injectables/LoggingService.html":{},"index.html":{}}}],["change",{"_index":727,"title":{},"body":{"index.html":{}}}],["changed",{"_index":165,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["charset=utf",{"_index":150,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["class",{"_index":0,"title":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{}},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"coverage.html":{},"index.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{},"overview.html":{}}}],["clearlog",{"_index":218,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["code",{"_index":643,"title":{},"body":{"index.html":{}}}],["complete",{"_index":695,"title":{},"body":{"index.html":{}}}],["component",{"_index":665,"title":{},"body":{"index.html":{}}}],["configuration",{"_index":17,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["configuration.ajaxappender",{"_index":500,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configuration.batchsize",{"_index":159,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["configuration.browserconsoleappender",{"_index":520,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configuration.browserconsoleappender.threshold",{"_index":521,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configuration.localstorageappender",{"_index":505,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configuration.localstoragekey",{"_index":264,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["configuration.loglevels",{"_index":495,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configuration.maxmessages",{"_index":271,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["configuration.memoryappender",{"_index":518,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configuration.threshold",{"_index":161,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["configuration.timerinterval",{"_index":163,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["configuration.url",{"_index":140,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["configure",{"_index":33,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["configure(configuration",{"_index":70,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["configure](#configure",{"_index":466,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configurelogging",{"_index":745,"title":{},"body":{"index.html":{}}}],["configurelogging(loggingservice",{"_index":736,"title":{},"body":{"index.html":{}}}],["configures",{"_index":72,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["console",{"_index":202,"title":{},"body":{"interfaces/BrowserConsoleAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["consolelogs",{"_index":721,"title":{},"body":{"index.html":{}}}],["const",{"_index":169,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["constructor",{"_index":42,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["constructor(configuration",{"_index":43,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["constructor(logger",{"_index":359,"title":{},"body":{"classes/Logger.html":{}}}],["convertedthreshold",{"_index":170,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["converting",{"_index":312,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["converts",{"_index":321,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["correspond",{"_index":703,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":572,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":474,"title":{},"body":{"injectables/LoggingService.html":{}}}],["creates",{"_index":47,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["creating",{"_index":444,"title":{},"body":{"injectables/LoggingService.html":{}}}],["ctor",{"_index":647,"title":{},"body":{"index.html":{}}}],["current",{"_index":451,"title":{},"body":{"injectables/LoggingService.html":{}}}],["currently",{"_index":244,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["data",{"_index":78,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["date",{"_index":350,"title":{},"body":{"interfaces/LogMessage.html":{}}}],["date(logmessage.timestamp",{"_index":279,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["debug",{"_index":193,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["debug(methodname",{"_index":362,"title":{},"body":{"classes/Logger.html":{}}}],["debugger",{"_index":480,"title":{},"body":{"injectables/LoggingService.html":{}}}],["declarations",{"_index":541,"title":{},"body":{"modules/LoggingServiceModule.html":{}}}],["default",{"_index":190,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["define",{"_index":694,"title":{},"body":{"index.html":{}}}],["defined",{"_index":45,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["definition",{"_index":531,"title":{},"body":{"interfaces/LoggingServiceConfiguration.html":{}}}],["definitions",{"_index":746,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":589,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{}}}],["depending",{"_index":74,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["deps",{"_index":739,"title":{},"body":{"index.html":{}}}],["derive",{"_index":458,"title":{},"body":{"injectables/LoggingService.html":{}}}],["describe",{"_index":669,"title":{},"body":{"index.html":{}}}],["description",{"_index":8,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["development",{"_index":719,"title":{},"body":{"index.html":{}}}],["different",{"_index":314,"title":{},"body":{"classes/LogLevelConverter.html":{},"interfaces/LoggingServiceConfiguration.html":{},"index.html":{}}}],["disable",{"_index":710,"title":{},"body":{"index.html":{}}}],["disables",{"_index":712,"title":{},"body":{"index.html":{}}}],["display",{"_index":488,"title":{},"body":{"injectables/LoggingService.html":{}}}],["docs",{"_index":259,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["documentation",{"_index":573,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dotnet",{"_index":679,"title":{},"body":{"index.html":{}}}],["dots",{"_index":676,"title":{},"body":{"index.html":{}}}],["during",{"_index":718,"title":{},"body":{"index.html":{}}}],["e",{"_index":419,"title":{},"body":{"classes/Logger.html":{},"injectables/LoggingService.html":{},"index.html":{}}}],["e.g",{"_index":644,"title":{},"body":{"index.html":{}}}],["e.message",{"_index":420,"title":{},"body":{"classes/Logger.html":{}}}],["each",{"_index":82,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["element",{"_index":284,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["emitter",{"_index":475,"title":{},"body":{"injectables/LoggingService.html":{}}}],["empty",{"_index":139,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["enable",{"_index":709,"title":{},"body":{"index.html":{}}}],["enabled",{"_index":544,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["encapsulates",{"_index":626,"title":{},"body":{"index.html":{}}}],["ensure",{"_index":508,"title":{},"body":{"injectables/LoggingService.html":{}}}],["entry",{"_index":353,"title":{},"body":{"classes/Logger.html":{},"index.html":{}}}],["entry(methodname",{"_index":368,"title":{},"body":{"classes/Logger.html":{}}}],["enumerations",{"_index":595,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":734,"title":{},"body":{"index.html":{}}}],["environment.ts",{"_index":733,"title":{},"body":{"index.html":{}}}],["error",{"_index":60,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["error(\"configuration",{"_index":138,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["error(\"localstoragekey",{"_index":265,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["error(\"url",{"_index":141,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["error(`invalid",{"_index":347,"title":{},"body":{"classes/LogLevelConverter.html":{},"injectables/LoggingService.html":{}}}],["error(methodname",{"_index":370,"title":{},"body":{"classes/Logger.html":{}}}],["errors",{"_index":472,"title":{},"body":{"injectables/LoggingService.html":{}}}],["event",{"_index":56,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["eventemitter",{"_index":54,"title":{},"body":{"classes/AjaxAppender.html":{},"injectables/LoggingService.html":{}}}],["eventual",{"_index":509,"title":{},"body":{"injectables/LoggingService.html":{}}}],["example",{"_index":699,"title":{},"body":{"index.html":{}}}],["exist",{"_index":445,"title":{},"body":{"injectables/LoggingService.html":{}}}],["existing",{"_index":268,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["exit",{"_index":354,"title":{},"body":{"classes/Logger.html":{},"index.html":{}}}],["exit(methodname",{"_index":372,"title":{},"body":{"classes/Logger.html":{}}}],["export",{"_index":124,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["exports",{"_index":542,"title":{},"body":{"modules/LoggingServiceModule.html":{}}}],["extends",{"_index":125,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["false",{"_index":147,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["fatal",{"_index":194,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["fatal(methodname",{"_index":374,"title":{},"body":{"classes/Logger.html":{}}}],["feedback",{"_index":725,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{}}}],["finally",{"_index":642,"title":{},"body":{"index.html":{}}}],["first",{"_index":635,"title":{},"body":{"index.html":{}}}],["following",{"_index":427,"title":{},"body":{"injectables/LoggingService.html":{},"index.html":{}}}],["follows",{"_index":705,"title":{},"body":{"index.html":{}}}],["formatargument",{"_index":355,"title":{},"body":{"classes/Logger.html":{}}}],["formatargument(arg",{"_index":376,"title":{},"body":{"classes/Logger.html":{}}}],["formats",{"_index":378,"title":{},"body":{"classes/Logger.html":{}}}],["formatted",{"_index":367,"title":{},"body":{"classes/Logger.html":{}}}],["framework",{"_index":630,"title":{},"body":{"index.html":{}}}],["full",{"_index":282,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["function",{"_index":562,"title":{},"body":{"classes/MemoryAppender.html":{},"index.html":{}}}],["functionalities",{"_index":627,"title":{},"body":{"index.html":{}}}],["functionality",{"_index":426,"title":{},"body":{"injectables/LoggingService.html":{}}}],["getbatchsize",{"_index":34,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["getinternalappender",{"_index":35,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["getinternallogger",{"_index":356,"title":{},"body":{"classes/Logger.html":{}}}],["getlayout",{"_index":36,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["getlocalstoragekey",{"_index":219,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["getlogger",{"_index":435,"title":{},"body":{"injectables/LoggingService.html":{}}}],["getlogger(loggername",{"_index":441,"title":{},"body":{"injectables/LoggingService.html":{}}}],["getloglevel",{"_index":357,"title":{},"body":{"classes/Logger.html":{}}}],["getlogmessages",{"_index":220,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["getlogmessagesfromlocalstorage",{"_index":436,"title":{},"body":{"injectables/LoggingService.html":{}}}],["getlogmessagesfromlocalstorage(localstoragekey",{"_index":453,"title":{},"body":{"injectables/LoggingService.html":{}}}],["getmaxmessages",{"_index":221,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["getrootlogger",{"_index":437,"title":{},"body":{"injectables/LoggingService.html":{}}}],["gets",{"_index":115,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["gettimerinterval",{"_index":37,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["getting",{"_index":598,"title":{"index.html":{}},"body":{}}],["given",{"_index":75,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["greater",{"_index":714,"title":{},"body":{"index.html":{}}}],["hello",{"_index":660,"title":{},"body":{"index.html":{}}}],["helper",{"_index":311,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["here",{"_index":415,"title":{},"body":{"classes/Logger.html":{}}}],["hierarchy",{"_index":684,"title":{},"body":{"index.html":{}}}],["higher",{"_index":749,"title":{},"body":{"index.html":{}}}],["http",{"_index":15,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["https://my.backend.xy/loggingbackend",{"_index":21,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["identifier",{"_index":574,"title":{},"body":{"coverage.html":{}}}],["immediatedly",{"_index":197,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{}}}],["import",{"_index":117,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["important",{"_index":692,"title":{},"body":{"index.html":{}}}],["imports",{"_index":540,"title":{},"body":{"modules/LoggingServiceModule.html":{},"index.html":{}}}],["included",{"_index":707,"title":{},"body":{"index.html":{}}}],["includes",{"_index":700,"title":{},"body":{"index.html":{}}}],["index",{"_index":27,"title":{"index.html":{}},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["info(methodname",{"_index":385,"title":{},"body":{"classes/Logger.html":{}}}],["inform",{"_index":568,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["inherit",{"_index":693,"title":{},"body":{"index.html":{}}}],["injectable",{"_index":421,"title":{"injectables/LoggingService.html":{}},"body":{"injectables/LoggingService.html":{},"coverage.html":{},"overview.html":{}}}],["injectables",{"_index":423,"title":{},"body":{"injectables/LoggingService.html":{}}}],["instance",{"_index":49,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["instanceof",{"_index":413,"title":{},"body":{"classes/Logger.html":{}}}],["instead",{"_index":748,"title":{},"body":{"index.html":{}}}],["intended",{"_index":708,"title":{},"body":{"index.html":{}}}],["interface",{"_index":187,"title":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/LogMessage.html":{},"interfaces/LoggingServiceConfiguration.html":{},"interfaces/MemoryAppenderConfiguration.html":{}},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/LogMessage.html":{},"interfaces/LoggingServiceConfiguration.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{}}}],["interfaces",{"_index":188,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/LogMessage.html":{},"interfaces/LoggingServiceConfiguration.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"overview.html":{}}}],["internal",{"_index":322,"title":{},"body":{"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{}}}],["internally",{"_index":85,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["interval",{"_index":113,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["ionic",{"_index":600,"title":{},"body":{"index.html":{}}}],["ionic.logging.ajaxappender",{"_index":176,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["ionic.logging.localstorageappender",{"_index":305,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["ionic.logging.memoryappender",{"_index":515,"title":{},"body":{"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["java",{"_index":681,"title":{},"body":{"index.html":{}}}],["javascript",{"_index":198,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{}}}],["json",{"_index":18,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{}}}],["json.parse(localstorage.getitem(localstoragekey",{"_index":275,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["json.stringify",{"_index":414,"title":{},"body":{"classes/Logger.html":{}}}],["json.stringify(arg",{"_index":417,"title":{},"body":{"classes/Logger.html":{}}}],["json.stringify(this.logmessages",{"_index":304,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["keeps",{"_index":724,"title":{},"body":{"index.html":{}}}],["key",{"_index":212,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{}}}],["keyword",{"_index":263,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["kind",{"_index":683,"title":{},"body":{"index.html":{}}}],["last",{"_index":448,"title":{},"body":{"injectables/LoggingService.html":{}}}],["later",{"_index":722,"title":{},"body":{"index.html":{}}}],["latest",{"_index":601,"title":{},"body":{"index.html":{}}}],["layout",{"_index":94,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["length",{"_index":97,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["level",{"_index":289,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["level.converter",{"_index":123,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["level.converter.ts",{"_index":310,"title":{},"body":{"classes/LogLevelConverter.html":{},"coverage.html":{}}}],["level.converter.ts:15",{"_index":320,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["level.converter.ts:43",{"_index":325,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["level.converter.ts:71",{"_index":328,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["level.loggername",{"_index":496,"title":{},"body":{"injectables/LoggingService.html":{}}}],["level.loglevel",{"_index":499,"title":{},"body":{"injectables/LoggingService.html":{}}}],["level.model",{"_index":252,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{}}}],["level.model.ts",{"_index":597,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["level.warn",{"_index":726,"title":{},"body":{"index.html":{}}}],["levelfromlog4javascript",{"_index":315,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["levelfromlog4javascript(level",{"_index":318,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["levelfromstring",{"_index":316,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["levelfromstring(level",{"_index":324,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["levels",{"_index":313,"title":{},"body":{"classes/LogLevelConverter.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["leveltolog4javascript",{"_index":317,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["leveltolog4javascript(level",{"_index":327,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["limited",{"_index":452,"title":{},"body":{"injectables/LoggingService.html":{}}}],["line:completed",{"_index":258,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["line:no",{"_index":261,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["load",{"_index":239,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["loadlogmessages",{"_index":222,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["loadlogmessages(localstoragekey",{"_index":237,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["loads",{"_index":455,"title":{},"body":{"injectables/LoggingService.html":{}}}],["local",{"_index":209,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"index.html":{}}}],["localstorage",{"_index":302,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["localstorage.getitem(localstoragekey",{"_index":274,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["localstorage.removeitem(this.localstoragekey",{"_index":308,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["localstorage.setitem(this.localstoragekey",{"_index":303,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["localstorageappender",{"_index":204,"title":{"classes/LocalStorageAppender.html":{}},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["localstorageappender(configuration.localstorageappender",{"_index":506,"title":{},"body":{"injectables/LoggingService.html":{}}}],["localstorageappender.loadlogmessages(localstoragekey",{"_index":527,"title":{},"body":{"injectables/LoggingService.html":{}}}],["localstorageappender.loadlogmessages(this.localstoragekey",{"_index":270,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["localstorageappender.maxmessagesdefault",{"_index":272,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["localstorageappender.thresholddefault",{"_index":273,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["localstorageappenderconfiguration",{"_index":224,"title":{"interfaces/LocalStorageAppenderConfiguration.html":{}},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{}}}],["localstoragekey",{"_index":214,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{}}}],["log",{"_index":11,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["log4javascript",{"_index":119,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"dependencies.html":{}}}],["log4javascript's",{"_index":323,"title":{},"body":{"classes/LogLevelConverter.html":{},"index.html":{}}}],["log4javascript.ajaxappender",{"_index":91,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["log4javascript.ajaxappender(configuration.url",{"_index":143,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["log4javascript.appender",{"_index":126,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["log4javascript.browserconsoleappender",{"_index":468,"title":{},"body":{"injectables/LoggingService.html":{}}}],["log4javascript.getlogger(level.loggername",{"_index":497,"title":{},"body":{"injectables/LoggingService.html":{}}}],["log4javascript.getlogger(logger",{"_index":395,"title":{},"body":{"classes/Logger.html":{}}}],["log4javascript.getrootlogger",{"_index":394,"title":{},"body":{"classes/Logger.html":{},"injectables/LoggingService.html":{}}}],["log4javascript.getrootlogger().addappender(ajaxappender",{"_index":504,"title":{},"body":{"injectables/LoggingService.html":{}}}],["log4javascript.getrootlogger().addappender(localstorageappender",{"_index":507,"title":{},"body":{"injectables/LoggingService.html":{}}}],["log4javascript.getrootlogger().addappender(memoryappender",{"_index":517,"title":{},"body":{"injectables/LoggingService.html":{}}}],["log4javascript.getrootlogger().removeappender(memoryappender",{"_index":516,"title":{},"body":{"injectables/LoggingService.html":{}}}],["log4javascript.jsonlayout(false",{"_index":146,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["log4javascript.layout",{"_index":95,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["log4javascript.level",{"_index":319,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.all",{"_index":331,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.debug",{"_index":333,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.error",{"_index":335,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.fatal",{"_index":337,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.info",{"_index":339,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.off",{"_index":341,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.trace",{"_index":343,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.warn",{"_index":345,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.logger",{"_index":383,"title":{},"body":{"classes/Logger.html":{},"injectables/LoggingService.html":{}}}],["log4javascript.loggingevent",{"_index":62,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["log4javascript.loglog.setquietmode(true",{"_index":473,"title":{},"body":{"injectables/LoggingService.html":{}}}],["log4javascript.patternlayout(\"%d{hh:mm:ss,sss",{"_index":483,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logged",{"_index":365,"title":{},"body":{"classes/Logger.html":{},"index.html":{}}}],["logger",{"_index":291,"title":{"classes/Logger.html":{}},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"coverage.html":{},"index.html":{}}}],["logger's",{"_index":697,"title":{},"body":{"index.html":{}}}],["logger().getinternallogger().geteffectiveappenders",{"_index":512,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logger(loggername",{"_index":524,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logger.addappender(this.browserconsoleappender",{"_index":487,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logger.addappender(this.memoryappender",{"_index":494,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logger.model",{"_index":463,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logger.setlevel(log4javascript.level.warn",{"_index":478,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logger.setlevel(loglevelconverter.leveltolog4javascript(loglevelconverter.levelfromstring(level.loglevel",{"_index":498,"title":{},"body":{"injectables/LoggingService.html":{}}}],["loggername",{"_index":446,"title":{},"body":{"injectables/LoggingService.html":{},"index.html":{}}}],["loggers",{"_index":457,"title":{},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"index.html":{}}}],["logging",{"_index":73,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["loggingconfiguration",{"_index":730,"title":{},"body":{"index.html":{}}}],["loggingevent",{"_index":66,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loggingevent.logger",{"_index":292,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loggingevent.logger.name",{"_index":294,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loggingevent.messages.slice(1",{"_index":295,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loggingevent.messages[0",{"_index":297,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loggingevent.timestamp",{"_index":299,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loggingservice",{"_index":422,"title":{"injectables/LoggingService.html":{}},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["loggingservice.configure(environment.logging",{"_index":737,"title":{},"body":{"index.html":{}}}],["loggingservice.getlogger(\"myapp.mycomponent",{"_index":646,"title":{},"body":{"index.html":{}}}],["loggingserviceconfiguration",{"_index":439,"title":{"interfaces/LoggingServiceConfiguration.html":{}},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{}}}],["loggingservicemodule",{"_index":536,"title":{"modules/LoggingServiceModule.html":{}},"body":{"modules/LoggingServiceModule.html":{},"index.html":{},"modules.html":{}}}],["loglevel",{"_index":251,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["loglevel.all",{"_index":332,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel.debug",{"_index":334,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel.error",{"_index":336,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel.fatal",{"_index":338,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel.info",{"_index":340,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel.off",{"_index":342,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel.trace",{"_index":344,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel.warn",{"_index":346,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel[loglevelconverter.levelfromlog4javascript(loggingevent.level",{"_index":290,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loglevelconverter",{"_index":122,"title":{"classes/LogLevelConverter.html":{}},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"coverage.html":{}}}],["loglevelconverter.levelfromlog4javascript(this.logger.getlevel",{"_index":396,"title":{},"body":{"classes/Logger.html":{}}}],["loglevelconverter.levelfromstring(configuration.browserconsoleappender.threshold",{"_index":522,"title":{},"body":{"injectables/LoggingService.html":{}}}],["loglevelconverter.levelfromstring(configuration.threshold",{"_index":172,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loglevelconverter.leveltolog4javascript",{"_index":171,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["loglevels",{"_index":532,"title":{},"body":{"interfaces/LoggingServiceConfiguration.html":{},"index.html":{}}}],["logmessage",{"_index":234,"title":{"interfaces/LogMessage.html":{}},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LogMessage.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"coverage.html":{}}}],["logmessage.timestamp",{"_index":278,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["logmessages",{"_index":260,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["logmessageschanged",{"_index":434,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logs",{"_index":199,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"classes/Logger.html":{},"index.html":{}}}],["look",{"_index":632,"title":{},"body":{"index.html":{}}}],["lower",{"_index":713,"title":{},"body":{"index.html":{}}}],["m",{"_index":485,"title":{},"body":{"injectables/LoggingService.html":{}}}],["mainly",{"_index":87,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["make",{"_index":716,"title":{},"body":{"index.html":{}}}],["matching",{"_index":185,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["maximum",{"_index":236,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["maxmessages",{"_index":216,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["maxmessagesdefault",{"_index":254,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["meaning",{"_index":715,"title":{},"body":{"index.html":{}}}],["means",{"_index":450,"title":{},"body":{"injectables/LoggingService.html":{},"index.html":{}}}],["memory",{"_index":465,"title":{},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["memoryappender",{"_index":430,"title":{"classes/MemoryAppender.html":{}},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["memoryappender.maxmessagesdefault",{"_index":565,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["memoryappender.thresholddefault",{"_index":566,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["memoryappender](../memoryappender.html",{"_index":525,"title":{},"body":{"injectables/LoggingService.html":{}}}],["memoryappenderconfiguration",{"_index":534,"title":{"interfaces/MemoryAppenderConfiguration.html":{}},"body":{"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{}}}],["message",{"_index":59,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["message.model",{"_index":253,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["message.model.ts",{"_index":348,"title":{},"body":{"interfaces/LogMessage.html":{},"coverage.html":{}}}],["messages",{"_index":12,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["method",{"_index":65,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["methodname",{"_index":296,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["methods",{"_index":31,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["milliseconds",{"_index":99,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["miscellaneous",{"_index":594,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["modified",{"_index":77,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["module",{"_index":535,"title":{"modules/LoggingServiceModule.html":{}},"body":{"overview.html":{}}}],["modules",{"_index":537,"title":{"modules.html":{}},"body":{"modules/LoggingServiceModule.html":{},"modules.html":{}}}],["more",{"_index":245,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["much",{"_index":306,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["multi",{"_index":740,"title":{},"body":{"index.html":{}}}],["myapp.mycomponent",{"_index":656,"title":{},"body":{"index.html":{}}}],["myapp.mynamespace.mylogger",{"_index":747,"title":{},"body":{"index.html":{}}}],["mycomponent",{"_index":645,"title":{},"body":{"index.html":{}}}],["mylogs",{"_index":215,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["mymethod",{"_index":651,"title":{},"body":{"index.html":{}}}],["mymethod(index",{"_index":650,"title":{},"body":{"index.html":{}}}],["name",{"_index":51,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["named",{"_index":685,"title":{},"body":{"index.html":{}}}],["namespaces",{"_index":678,"title":{},"body":{"index.html":{}}}],["need",{"_index":636,"title":{},"body":{"index.html":{}}}],["needed",{"_index":604,"title":{},"body":{"index.html":{}}}],["new",{"_index":48,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"coverage.html":{}}}],["next",{"_index":257,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["ngmodule",{"_index":539,"title":{},"body":{"modules/LoggingServiceModule.html":{},"index.html":{}}}],["null",{"_index":262,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["number",{"_index":80,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["object",{"_index":567,"title":{},"body":{"classes/MemoryAppender.html":{},"index.html":{}}}],["objects",{"_index":366,"title":{},"body":{"classes/Logger.html":{}}}],["older",{"_index":606,"title":{},"body":{"index.html":{}}}],["oldest",{"_index":248,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["one",{"_index":667,"title":{},"body":{"index.html":{}}}],["onlogmessageschangedcallback",{"_index":564,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["optional",{"_index":53,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["ordered",{"_index":704,"title":{},"body":{"index.html":{}}}],["output",{"_index":654,"title":{},"body":{"index.html":{}}}],["overview",{"_index":755,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwritten",{"_index":76,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["package",{"_index":588,"title":{"dependencies.html":{}},"body":{}}],["packages",{"_index":680,"title":{},"body":{"index.html":{}}}],["page",{"_index":489,"title":{},"body":{"injectables/LoggingService.html":{}}}],["par",{"_index":698,"title":{},"body":{"index.html":{}}}],["param",{"_index":135,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["parameters",{"_index":50,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["params",{"_index":363,"title":{},"body":{"classes/Logger.html":{}}}],["parent",{"_index":691,"title":{},"body":{"index.html":{}}}],["partial",{"_index":530,"title":{},"body":{"interfaces/LoggingServiceConfiguration.html":{}}}],["parts",{"_index":674,"title":{},"body":{"index.html":{}}}],["peer",{"_index":591,"title":{},"body":{"dependencies.html":{}}}],["per",{"_index":668,"title":{},"body":{"index.html":{}}}],["place",{"_index":670,"title":{},"body":{"index.html":{}}}],["placed",{"_index":672,"title":{},"body":{"index.html":{}}}],["possible",{"_index":431,"title":{},"body":{"injectables/LoggingService.html":{},"index.html":{}}}],["prevent",{"_index":469,"title":{},"body":{"injectables/LoggingService.html":{}}}],["private",{"_index":127,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["process",{"_index":156,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["produce",{"_index":653,"title":{},"body":{"index.html":{}}}],["properties",{"_index":28,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/LogMessage.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["provide",{"_index":742,"title":{},"body":{"index.html":{}}}],["providedin",{"_index":467,"title":{},"body":{"injectables/LoggingService.html":{}}}],["providers",{"_index":738,"title":{},"body":{"index.html":{}}}],["public",{"_index":29,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["purposes",{"_index":90,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["queued",{"_index":102,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["quite",{"_index":677,"title":{},"body":{"index.html":{}}}],["rc",{"_index":614,"title":{},"body":{"index.html":{}}}],["read",{"_index":267,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["realtime",{"_index":561,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["recommended",{"_index":731,"title":{},"body":{"index.html":{}}}],["registers",{"_index":556,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["remaining",{"_index":157,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["remove",{"_index":283,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["removed",{"_index":249,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["removes",{"_index":228,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["representation",{"_index":326,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["request",{"_index":83,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["respectively",{"_index":711,"title":{},"body":{"index.html":{}}}],["responsible",{"_index":666,"title":{},"body":{"index.html":{}}}],["restrict",{"_index":750,"title":{},"body":{"index.html":{}}}],["result",{"_index":184,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["results",{"_index":186,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["retrieved",{"_index":449,"title":{},"body":{"injectables/LoggingService.html":{}}}],["return",{"_index":175,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["returns",{"_index":68,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["root",{"_index":429,"title":{},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"index.html":{}}}],["same",{"_index":603,"title":{},"body":{"index.html":{}}}],["sample",{"_index":631,"title":{},"body":{"index.html":{}}}],["saved",{"_index":210,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["see",{"_index":640,"title":{},"body":{"index.html":{}}}],["send",{"_index":58,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"injectables/LoggingService.html":{}}}],["sending",{"_index":101,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["sends",{"_index":10,"title":{},"body":{"classes/AjaxAppender.html":{},"index.html":{}}}],["sent",{"_index":81,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["separated",{"_index":675,"title":{},"body":{"index.html":{}}}],["serialized",{"_index":211,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["serve",{"_index":720,"title":{},"body":{"index.html":{}}}],["server",{"_index":13,"title":{},"body":{"classes/AjaxAppender.html":{},"injectables/LoggingService.html":{},"index.html":{}}}],["service",{"_index":425,"title":{},"body":{"injectables/LoggingService.html":{},"index.html":{}}}],["service.configuration",{"_index":464,"title":{},"body":{"injectables/LoggingService.html":{}}}],["service.configuration.ts",{"_index":529,"title":{},"body":{"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{}}}],["service.module.ts",{"_index":538,"title":{},"body":{"modules/LoggingServiceModule.html":{}}}],["set",{"_index":196,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["setbatchsize",{"_index":38,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["setbatchsize(batchsize",{"_index":103,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["setlayout",{"_index":39,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["setlayout(layout",{"_index":108,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["setloglevel",{"_index":358,"title":{},"body":{"classes/Logger.html":{}}}],["setloglevel(level",{"_index":387,"title":{},"body":{"classes/Logger.html":{}}}],["setmaxmessages",{"_index":223,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["setmaxmessages(value",{"_index":242,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["setonlogmessageschangedcallback",{"_index":548,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["setonlogmessageschangedcallback(callback",{"_index":554,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["sets",{"_index":105,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["settimerinterval",{"_index":40,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["settimerinterval(timerinterval",{"_index":110,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["setting",{"_index":696,"title":{},"body":{"index.html":{}}}],["settings",{"_index":428,"title":{},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{}}}],["severe",{"_index":706,"title":{},"body":{"index.html":{}}}],["severity",{"_index":701,"title":{},"body":{"index.html":{}}}],["show",{"_index":470,"title":{},"body":{"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["single",{"_index":673,"title":{},"body":{"index.html":{}}}],["size",{"_index":107,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["specific",{"_index":64,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["specified",{"_index":443,"title":{},"body":{"injectables/LoggingService.html":{}}}],["specify",{"_index":545,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["src/.../log",{"_index":596,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/lib/ajax",{"_index":6,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"coverage.html":{}}}],["src/lib/browser",{"_index":201,"title":{},"body":{"interfaces/BrowserConsoleAppenderConfiguration.html":{},"coverage.html":{}}}],["src/lib/local",{"_index":205,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"coverage.html":{}}}],["src/lib/log",{"_index":309,"title":{},"body":{"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/lib/logger.model.ts",{"_index":351,"title":{},"body":{"classes/Logger.html":{},"coverage.html":{}}}],["src/lib/logger.model.ts:11",{"_index":360,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:112",{"_index":371,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:128",{"_index":375,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:145",{"_index":369,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:164",{"_index":373,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:179",{"_index":377,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:199",{"_index":381,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:29",{"_index":384,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:38",{"_index":388,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:48",{"_index":390,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:64",{"_index":364,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:80",{"_index":386,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:96",{"_index":392,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logging",{"_index":528,"title":{},"body":{"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"coverage.html":{}}}],["src/lib/logging.service.ts",{"_index":424,"title":{},"body":{"injectables/LoggingService.html":{},"coverage.html":{}}}],["src/lib/logging.service.ts:146",{"_index":456,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:155",{"_index":442,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:167",{"_index":447,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:176",{"_index":454,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:31",{"_index":460,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:37",{"_index":459,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:41",{"_index":438,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:80",{"_index":440,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/memory",{"_index":543,"title":{},"body":{"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{}}}],["started",{"_index":599,"title":{"index.html":{}},"body":{}}],["statements",{"_index":575,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":128,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/MemoryAppender.html":{}}}],["step",{"_index":638,"title":{},"body":{"index.html":{}}}],["storage",{"_index":206,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["store",{"_index":231,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{}}}],["stored",{"_index":233,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["stores",{"_index":207,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["storing",{"_index":213,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["string",{"_index":116,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["strings",{"_index":277,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["super",{"_index":136,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["switch",{"_index":329,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["table",{"_index":587,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":586,"title":{},"body":{"coverage.html":{}}}],["takes",{"_index":729,"title":{},"body":{"index.html":{}}}],["testing",{"_index":89,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["tests",{"_index":382,"title":{},"body":{"classes/Logger.html":{}}}],["therefore",{"_index":307,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["this.ajaxappender",{"_index":142,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.addheader(\"content",{"_index":148,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.append(loggingevent",{"_index":174,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.getbatchsize",{"_index":177,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.getlayout",{"_index":179,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.gettimerinterval",{"_index":181,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.setbatchsize(batchsize",{"_index":178,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.setfailcallback((message",{"_index":154,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.setlayout(layout",{"_index":180,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.setlayout(new",{"_index":145,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.setsendallonunload(true",{"_index":152,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.settimed(timerinterval",{"_index":182,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.settimerinterval(timerinterval",{"_index":183,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappenderfailed",{"_index":477,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.ajaxappenderfailed.emit(message",{"_index":503,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.appenderfailed",{"_index":153,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.appenderfailed.emit(message",{"_index":155,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.browserconsoleappender",{"_index":481,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.browserconsoleappender.setlayout(new",{"_index":482,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.browserconsoleappender.setthreshold(convertedthreshold",{"_index":523,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.browserconsoleappender.setthreshold(log4javascript.level.all",{"_index":486,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.configure",{"_index":158,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["this.localstoragekey",{"_index":266,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["this.logger",{"_index":393,"title":{},"body":{"classes/Logger.html":{},"index.html":{}}}],["this.logger.debug.apply(this.logger",{"_index":403,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.entry(methodname",{"_index":648,"title":{},"body":{"index.html":{}}}],["this.logger.error(methodname",{"_index":652,"title":{},"body":{"index.html":{}}}],["this.logger.error.apply(this.logger",{"_index":409,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.exit(methodname",{"_index":649,"title":{},"body":{"index.html":{}}}],["this.logger.fatal.apply(this.logger",{"_index":411,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.info.apply(this.logger",{"_index":405,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.isdebugenabled",{"_index":402,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.iserrorenabled",{"_index":408,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.isfatalenabled",{"_index":410,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.isinfoenabled",{"_index":404,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.istraceenabled",{"_index":398,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.iswarnenabled",{"_index":406,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.setlevel(loglevelconverter.leveltolog4javascript(level",{"_index":397,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.trace.apply(this.logger",{"_index":401,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.warn.apply(this.logger",{"_index":407,"title":{},"body":{"classes/Logger.html":{}}}],["this.logmessages",{"_index":269,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["this.logmessages.length",{"_index":285,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["this.logmessages.push(message",{"_index":300,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["this.logmessages.shift",{"_index":287,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["this.logmessages.splice(0",{"_index":571,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["this.logmessageschanged",{"_index":476,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.logmessageschanged.emit(message",{"_index":493,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.maxmessages",{"_index":286,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["this.memoryappender",{"_index":490,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.memoryappender.configure(configuration.memoryappender",{"_index":519,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.memoryappender.getlogmessages",{"_index":526,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.memoryappender.setlayout(new",{"_index":491,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.memoryappender.setonlogmessageschangedcallback((message",{"_index":492,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.onlogmessageschangedcallback",{"_index":569,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["this.onlogmessageschangedcallback(message",{"_index":570,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["this.setbatchsize(configuration.batchsize",{"_index":166,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.setmaxmessages(configuration.maxmessages",{"_index":280,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["this.setthreshold(convertedthreshold",{"_index":173,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["this.settimerinterval(configuration.timerinterval",{"_index":168,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.url",{"_index":144,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["threshold",{"_index":26,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["thresholddefault",{"_index":133,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["throw",{"_index":137,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"injectables/LoggingService.html":{}}}],["time",{"_index":98,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/LogMessage.html":{},"classes/MemoryAppender.html":{}}}],["timer",{"_index":112,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["timerinterval",{"_index":24,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["timerintervaldefault",{"_index":131,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["timestamp",{"_index":298,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LogMessage.html":{},"classes/MemoryAppender.html":{}}}],["timestamps",{"_index":276,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["tog",{"_index":240,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["tostring",{"_index":41,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["trace",{"_index":195,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["trace(methodname",{"_index":389,"title":{},"body":{"classes/Logger.html":{}}}],["triggered",{"_index":57,"title":{},"body":{"classes/AjaxAppender.html":{},"injectables/LoggingService.html":{}}}],["true",{"_index":741,"title":{},"body":{"index.html":{}}}],["try",{"_index":416,"title":{},"body":{"classes/Logger.html":{},"injectables/LoggingService.html":{},"index.html":{}}}],["tslint:disable",{"_index":256,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["type",{"_index":52,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["typeof",{"_index":167,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["typical",{"_index":16,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["typically",{"_index":639,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":293,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["under",{"_index":241,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["unit",{"_index":88,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{}}}],["url",{"_index":20,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["usage",{"_index":634,"title":{},"body":{"index.html":{}}}],["use",{"_index":608,"title":{},"body":{"index.html":{}}}],["used",{"_index":86,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"index.html":{}}}],["usefactory",{"_index":744,"title":{},"body":{"index.html":{}}}],["useful",{"_index":559,"title":{},"body":{"classes/MemoryAppender.html":{},"index.html":{}}}],["using",{"_index":547,"title":{},"body":{"classes/MemoryAppender.html":{},"index.html":{}}}],["valid",{"_index":191,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["value",{"_index":246,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["values",{"_index":192,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["version",{"_index":602,"title":{},"body":{"index.html":{}}}],["versions",{"_index":607,"title":{},"body":{"index.html":{}}}],["via",{"_index":14,"title":{},"body":{"classes/AjaxAppender.html":{},"injectables/LoggingService.html":{}}}],["viewer",{"_index":633,"title":{},"body":{"index.html":{}}}],["visible",{"_index":717,"title":{},"body":{"index.html":{}}}],["void",{"_index":69,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["want",{"_index":560,"title":{},"body":{"classes/MemoryAppender.html":{},"index.html":{}}}],["warn",{"_index":134,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["warn(methodname",{"_index":391,"title":{},"body":{"classes/Logger.html":{}}}],["way",{"_index":732,"title":{},"body":{"index.html":{}}}],["write",{"_index":301,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["writes",{"_index":752,"title":{},"body":{"index.html":{}}}],["writing",{"_index":352,"title":{},"body":{"classes/Logger.html":{},"index.html":{}}}],["written",{"_index":349,"title":{},"body":{"interfaces/LogMessage.html":{},"injectables/LoggingService.html":{},"index.html":{}}}],["yes",{"_index":361,"title":{},"body":{"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AjaxAppender.html":{"url":"classes/AjaxAppender.html","title":"class - AjaxAppender","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AjaxAppender\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ajax-appender.model.ts\n        \n\n            \n                Description\n            \n            \n                An appender which sends the log messages to a server via HTTP.\nA typical configuration could be:\n```json\n\n{\n\"url\": \"https://my.backend.xy/LoggingBackend\",\n\"batchSize\": 10,\n\"timerInterval\": 60000,\n\"threshold\": \"INFO\"\n}\n```\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                appenderFailed\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                append\n                            \n                            \n                                    Public\n                                configure\n                            \n                            \n                                    Public\n                                getBatchSize\n                            \n                            \n                                    Public\n                                getInternalAppender\n                            \n                            \n                                    Public\n                                getLayout\n                            \n                            \n                                    Public\n                                getTimerInterval\n                            \n                            \n                                    Public\n                                setBatchSize\n                            \n                            \n                                    Public\n                                setLayout\n                            \n                            \n                                    Public\n                                setTimerInterval\n                            \n                            \n                                    Public\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configuration: AjaxAppenderConfiguration)\n                    \n                \n                        \n                            \n                                Defined in src/lib/ajax-appender.model.ts:35\n                            \n                        \n\n                \n                    \n                            Creates a new instance of the appender.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configuration\n                                                  \n                                                        \n                                                                        AjaxAppenderConfiguration\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                configuration for the appender.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            appenderFailed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     EventEmitter\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/ajax-appender.model.ts:32\n                            \n                        \n\n                \n                    \n                        Event triggered when the appender could not send log messages to the server.\n\n                    \n                \n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                                    Description\n                                          \n                                      \n                                      \n                                                \n                                                        message\n                                                        \n                                                                error message\n\n                                                        \n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            append\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    append(loggingEvent: log4javascript.LoggingEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:103\n                \n            \n\n\n            \n                \n                    Appender-specific method to append a log message.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    loggingEvent\n                                    \n                                            log4javascript.LoggingEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        event to be appended.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            configure\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(configuration: AjaxAppenderConfiguration)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:80\n                \n            \n\n\n            \n                \n                    Configures the logging depending on the given configuration.\nOnly the defined properties get overwritten.\nThe url cannot be modified.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    configuration\n                                    \n                                                AjaxAppenderConfiguration\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        configuration data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getBatchSize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBatchSize()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:127\n                \n            \n\n\n            \n                \n                    Returns the number of log messages sent in each request.\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getInternalAppender\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getInternalAppender()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:120\n                \n            \n\n\n            \n                \n                    Get the internally used appender.\nMainly for unit testing purposes.\n\n\n                    \n                        Returns :         log4javascript.AjaxAppender\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLayout\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLayout()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:142\n                \n            \n\n\n            \n                \n                    Returns the appender's layout.\n\n\n                    \n                        Returns :     log4javascript.Layout\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getTimerInterval\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTimerInterval()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:156\n                \n            \n\n\n            \n                \n                    Returns the length of time in milliseconds between each sending of queued log messages.\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setBatchSize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setBatchSize(batchSize: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:135\n                \n            \n\n\n            \n                \n                    Sets the number of log messages to send in each request.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    batchSize\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        new batch size\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setLayout\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setLayout(layout: log4javascript.Layout)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:149\n                \n            \n\n\n            \n                \n                    Sets the appender's layout.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    layout\n                                    \n                                            log4javascript.Layout\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setTimerInterval\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setTimerInterval(timerInterval: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:164\n                \n            \n\n\n            \n                \n                    Sets the length of time in milliseconds between each sending of queued log messages.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    timerInterval\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        new timer interval\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            toString\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toString()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:112\n                \n            \n\n\n            \n                \n                    Gets the appender's name.\nMainly for unit testing purposes.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        appender's name\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EventEmitter } from \"@angular/core\";\n\nimport * as log4javascript from \"log4javascript\";\n\nimport { AjaxAppenderConfiguration } from \"./ajax-appender.configuration\";\nimport { LogLevelConverter } from \"./log-level.converter\";\n\n/**\n * An appender which sends the log messages to a server via HTTP.\n *\n * A typical configuration could be:\n *\n * ```json\n * {\n *   \"url\": \"https://my.backend.xy/LoggingBackend\",\n *   \"batchSize\": 10,\n *   \"timerInterval\": 60000,\n *   \"threshold\": \"INFO\"\n * }\n * ```\n */\nexport class AjaxAppender extends log4javascript.Appender {\n\n\tprivate static batchSizeDefault = 1;\n\tprivate static timerIntervalDefault = 0;\n\tprivate static thresholdDefault = \"WARN\";\n\n\t/**\n\t * Event triggered when the appender could not send log messages to the server.\n\t * @param message error message\n\t */\n\tpublic appenderFailed: EventEmitter;\n\n\tprivate ajaxAppender: log4javascript.AjaxAppender;\n\tprivate url: string;\n\n\t/**\n\t * Creates a new instance of the appender.\n\t * @param configuration configuration for the appender.\n\t */\n\tconstructor(configuration: AjaxAppenderConfiguration) {\n\t\tsuper();\n\n\t\tif (!configuration) {\n\t\t\tthrow new Error(\"configuration must be not empty\");\n\t\t}\n\t\tif (!configuration.url) {\n\t\t\tthrow new Error(\"url must be not empty\");\n\t\t}\n\t\tthis.ajaxAppender = new log4javascript.AjaxAppender(configuration.url);\n\t\tthis.url = configuration.url;\n\n\t\tthis.ajaxAppender.setLayout(new log4javascript.JsonLayout(false, false));\n\t\tthis.ajaxAppender.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\t\tthis.ajaxAppender.setSendAllOnUnload(true);\n\n\t\tthis.appenderFailed = new EventEmitter();\n\t\tthis.ajaxAppender.setFailCallback((message: any) => {\n\t\t\tthis.appenderFailed.emit(message);\n\t\t});\n\n\t\t// process remaining configuration\n\t\tthis.configure({\n\t\t\tbatchSize: configuration.batchSize || AjaxAppender.batchSizeDefault,\n\t\t\tthreshold: configuration.threshold || AjaxAppender.thresholdDefault,\n\t\t\ttimerInterval: configuration.timerInterval || AjaxAppender.timerIntervalDefault,\n\t\t\turl: configuration.url,\n\t\t});\n\n\t}\n\n\t/**\n\t * Configures the logging depending on the given configuration.\n\t *\n\t * Only the defined properties get overwritten.\n\t * The url cannot be modified.\n\t *\n\t * @param configuration configuration data.\n\t */\n\tpublic configure(configuration: AjaxAppenderConfiguration): void {\n\t\tif (configuration) {\n\t\t\tif (configuration.url && configuration.url !== this.url) {\n\t\t\t\tthrow new Error(\"url must not be changed\");\n\t\t\t}\n\t\t\tif (configuration.batchSize) {\n\t\t\t\tthis.setBatchSize(configuration.batchSize);\n\t\t\t}\n\t\t\tif (typeof configuration.timerInterval === \"number\") {\n\t\t\t\tthis.setTimerInterval(configuration.timerInterval);\n\t\t\t}\n\t\t\tif (configuration.threshold) {\n\t\t\t\tconst convertedThreshold = LogLevelConverter.levelToLog4Javascript(\n\t\t\t\t\tLogLevelConverter.levelFromString(configuration.threshold));\n\t\t\t\tthis.setThreshold(convertedThreshold);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Appender-specific method to append a log message.\n\t * @param loggingEvent event to be appended.\n\t */\n\tpublic append(loggingEvent: log4javascript.LoggingEvent): void {\n\t\tthis.ajaxAppender.append(loggingEvent);\n\t}\n\n\t/**\n\t * Gets the appender's name.\n\t * Mainly for unit testing purposes.\n\t * @return appender's name\n\t */\n\tpublic toString(): string {\n\t\treturn \"Ionic.Logging.AjaxAppender\";\n\t}\n\n\t/**\n\t * Get the internally used appender.\n\t * Mainly for unit testing purposes.\n\t */\n\tpublic getInternalAppender(): log4javascript.AjaxAppender {\n\t\treturn this.ajaxAppender;\n\t}\n\n\t/**\n\t * Returns the number of log messages sent in each request.\n\t */\n\tpublic getBatchSize(): number {\n\t\treturn this.ajaxAppender.getBatchSize();\n\t}\n\n\t/**\n\t * Sets the number of log messages to send in each request.\n\t * @param batchSize new batch size\n\t */\n\tpublic setBatchSize(batchSize: number): void {\n\t\tthis.ajaxAppender.setBatchSize(batchSize);\n\t}\n\n\t/**\n\t * Returns the appender's layout.\n\t */\n\tpublic getLayout(): log4javascript.Layout {\n\t\treturn this.ajaxAppender.getLayout();\n\t}\n\n\t/**\n\t * Sets the appender's layout.\n\t */\n\tpublic setLayout(layout: log4javascript.Layout): void {\n\t\tthis.ajaxAppender.setLayout(layout);\n\t}\n\n\t/**\n\t * Returns the length of time in milliseconds between each sending of queued log messages.\n\t */\n\tpublic getTimerInterval(): number {\n\t\treturn this.ajaxAppender.getTimerInterval();\n\t}\n\n\t/**\n\t * Sets the length of time in milliseconds between each sending of queued log messages.\n\t * @param timerInterval new timer interval\n\t */\n\tpublic setTimerInterval(timerInterval: number): void {\n\t\tthis.ajaxAppender.setTimed(timerInterval > 0);\n\t\tthis.ajaxAppender.setTimerInterval(timerInterval);\n\t}\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AjaxAppenderConfiguration.html":{"url":"interfaces/AjaxAppenderConfiguration.html","title":"interface - AjaxAppenderConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AjaxAppenderConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ajax-appender.configuration.ts\n        \n\n            \n                Description\n            \n            \n                Configuration for AjaxAppender.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        batchSize\n                                \n                                \n                                            Optional\n                                        threshold\n                                \n                                \n                                            Optional\n                                        timerInterval\n                                \n                                \n                                        url\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        batchSize\n                                    \n                                \n                                \n                                    \n                                        batchSize:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Number of log messages sent in each request.\nDefault: 1.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        threshold\n                                    \n                                \n                                \n                                    \n                                        threshold:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Threshold.\nValid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN\nDefault: WARN.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timerInterval\n                                    \n                                \n                                \n                                    \n                                        timerInterval:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Interval for sending log messages (in milliseconds).\nIf set to 0, every message will be sent immediatedly.\nDefault: 0.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Url to send JavaScript logs\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface AjaxAppenderConfiguration {\n\n\t/**\n\t * Url to send JavaScript logs\n\t */\n\turl: string;\n\n\t/**\n\t * Number of log messages sent in each request.\n\t *\n\t * Default: 1.\n\t */\n\tbatchSize?: number;\n\n\t/**\n\t * Interval for sending log messages (in milliseconds).\n\t *\n\t * If set to 0, every message will be sent immediatedly.\n\t *\n\t * Default: 0.\n\t */\n\ttimerInterval?: number;\n\n\t/**\n\t * Threshold.\n\t *\n\t * Valid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN\n\t *\n\t * Default: WARN.\n\t */\n\tthreshold?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BrowserConsoleAppenderConfiguration.html":{"url":"interfaces/BrowserConsoleAppenderConfiguration.html","title":"interface - BrowserConsoleAppenderConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  BrowserConsoleAppenderConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/browser-console-appender.configuration.ts\n        \n\n            \n                Description\n            \n            \n                Configuration for BrowserConsoleAppender.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        threshold\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        threshold\n                                    \n                                \n                                \n                                    \n                                        threshold:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Threshold.\nValid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN\nDefault: DEBUG.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface BrowserConsoleAppenderConfiguration {\n\t/**\n\t * Threshold.\n\t *\n\t * Valid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN\n\t *\n\t * Default: DEBUG.\n\t */\n\tthreshold?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LocalStorageAppender.html":{"url":"classes/LocalStorageAppender.html","title":"class - LocalStorageAppender","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LocalStorageAppender\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/local-storage-appender.model.ts\n        \n\n            \n                Description\n            \n            \n                An appender which stores the log messages in the browser's local storage.\nThe messages are saved JSON-serialized.\nYou have to configure which key is used for storing the messages.\nA typical configuration could be:\n```json\n\n{\n\"localStorageKey\": \"myLogs\",\n\"maxMessages\": 500,\n\"threshold\": \"INFO\"\n}\n```\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                append\n                            \n                            \n                                    Public\n                                clearLog\n                            \n                            \n                                    Public\n                                configure\n                            \n                            \n                                    Public\n                                getLocalStorageKey\n                            \n                            \n                                    Public\n                                getLogMessages\n                            \n                            \n                                    Public\n                                getMaxMessages\n                            \n                            \n                                    Static\n                                loadLogMessages\n                            \n                            \n                                    Public\n                                setMaxMessages\n                            \n                            \n                                    Public\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configuration: LocalStorageAppenderConfiguration)\n                    \n                \n                        \n                            \n                                Defined in src/lib/local-storage-appender.model.ts:34\n                            \n                        \n\n                \n                    \n                            Creates a new instance of the appender.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configuration\n                                                  \n                                                        \n                                                                        LocalStorageAppenderConfiguration\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                configuration for the appender.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            append\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    append(loggingEvent: log4javascript.LoggingEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:113\n                \n            \n\n\n            \n                \n                    Appender-specific method to append a log message.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    loggingEvent\n                                    \n                                            log4javascript.LoggingEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        event to be appended.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            clearLog\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clearLog()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:190\n                \n            \n\n\n            \n                \n                    Removes all messages from local storage.\nMainly for unit testing purposes.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            configure\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(configuration: LocalStorageAppenderConfiguration)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:93\n                \n            \n\n\n            \n                \n                    Configures the logging depending on the given configuration.\nOnly the defined properties get overwritten.\nThe localStorageKey cannot be modified.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    configuration\n                                    \n                                                LocalStorageAppenderConfiguration\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        configuration data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLocalStorageKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLocalStorageKey()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:144\n                \n            \n\n\n            \n                \n                    Get the key which is used to store the messages in the local storage.\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLogMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLogMessages()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:182\n                \n            \n\n\n            \n                \n                    Gets all messages stored in local storage.\nMainly for unit testing purposes.\n\n\n                    \n                    \n                    \n                        Returns :         LogMessage[]\n\n                    \n                    \n                        stored messages\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMaxMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMaxMessages()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:151\n                \n            \n\n\n            \n                \n                    Get the maximum number of messages which will be stored in local storage.\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            loadLogMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadLogMessages(localStorageKey: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:69\n                \n            \n\n\n            \n                \n                    Load tog messages from local storage which are stored there under the given key.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    localStorageKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        local storage key\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         LogMessage[]\n\n                    \n                    \n                        stored messages\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setMaxMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setMaxMessages(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:161\n                \n            \n\n\n            \n                \n                    Set the maximum number of messages which will be stored in local storage.\nIf the appender stores currently more messages than the new value allows, the oldest messages get removed.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        new maximum number\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            toString\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toString()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:137\n                \n            \n\n\n            \n                \n                    Gets the appender's name.\nMainly for unit testing purposes.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        appender's name\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as log4javascript from \"log4javascript\";\n\nimport { LocalStorageAppenderConfiguration } from \"./local-storage-appender.configuration\";\nimport { LogLevelConverter } from \"./log-level.converter\";\nimport { LogLevel } from \"./log-level.model\";\nimport { LogMessage } from \"./log-message.model\";\n\n/**\n * An appender which stores the log messages in the browser's local storage.\n *\n * The messages are saved JSON-serialized.\n * You have to configure which key is used for storing the messages.\n *\n * A typical configuration could be:\n *\n * ```json\n * {\n *   \"localStorageKey\": \"myLogs\",\n *   \"maxMessages\": 500,\n *   \"threshold\": \"INFO\"\n * }\n * ```\n */\nexport class LocalStorageAppender extends log4javascript.Appender {\n\n\tprivate static maxMessagesDefault = 250;\n\tprivate static thresholdDefault = \"WARN\";\n\n\tprivate maxMessages: number;\n\n\t// tslint:disable-next-line:completed-docs\n\tprivate localStorageKey: string;\n\t// tslint:disable-next-line:completed-docs\n\tprivate logMessages: LogMessage[];\n\n\t/**\n\t * Creates a new instance of the appender.\n\t * @param configuration configuration for the appender.\n\t */\n\tconstructor(configuration: LocalStorageAppenderConfiguration) {\n\t\tsuper();\n\n\t\tif (!configuration) {\n\t\t\tthrow new Error(\"configuration must be not empty\");\n\t\t}\n\t\t// tslint:disable-next-line:no-null-keyword\n\t\tif (!configuration.localStorageKey || configuration.localStorageKey === \"\") {\n\t\t\tthrow new Error(\"localStorageKey must be not empty\");\n\t\t}\n\t\tthis.localStorageKey = configuration.localStorageKey;\n\n\t\t// read existing logMessages\n\t\t// tslint:disable-next-line:no-null-keyword\n\t\tthis.logMessages = LocalStorageAppender.loadLogMessages(this.localStorageKey);\n\n\t\t// process remaining configuration\n\t\tthis.configure({\n\t\t\tlocalStorageKey: configuration.localStorageKey,\n\t\t\tmaxMessages: configuration.maxMessages || LocalStorageAppender.maxMessagesDefault,\n\t\t\tthreshold: configuration.threshold || LocalStorageAppender.thresholdDefault,\n\t\t});\n\t}\n\n\t/**\n\t * Load tog messages from local storage which are stored there under the given key.\n\t * @param localStorageKey local storage key\n\t * @return stored messages\n\t */\n\tpublic static loadLogMessages(localStorageKey: string): LogMessage[] {\n\t\tlet logMessages: LogMessage[];\n\n\t\tif (!localStorageKey || localStorage.getItem(localStorageKey) === null) {\n\t\t\tlogMessages = [];\n\t\t} else {\n\t\t\tlogMessages = JSON.parse(localStorage.getItem(localStorageKey));\n\t\t\tfor (const logMessage of logMessages) {\n\t\t\t\t// timestamps are serialized as strings\n\t\t\t\tlogMessage.timeStamp = new Date(logMessage.timeStamp);\n\t\t\t}\n\t\t}\n\n\t\treturn logMessages;\n\t}\n\n\t/**\n\t * Configures the logging depending on the given configuration.\n\t *\n\t * Only the defined properties get overwritten.\n\t * The localStorageKey cannot be modified.\n\t *\n\t * @param configuration configuration data.\n\t */\n\tpublic configure(configuration: LocalStorageAppenderConfiguration): void {\n\t\tif (configuration) {\n\t\t\tif (configuration.localStorageKey && configuration.localStorageKey !== this.localStorageKey) {\n\t\t\t\tthrow new Error(\"localStorageKey must not be changed\");\n\t\t\t}\n\t\t\tif (configuration.maxMessages) {\n\t\t\t\tthis.setMaxMessages(configuration.maxMessages);\n\t\t\t}\n\t\t\tif (configuration.threshold) {\n\t\t\t\tconst convertedThreshold = LogLevelConverter.levelToLog4Javascript(\n\t\t\t\t\tLogLevelConverter.levelFromString(configuration.threshold));\n\t\t\t\tthis.setThreshold(convertedThreshold);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Appender-specific method to append a log message.\n\t * @param loggingEvent event to be appended.\n\t */\n\tpublic append(loggingEvent: log4javascript.LoggingEvent): void {\n\t\t// if logMessages is already full, remove oldest element\n\t\twhile (this.logMessages.length >= this.maxMessages) {\n\t\t\tthis.logMessages.shift();\n\t\t}\n\t\t// add event to logMessages\n\t\tconst message: LogMessage = {\n\t\t\tlevel: LogLevel[LogLevelConverter.levelFromLog4Javascript(loggingEvent.level)],\n\t\t\tlogger: typeof loggingEvent.logger !== \"undefined\" ? loggingEvent.logger.name : undefined,\n\t\t\tmessage: loggingEvent.messages.slice(1),\n\t\t\tmethodName: loggingEvent.messages[0],\n\t\t\ttimeStamp: loggingEvent.timeStamp,\n\t\t};\n\t\tthis.logMessages.push(message);\n\n\t\t// write values to localStorage\n\t\tlocalStorage.setItem(this.localStorageKey, JSON.stringify(this.logMessages));\n\t}\n\n\t/**\n\t * Gets the appender's name.\n\t * Mainly for unit testing purposes.\n\t * @return appender's name\n\t */\n\tpublic toString(): string {\n\t\treturn \"Ionic.Logging.LocalStorageAppender\";\n\t}\n\n\t/**\n\t * Get the key which is used to store the messages in the local storage.\n\t */\n\tpublic getLocalStorageKey(): string {\n\t\treturn this.localStorageKey;\n\t}\n\n\t/**\n\t * Get the maximum number of messages which will be stored in local storage.\n\t */\n\tpublic getMaxMessages(): number {\n\t\treturn this.maxMessages;\n\t}\n\n\t/**\n\t * Set the maximum number of messages which will be stored in local storage.\n\t *\n\t * If the appender stores currently more messages than the new value allows, the oldest messages get removed.\n\t * @param value new maximum number\n\t */\n\tpublic setMaxMessages(value: number): void {\n\t\tif (this.maxMessages !== value) {\n\t\t\tthis.maxMessages = value;\n\n\t\t\tif (this.logMessages.length > this.maxMessages) {\n\t\t\t\t// there are too much logMessages for the new value, therefore remove oldest messages\n\t\t\t\twhile (this.logMessages.length > this.maxMessages) {\n\t\t\t\t\tthis.logMessages.shift();\n\t\t\t\t}\n\n\t\t\t\t// write values to localStorage\n\t\t\t\tlocalStorage.setItem(this.localStorageKey, JSON.stringify(this.logMessages));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Gets all messages stored in local storage.\n\t * Mainly for unit testing purposes.\n\t * @return stored messages\n\t */\n\tpublic getLogMessages(): LogMessage[] {\n\t\treturn this.logMessages;\n\t}\n\n\t/**\n\t * Removes all messages from local storage.\n\t * Mainly for unit testing purposes.\n\t */\n\tpublic clearLog(): void {\n\t\tthis.logMessages = [];\n\t\tlocalStorage.removeItem(this.localStorageKey);\n\t}\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LocalStorageAppenderConfiguration.html":{"url":"interfaces/LocalStorageAppenderConfiguration.html","title":"interface - LocalStorageAppenderConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  LocalStorageAppenderConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/local-storage-appender.configuration.ts\n        \n\n            \n                Description\n            \n            \n                Configuration for LocalStorageAppender.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        localStorageKey\n                                \n                                \n                                            Optional\n                                        maxMessages\n                                \n                                \n                                            Optional\n                                        threshold\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        localStorageKey\n                                    \n                                \n                                \n                                    \n                                        localStorageKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Key which is used to store the messages in the local storage.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxMessages\n                                    \n                                \n                                \n                                    \n                                        maxMessages:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Maximum number of log messages stored by the appender.\nDefault: 250.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        threshold\n                                    \n                                \n                                \n                                    \n                                        threshold:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Threshold.\nValid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN\nDefault: WARN.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface LocalStorageAppenderConfiguration {\n\t/**\n\t * Key which is used to store the messages in the local storage.\n\t */\n\tlocalStorageKey: string;\n\n\t/**\n\t * Maximum number of log messages stored by the appender.\n\t *\n\t * Default: 250.\n\t */\n\tmaxMessages?: number;\n\n\t/**\n\t * Threshold.\n\t *\n\t * Valid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN\n\t *\n\t * Default: WARN.\n\t */\n\tthreshold?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LogLevelConverter.html":{"url":"classes/LogLevelConverter.html","title":"class - LogLevelConverter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LogLevelConverter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/log-level.converter.ts\n        \n\n            \n                Description\n            \n            \n                Helper class for converting log levels from and to different data type.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                levelFromLog4Javascript\n                            \n                            \n                                    Static\n                                levelFromString\n                            \n                            \n                                    Static\n                                levelToLog4Javascript\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            levelFromLog4Javascript\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    levelFromLog4Javascript(level: log4javascript.Level)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/log-level.converter.ts:15\n                \n            \n\n\n            \n                \n                    Converts log4javascript.Level to internal LogLevel.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    level\n                                    \n                                            log4javascript.Level\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        log4javascript's data type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         LogLevel\n\n                    \n                    \n                        internal data type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            levelFromString\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    levelFromString(level: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/log-level.converter.ts:43\n                \n            \n\n\n            \n                \n                    Converts string representation to internal LogLevel.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    level\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        string representation\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         LogLevel\n\n                    \n                    \n                        internal data type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            levelToLog4Javascript\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    levelToLog4Javascript(level: LogLevel)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/log-level.converter.ts:71\n                \n            \n\n\n            \n                \n                    Converts internal LogLevel to log4javascript.Level.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    level\n                                    \n                                                LogLevel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     log4javascript.Level\n\n                    \n                    \n                        level log4javascript's data type\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as log4javascript from \"log4javascript\";\n\nimport { LogLevel } from \"./log-level.model\";\n\n/**\n * Helper class for converting log levels from and to different data type.\n */\nexport class LogLevelConverter {\n\n\t/**\n\t * Converts log4javascript.Level to internal LogLevel.\n\t * @param level log4javascript's data type\n\t * @return internal data type.\n\t */\n\tpublic static levelFromLog4Javascript(level: log4javascript.Level): LogLevel {\n\t\tswitch (level) {\n\t\t\tcase log4javascript.Level.ALL:\n\t\t\t\treturn LogLevel.ALL;\n\t\t\tcase log4javascript.Level.DEBUG:\n\t\t\t\treturn LogLevel.DEBUG;\n\t\t\tcase log4javascript.Level.ERROR:\n\t\t\t\treturn LogLevel.ERROR;\n\t\t\tcase log4javascript.Level.FATAL:\n\t\t\t\treturn LogLevel.FATAL;\n\t\t\tcase log4javascript.Level.INFO:\n\t\t\t\treturn LogLevel.INFO;\n\t\t\tcase log4javascript.Level.OFF:\n\t\t\t\treturn LogLevel.OFF;\n\t\t\tcase log4javascript.Level.TRACE:\n\t\t\t\treturn LogLevel.TRACE;\n\t\t\tcase log4javascript.Level.WARN:\n\t\t\t\treturn LogLevel.WARN;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`invalid level ${level}`);\n\t\t}\n\t}\n\n\t/**\n\t * Converts string representation to internal LogLevel.\n\t * @param level string representation\n\t * @return internal data type.\n\t */\n\tpublic static levelFromString(level: string): LogLevel {\n\t\tswitch (level) {\n\t\t\tcase \"ALL\":\n\t\t\t\treturn LogLevel.ALL;\n\t\t\tcase \"DEBUG\":\n\t\t\t\treturn LogLevel.DEBUG;\n\t\t\tcase \"ERROR\":\n\t\t\t\treturn LogLevel.ERROR;\n\t\t\tcase \"FATAL\":\n\t\t\t\treturn LogLevel.FATAL;\n\t\t\tcase \"INFO\":\n\t\t\t\treturn LogLevel.INFO;\n\t\t\tcase \"OFF\":\n\t\t\t\treturn LogLevel.OFF;\n\t\t\tcase \"TRACE\":\n\t\t\t\treturn LogLevel.TRACE;\n\t\t\tcase \"WARN\":\n\t\t\t\treturn LogLevel.WARN;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`invalid level ${level}`);\n\t\t}\n\t}\n\n\t/**\n\t * Converts internal LogLevel to log4javascript.Level.\n\t * @param internal data type.\n\t * @return level log4javascript's data type\n\t */\n\tpublic static levelToLog4Javascript(level: LogLevel): log4javascript.Level {\n\t\tswitch (level) {\n\t\t\tcase LogLevel.ALL:\n\t\t\t\treturn log4javascript.Level.ALL;\n\t\t\tcase LogLevel.DEBUG:\n\t\t\t\treturn log4javascript.Level.DEBUG;\n\t\t\tcase LogLevel.ERROR:\n\t\t\t\treturn log4javascript.Level.ERROR;\n\t\t\tcase LogLevel.FATAL:\n\t\t\t\treturn log4javascript.Level.FATAL;\n\t\t\tcase LogLevel.INFO:\n\t\t\t\treturn log4javascript.Level.INFO;\n\t\t\tcase LogLevel.OFF:\n\t\t\t\treturn log4javascript.Level.OFF;\n\t\t\tcase LogLevel.TRACE:\n\t\t\t\treturn log4javascript.Level.TRACE;\n\t\t\tcase LogLevel.WARN:\n\t\t\t\treturn log4javascript.Level.WARN;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`invalid level ${level}`);\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LogMessage.html":{"url":"interfaces/LogMessage.html","title":"interface - LogMessage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  LogMessage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/log-message.model.ts\n        \n\n            \n                Description\n            \n            \n                Log message.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        level\n                                \n                                \n                                        logger\n                                \n                                \n                                        message\n                                \n                                \n                                        methodName\n                                \n                                \n                                        timeStamp\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        level\n                                    \n                                \n                                \n                                    \n                                        level:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Log level.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logger\n                                    \n                                \n                                \n                                    \n                                        logger:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of the logger.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Message.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        methodName\n                                    \n                                \n                                \n                                    \n                                        methodName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Method, in which the message was written.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timeStamp\n                                    \n                                \n                                \n                                    \n                                        timeStamp:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Time when the log was written.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface LogMessage {\n\t/**\n\t * Time when the log was written.\n\t */\n\ttimeStamp: Date;\n\n\t/**\n\t * Log level.\n\t */\n\tlevel: string;\n\n\t/**\n\t * Name of the logger.\n\t */\n\tlogger: string;\n\n\t/**\n\t * Method, in which the message was written.\n\t */\n\tmethodName: string;\n\n\t/**\n\t * Message.\n\t */\n\tmessage: string[];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Logger.html":{"url":"classes/Logger.html","title":"class - Logger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Logger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/logger.model.ts\n        \n\n            \n                Description\n            \n            \n                Logger for writing log messages.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                debug\n                            \n                            \n                                    Public\n                                entry\n                            \n                            \n                                    Public\n                                error\n                            \n                            \n                                    Public\n                                exit\n                            \n                            \n                                    Public\n                                fatal\n                            \n                            \n                                    Public\n                                formatArgument\n                            \n                            \n                                    Public\n                                getInternalLogger\n                            \n                            \n                                    Public\n                                getLogLevel\n                            \n                            \n                                    Public\n                                info\n                            \n                            \n                                    Public\n                                setLogLevel\n                            \n                            \n                                    Public\n                                trace\n                            \n                            \n                                    Public\n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger?: string | any)\n                    \n                \n                        \n                            \n                                Defined in src/lib/logger.model.ts:11\n                            \n                        \n\n                \n                    \n                            Creates a new instance of a logger.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    string | any\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            debug\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    debug(methodName: string, ...params: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:64\n                \n            \n\n\n            \n                \n                    Logs a message at level DEBUG.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    methodName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the method\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        optional parameters to be logged; objects will be formatted as JSON\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            entry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    entry(methodName: string, ...params: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:145\n                \n            \n\n\n            \n                \n                    Logs the entry into a method.\nThe method name will be logged at level INFO, the parameters at level DEBUG.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    methodName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the method\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        optional parameters to be logged; objects will be formatted as JSON\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            error\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    error(methodName: string, ...params: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:112\n                \n            \n\n\n            \n                \n                    Logs a message at level ERROR.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    methodName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the method\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        optional parameters to be logged; objects will be formatted as JSON\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            exit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    exit(methodName: string, ...params: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:164\n                \n            \n\n\n            \n                \n                    Logs the exit of a method.\nThe method name will be logged at level INFO, the parameters at level DEBUG.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    methodName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the method\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        optional parameters to be logged; objects will be formatted as JSON\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            fatal\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fatal(methodName: string, ...params: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:128\n                \n            \n\n\n            \n                \n                    Logs a message at level FATAL.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    methodName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the method\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        optional parameters to be logged; objects will be formatted as JSON\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            formatArgument\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    formatArgument(arg: any)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:179\n                \n            \n\n\n            \n                \n                    Formats the given argument.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    arg\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getInternalLogger\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getInternalLogger()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:199\n                \n            \n\n\n            \n                \n                    Returns the internal Logger (for unit tests only).\n\n\n                    \n                        Returns :         log4javascript.Logger\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLogLevel\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLogLevel()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:29\n                \n            \n\n\n            \n                \n                    Get the log level.\n\n\n                    \n                        Returns :         LogLevel\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            info\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    info(methodName: string, ...params: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:80\n                \n            \n\n\n            \n                \n                    Logs a message at level INFO.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    methodName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the method\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        optional parameters to be logged; objects will be formatted as JSON\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setLogLevel\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setLogLevel(level: LogLevel)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:38\n                \n            \n\n\n            \n                \n                    Set the log level.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    level\n                                    \n                                                LogLevel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the new log level\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            trace\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    trace(methodName: string, ...params: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:48\n                \n            \n\n\n            \n                \n                    Logs a message at level TRACE.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    methodName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the method\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        optional parameters to be logged; objects will be formatted as JSON\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            warn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    warn(methodName: string, ...params: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:96\n                \n            \n\n\n            \n                \n                    Logs a message at level WARN.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    methodName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the method\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        optional parameters to be logged; objects will be formatted as JSON\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as log4javascript from \"log4javascript\";\n\nimport { LogLevelConverter } from \"./log-level.converter\";\nimport { LogLevel } from \"./log-level.model\";\n\n/**\n * Logger for writing log messages.\n */\nexport class Logger {\n\n\tprivate logger: log4javascript.Logger;\n\n\t/**\n\t * Creates a new instance of a logger.\n\t */\n\tconstructor(logger?: string | any) {\n\t\tif (typeof logger === \"undefined\") {\n\t\t\tthis.logger = log4javascript.getRootLogger();\n\t\t} else if (typeof logger === \"string\") {\n\t\t\tthis.logger = log4javascript.getLogger(logger);\n\t\t} else {\n\t\t\tthis.logger = logger;\n\t\t}\n\t}\n\n\t/**\n\t * Get the log level.\n\t */\n\tpublic getLogLevel(): LogLevel {\n\t\treturn LogLevelConverter.levelFromLog4Javascript(this.logger.getLevel());\n\t}\n\n\t/**\n\t * Set the log level.\n\t *\n\t * @param level the new log level\n\t */\n\tpublic setLogLevel(level: LogLevel): void {\n\t\tthis.logger.setLevel(LogLevelConverter.levelToLog4Javascript(level));\n\t}\n\n\t/**\n\t * Logs a message at level TRACE.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic trace(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isTraceEnabled()) {\n\t\t\tconst args = [methodName];\n\t\t\tfor (const param of params) {\n\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t}\n\t\t\tthis.logger.trace.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Logs a message at level DEBUG.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic debug(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isDebugEnabled()) {\n\t\t\tconst args = [methodName];\n\t\t\tfor (const param of params) {\n\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t}\n\t\t\tthis.logger.debug.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Logs a message at level INFO.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic info(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isInfoEnabled()) {\n\t\t\tconst args = [methodName];\n\t\t\tfor (const param of params) {\n\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t}\n\t\t\tthis.logger.info.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Logs a message at level WARN.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic warn(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isWarnEnabled()) {\n\t\t\tconst args = [methodName];\n\t\t\tfor (const param of params) {\n\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t}\n\t\t\tthis.logger.warn.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Logs a message at level ERROR.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic error(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isErrorEnabled()) {\n\t\t\tconst args = [methodName];\n\t\t\tfor (const param of params) {\n\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t}\n\t\t\tthis.logger.error.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Logs a message at level FATAL.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic fatal(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isFatalEnabled()) {\n\t\t\tconst args = [methodName];\n\t\t\tfor (const param of params) {\n\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t}\n\t\t\tthis.logger.fatal.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Logs the entry into a method.\n\t * The method name will be logged at level INFO, the parameters at level DEBUG.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic entry(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isInfoEnabled()) {\n\t\t\tconst args = [methodName, \"entry\"];\n\t\t\tif (this.logger.isDebugEnabled()) {\n\t\t\t\tfor (const param of params) {\n\t\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.logger.info.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Logs the exit of a method.\n\t * The method name will be logged at level INFO, the parameters at level DEBUG.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic exit(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isInfoEnabled()) {\n\t\t\tconst args = [methodName, \"exit\"];\n\t\t\tif (this.logger.isDebugEnabled()) {\n\t\t\t\tfor (const param of params) {\n\t\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.logger.info.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Formats the given argument.\n\t */\n\tpublic formatArgument(arg: any): string {\n\t\tif (typeof arg === \"string\") {\n\t\t\treturn arg;\n\t\t} else if (typeof arg === \"number\") {\n\t\t\treturn arg.toString();\n\t\t} else if (arg instanceof Error) {\n\t\t\t// JSON.stringify() returns here \"{ }\"\n\t\t\treturn arg.toString();\n\t\t} else {\n\t\t\ttry {\n\t\t\t\treturn JSON.stringify(arg);\n\t\t\t} catch (e) {\n\t\t\t\treturn e.message;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns the internal Logger (for unit tests only).\n\t */\n\tpublic getInternalLogger(): log4javascript.Logger {\n\t\treturn this.logger;\n\t}\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingService.html":{"url":"injectables/LoggingService.html","title":"injectable - LoggingService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LoggingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/logging.service.ts\n        \n\n            \n                Description\n            \n            \n                Service for logging functionality.\nBy default, the following settings are used:\n\nlogger: root with level WARN\nappender: BrowserConsoleAppender with threshold DEBUG and MemoryAppender with threshold ALL\n\nVia configure, it is possible to amend these settings.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                ajaxAppenderFailed\n                            \n                            \n                                    Public\n                                logMessagesChanged\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                configure\n                            \n                            \n                                    Public\n                                getLogger\n                            \n                            \n                                    Public\n                                getLogMessages\n                            \n                            \n                                    Public\n                                getLogMessagesFromLocalStorage\n                            \n                            \n                                    Public\n                                getRootLogger\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/lib/logging.service.ts:41\n                            \n                        \n\n                \n                    \n                            Creates a new instance of the service.\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            configure\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(configuration?: LoggingServiceConfiguration)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logging.service.ts:80\n                \n            \n\n\n            \n                \n                    Configures the logging depending on the given configuration.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    configuration\n                                    \n                                                LoggingServiceConfiguration\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        configuration data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLogger\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLogger(loggerName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logging.service.ts:155\n                \n            \n\n\n            \n                \n                    Gets a logger with the specified name, creating it if a logger with that name does not already exist.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    loggerName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the logger\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Logger\n\n                    \n                    \n                        logger\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLogMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLogMessages()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logging.service.ts:167\n                \n            \n\n\n            \n                \n                    Gets the last log messages.\nThe log messages are retrieved from the internal MemoryAppender.\nThat means you will get only the most current messages. The number of the messages is limited\nby its maxMessages value.\n\n\n                    \n                    \n                    \n                        Returns :         LogMessage[]\n\n                    \n                    \n                        log messages\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLogMessagesFromLocalStorage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLogMessagesFromLocalStorage(localStorageKey: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logging.service.ts:176\n                \n            \n\n\n            \n                \n                    Loads the log messages written by the LocalStorageAppender with the given key.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    localStorageKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        key for the local storage\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         LogMessage[]\n\n                    \n                    \n                        log messages\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getRootLogger\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRootLogger()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logging.service.ts:146\n                \n            \n\n\n            \n                \n                    Gets the root logger from which all other loggers derive.\n\n\n                    \n                    \n                    \n                        Returns :         Logger\n\n                    \n                    \n                        root logger\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            ajaxAppenderFailed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     EventEmitter\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/logging.service.ts:37\n                            \n                        \n\n                \n                    \n                        Event triggered when ajax appender could not send log messages to the server.\n\n                    \n                \n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                                    Description\n                                          \n                                      \n                                      \n                                                \n                                                        message\n                                                        \n                                                                error message\n\n                                                        \n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            logMessagesChanged\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         EventEmitter\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/logging.service.ts:31\n                            \n                        \n\n                \n                    \n                        Event triggered when new log message was added.\n\n                    \n                \n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                                    Description\n                                          \n                                      \n                                      \n                                                \n                                                        message\n                                                        \n                                                                new log message\n\n                                                        \n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n\n\n    \n\n\n    \n        import { EventEmitter, Injectable, Optional } from \"@angular/core\";\n\nimport * as log4javascript from \"log4javascript\";\n\nimport { AjaxAppender } from \"./ajax-appender.model\";\nimport { LocalStorageAppender } from \"./local-storage-appender.model\";\nimport { LogLevelConverter } from \"./log-level.converter\";\nimport { LogMessage } from \"./log-message.model\";\nimport { Logger } from \"./logger.model\";\nimport { LoggingServiceConfiguration } from \"./logging-service.configuration\";\nimport { MemoryAppender } from \"./memory-appender.model\";\n\n/**\n * Service for logging functionality.\n *\n * By default, the following settings are used:\n *  - logger: root with level WARN\n *  - appender: BrowserConsoleAppender with threshold DEBUG and MemoryAppender with threshold ALL\n *\n * Via [configure](#configure), it is possible to amend these settings.\n */\n@Injectable({\n\tprovidedIn: \"root\"\n})\nexport class LoggingService {\n\n\t/**\n\t * Event triggered when new log message was added.\n\t * @param message new log message\n\t */\n\tpublic logMessagesChanged: EventEmitter;\n\n\t/**\n\t * Event triggered when ajax appender could not send log messages to the server.\n\t * @param message error message\n\t */\n\tpublic ajaxAppenderFailed: EventEmitter;\n\n\t// tslint:disable-next-line:completed-docs\n\tprivate memoryAppender: MemoryAppender;\n\tprivate browserConsoleAppender: log4javascript.BrowserConsoleAppender;\n\n\t/**\n\t * Creates a new instance of the service.\n\t */\n\tconstructor() {\n\n\t\t// prevent log4javascript to show alerts on case of errors\n\t\tlog4javascript.logLog.setQuietMode(true);\n\n\t\t// create event emitter\n\t\tthis.logMessagesChanged = new EventEmitter();\n\t\tthis.ajaxAppenderFailed = new EventEmitter();\n\n\t\t// configure appender\n\t\tconst logger = log4javascript.getRootLogger();\n\t\tlogger.setLevel(log4javascript.Level.WARN);\n\n\t\t// browser console appender for debugger\n\t\tthis.browserConsoleAppender = new log4javascript.BrowserConsoleAppender();\n\t\tthis.browserConsoleAppender.setLayout(new log4javascript.PatternLayout(\"%d{HH:mm:ss,SSS} %c %m\"));\n\t\tthis.browserConsoleAppender.setThreshold(log4javascript.Level.ALL);\n\t\tlogger.addAppender(this.browserConsoleAppender);\n\n\t\t// in-memory appender for display on log messages page\n\t\tthis.memoryAppender = new MemoryAppender();\n\t\tthis.memoryAppender.setLayout(new log4javascript.PatternLayout(\"%d{HH:mm:ss,SSS} %c %m\"));\n\t\tthis.memoryAppender.setOnLogMessagesChangedCallback((message) => {\n\t\t\tthis.logMessagesChanged.emit(message);\n\t\t});\n\t\tlogger.addAppender(this.memoryAppender);\n\n\t\tthis.configure();\n\t}\n\n\t/**\n\t * Configures the logging depending on the given configuration.\n\t * @param configuration configuration data.\n\t */\n\tpublic configure(configuration?: LoggingServiceConfiguration): void {\n\n\t\tif (typeof configuration === \"undefined\") {\n\t\t\tconfiguration = {};\n\t\t}\n\n\t\t// set log levels\n\t\tif (typeof configuration.logLevels !== \"undefined\") {\n\t\t\tfor (const level of configuration.logLevels) {\n\t\t\t\tlet logger: log4javascript.Logger;\n\t\t\t\tif (level.loggerName === \"root\") {\n\t\t\t\t\tlogger = log4javascript.getRootLogger();\n\t\t\t\t} else {\n\t\t\t\t\tlogger = log4javascript.getLogger(level.loggerName);\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\tlogger.setLevel(LogLevelConverter.levelToLog4Javascript(LogLevelConverter.levelFromString(level.logLevel)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthrow new Error(`invalid log level ${level.logLevel}`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// configure AjaxAppender\n\t\tif (typeof configuration.ajaxAppender !== \"undefined\") {\n\t\t\tconst ajaxAppender = new AjaxAppender(configuration.ajaxAppender);\n\t\t\tajaxAppender.appenderFailed.subscribe((message: string) => {\n\t\t\t\tthis.ajaxAppenderFailed.emit(message);\n\t\t\t});\n\t\t\tlog4javascript.getRootLogger().addAppender(ajaxAppender);\n\t\t}\n\n\t\t// configure LocalStorageAppender\n\t\tif (typeof configuration.localStorageAppender !== \"undefined\") {\n\t\t\tconst localStorageAppender = new LocalStorageAppender(configuration.localStorageAppender);\n\t\t\tlog4javascript.getRootLogger().addAppender(localStorageAppender);\n\n\t\t\t// ensure that an eventual memoryAppender is behind the localStorageAppender\n\t\t\tconst appenders = new Logger().getInternalLogger().getEffectiveAppenders();\n\t\t\tconst memoryAppender = appenders.find((a) => a.toString() === \"Ionic.Logging.MemoryAppender\") as MemoryAppender;\n\t\t\tif (memoryAppender) {\n\t\t\t\tlog4javascript.getRootLogger().removeAppender(memoryAppender);\n\t\t\t\tlog4javascript.getRootLogger().addAppender(memoryAppender);\n\t\t\t}\n\t\t}\n\n\t\t// configure MemoryAppender\n\t\tif (configuration.memoryAppender) {\n\t\t\tthis.memoryAppender.configure(configuration.memoryAppender);\n\t\t}\n\n\t\t// configure BrowserConsoleAppender\n\t\tif (configuration.browserConsoleAppender) {\n\t\t\tif (configuration.browserConsoleAppender.threshold) {\n\t\t\t\tconst convertedThreshold = LogLevelConverter.levelToLog4Javascript(\n\t\t\t\t\tLogLevelConverter.levelFromString(configuration.browserConsoleAppender.threshold));\n\t\t\t\tthis.browserConsoleAppender.setThreshold(convertedThreshold);\n\t\t\t}\n\t\t}\n\n\t}\n\n\t/**\n\t * Gets the root logger from which all other loggers derive.\n\t * @return root logger\n\t */\n\tpublic getRootLogger(): Logger {\n\t\treturn new Logger();\n\t}\n\n\t/**\n\t * Gets a logger with the specified name, creating it if a logger with that name does not already exist.\n\t * @param loggerName name of the logger\n\t * @return logger\n\t */\n\tpublic getLogger(loggerName: string): Logger {\n\t\treturn new Logger(loggerName);\n\t}\n\n\t/**\n\t * Gets the last log messages.\n\t *\n\t * The log messages are retrieved from the internal [MemoryAppender](../memoryappender.html).\n\t * That means you will get only the most current messages. The number of the messages is limited\n\t * by its maxMessages value.\n\t * @return log messages\n\t */\n\tpublic getLogMessages(): LogMessage[] {\n\t\treturn this.memoryAppender.getLogMessages();\n\t}\n\n\t/**\n\t * Loads the log messages written by the LocalStorageAppender with the given key.\n\t * @param localStorageKey key for the local storage\n\t * @returns log messages\n\t */\n\tpublic getLogMessagesFromLocalStorage(localStorageKey: string): LogMessage[] {\n\t\treturn LocalStorageAppender.loadLogMessages(localStorageKey);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoggingServiceConfiguration.html":{"url":"interfaces/LoggingServiceConfiguration.html","title":"interface - LoggingServiceConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  LoggingServiceConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/logging-service.configuration.ts\n        \n\n            \n                Description\n            \n            \n                Partial configuration definition for LoggingService.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        ajaxAppender\n                                \n                                \n                                            Optional\n                                        browserConsoleAppender\n                                \n                                \n                                            Optional\n                                        localStorageAppender\n                                \n                                \n                                            Optional\n                                        logLevels\n                                \n                                \n                                            Optional\n                                        memoryAppender\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ajaxAppender\n                                    \n                                \n                                \n                                    \n                                        ajaxAppender:         AjaxAppenderConfiguration\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AjaxAppenderConfiguration\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Settings for AjaxAppender.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        browserConsoleAppender\n                                    \n                                \n                                \n                                    \n                                        browserConsoleAppender:         BrowserConsoleAppenderConfiguration\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BrowserConsoleAppenderConfiguration\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Settings for BrowserConsoleAppender.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        localStorageAppender\n                                    \n                                \n                                \n                                    \n                                        localStorageAppender:         LocalStorageAppenderConfiguration\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         LocalStorageAppenderConfiguration\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Settings for LocalStorageAppender.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logLevels\n                                    \n                                \n                                \n                                    \n                                        logLevels:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Log levels for different loggers.\nDefault: root: WARN\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        memoryAppender\n                                    \n                                \n                                \n                                    \n                                        memoryAppender:         MemoryAppenderConfiguration\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MemoryAppenderConfiguration\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Settings for MemoryAppender.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { AjaxAppenderConfiguration } from \"./ajax-appender.configuration\";\nimport { BrowserConsoleAppenderConfiguration } from \"./browser-console-appender.configuration\";\nimport { LocalStorageAppenderConfiguration } from \"./local-storage-appender.configuration\";\nimport { MemoryAppenderConfiguration } from \"./memory-appender.configuration\";\n\n/**\n * Partial configuration definition for LoggingService.\n */\nexport interface LoggingServiceConfiguration {\n\n\t/**\n\t * Log levels for different loggers.\n\t * Default: root: WARN\n\t */\n\tlogLevels?: Array;\n\n\t/**\n\t * Settings for AjaxAppender.\n\t */\n\tajaxAppender?: AjaxAppenderConfiguration;\n\n\t/**\n\t * Settings for LocalStorageAppender.\n\t */\n\tlocalStorageAppender?: LocalStorageAppenderConfiguration;\n\n\t/**\n\t * Settings for MemoryAppender.\n\t */\n\tmemoryAppender?: MemoryAppenderConfiguration;\n\n\t/**\n\t * Settings for BrowserConsoleAppender.\n\t */\n\tbrowserConsoleAppender?: BrowserConsoleAppenderConfiguration;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LoggingServiceModule.html":{"url":"modules/LoggingServiceModule.html","title":"module - LoggingServiceModule","body":"\n                   \n\n\n\n\n    Modules\n    LoggingServiceModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/logging-service.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\n\n@NgModule({\n\timports: [\n\t],\n\tdeclarations: [\n\t],\n\texports: [\n\t]\n})\nexport class LoggingServiceModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MemoryAppender.html":{"url":"classes/MemoryAppender.html","title":"class - MemoryAppender","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MemoryAppender\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/memory-appender.model.ts\n        \n\n            \n                Description\n            \n            \n                An appender which stores the log messages in the browser's memory.\nThe MemoryAppender is enabled by default.\nIf you do not specify anything else, it is using this configuration:\n```JSON\n\n{\n\"memoryAppender\": [\n{\n\"maxMessages\": 250,\n\"threshold\": \"ALL\"\n}\n}\n```\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                append\n                            \n                            \n                                    Public\n                                configure\n                            \n                            \n                                    Public\n                                getLogMessages\n                            \n                            \n                                    Public\n                                getMaxMessages\n                            \n                            \n                                    Public\n                                setMaxMessages\n                            \n                            \n                                    Public\n                                setOnLogMessagesChangedCallback\n                            \n                            \n                                    Public\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configuration?: MemoryAppenderConfiguration)\n                    \n                \n                        \n                            \n                                Defined in src/lib/memory-appender.model.ts:34\n                            \n                        \n\n                \n                    \n                            Creates a new instance of the appender.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configuration\n                                                  \n                                                        \n                                                                        MemoryAppenderConfiguration\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                configuration for the appender.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            append\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    append(loggingEvent: log4javascript.LoggingEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/memory-appender.model.ts:78\n                \n            \n\n\n            \n                \n                    Appender-specific method to append a log message.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    loggingEvent\n                                    \n                                            log4javascript.LoggingEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        event to be appended.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            configure\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(configuration: MemoryAppenderConfiguration)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/memory-appender.model.ts:61\n                \n            \n\n\n            \n                \n                    Configures the logging depending on the given configuration.\nOnly the defined properties get overwritten.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    configuration\n                                    \n                                                MemoryAppenderConfiguration\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        configuration data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLogMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLogMessages()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/memory-appender.model.ts:134\n                \n            \n\n\n            \n                \n                    Gets all messages stored in memory.\n\n\n                    \n                    \n                    \n                        Returns :         LogMessage[]\n\n                    \n                    \n                        stored messages\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMaxMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMaxMessages()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/memory-appender.model.ts:111\n                \n            \n\n\n            \n                \n                    Get the maximum number of messages which will be stored in memory.\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setMaxMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setMaxMessages(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/memory-appender.model.ts:121\n                \n            \n\n\n            \n                \n                    Set the maximum number of messages which will be stored in memory.\nIf the appender stores currently more messages than the new value allows, the oldest messages get removed.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        new maximum number\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setOnLogMessagesChangedCallback\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setOnLogMessagesChangedCallback(callback: (message: LogMessage) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/memory-appender.model.ts:143\n                \n            \n\n\n            \n                \n                    Registers a callback which will be called every time a new message is appended.\nThis could be useful if you want to show new messages in realtime.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        callback to be called\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            toString\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toString()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/memory-appender.model.ts:104\n                \n            \n\n\n            \n                \n                    Gets the appender's name.\nMainly for unit testing purposes.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        appender's name\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as log4javascript from \"log4javascript\";\n\nimport { LogLevelConverter } from \"./log-level.converter\";\nimport { LogLevel } from \"./log-level.model\";\nimport { LogMessage } from \"./log-message.model\";\nimport { MemoryAppenderConfiguration } from \"./memory-appender.configuration\";\n\n/**\n * An appender which stores the log messages in the browser's memory.\n *\n * The MemoryAppender is enabled by default.\n * If you do not specify anything else, it is using this configuration:\n *\n * ```JSON\n * {\n *   \"memoryAppender\": [\n *     {\n *       \"maxMessages\": 250,\n *       \"threshold\": \"ALL\"\n *     }\n * }\n * ```\n */\nexport class MemoryAppender extends log4javascript.Appender {\n\n\tprivate static maxMessagesDefault = 250;\n\tprivate static thresholdDefault = \"ALL\";\n\n\tprivate maxMessages: number;\n\n\t// tslint:disable-next-line:completed-docs\n\tprivate logMessages: LogMessage[];\n\t// tslint:disable-next-line:completed-docs\n\tprivate onLogMessagesChangedCallback: (message: LogMessage) => void;\n\n\t/**\n\t * Creates a new instance of the appender.\n\t * @param configuration configuration for the appender.\n\t */\n\tconstructor(configuration?: MemoryAppenderConfiguration) {\n\t\tsuper();\n\n\t\tthis.logMessages = [];\n\n\t\t// process configuration\n\t\tconfiguration = configuration || {};\n\t\tthis.configure({\n\t\t\tmaxMessages: configuration.maxMessages || MemoryAppender.maxMessagesDefault,\n\t\t\tthreshold: configuration.threshold || MemoryAppender.thresholdDefault,\n\t\t});\n\n\t\tthis.maxMessages = MemoryAppender.maxMessagesDefault;\n\t}\n\n\t/**\n\t * Configures the logging depending on the given configuration.\n\t * Only the defined properties get overwritten.\n\t *\n\t * @param configuration configuration data.\n\t */\n\tpublic configure(configuration: MemoryAppenderConfiguration): void {\n\t\tif (configuration) {\n\t\t\tif (configuration.maxMessages) {\n\t\t\t\tthis.setMaxMessages(configuration.maxMessages);\n\t\t\t}\n\t\t\tif (configuration.threshold) {\n\t\t\t\tconst convertedThreshold = LogLevelConverter.levelToLog4Javascript(\n\t\t\t\t\tLogLevelConverter.levelFromString(configuration.threshold));\n\t\t\t\tthis.setThreshold(convertedThreshold);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Appender-specific method to append a log message.\n\t * @param loggingEvent event to be appended.\n\t */\n\tpublic append(loggingEvent: log4javascript.LoggingEvent): void {\n\t\t// if logMessages is already full, remove oldest element\n\t\twhile (this.logMessages.length >= this.maxMessages) {\n\t\t\tthis.logMessages.shift();\n\t\t}\n\t\t// add event to logMessages\n\t\tconst message: LogMessage = {\n\t\t\tlevel: LogLevel[LogLevelConverter.levelFromLog4Javascript(loggingEvent.level)],\n\t\t\tlogger: typeof loggingEvent.logger === \"object\" ? loggingEvent.logger.name : undefined,\n\t\t\tmessage: loggingEvent.messages.slice(1),\n\t\t\tmethodName: loggingEvent.messages[0],\n\t\t\ttimeStamp: loggingEvent.timeStamp,\n\t\t};\n\t\tthis.logMessages.push(message);\n\n\t\t// inform about new message\n\t\tif (typeof this.onLogMessagesChangedCallback === \"function\") {\n\t\t\tthis.onLogMessagesChangedCallback(message);\n\t\t}\n\t}\n\n\t/**\n\t * Gets the appender's name.\n\t * Mainly for unit testing purposes.\n\t * @return appender's name\n\t */\n\tpublic toString(): string {\n\t\treturn \"Ionic.Logging.MemoryAppender\";\n\t}\n\n\t/**\n\t * Get the maximum number of messages which will be stored in memory.\n\t */\n\tpublic getMaxMessages(): number {\n\t\treturn this.maxMessages;\n\t}\n\n\t/**\n\t * Set the maximum number of messages which will be stored in memory.\n\t *\n\t * If the appender stores currently more messages than the new value allows, the oldest messages get removed.\n\t * @param value new maximum number\n\t */\n\tpublic setMaxMessages(value: number): void {\n\t\tthis.maxMessages = value;\n\n\t\t// if there are too much logMessages for the new value, remove oldest messages\n\t\tif (this.logMessages.length > this.maxMessages) {\n\t\t\tthis.logMessages.splice(0, this.logMessages.length - this.maxMessages);\n\t\t}\n\t}\n\n\t/**\n\t * Gets all messages stored in memory.\n\t * @return stored messages\n\t */\n\tpublic getLogMessages(): LogMessage[] {\n\t\treturn this.logMessages;\n\t}\n\n\t/**\n\t * Registers a callback which will be called every time a new message is appended.\n\t * This could be useful if you want to show new messages in realtime.\n\t * @param callback callback to be called\n\t */\n\tpublic setOnLogMessagesChangedCallback(callback: (message: LogMessage) => void): void {\n\t\tthis.onLogMessagesChangedCallback = callback;\n\t}\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MemoryAppenderConfiguration.html":{"url":"interfaces/MemoryAppenderConfiguration.html","title":"interface - MemoryAppenderConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MemoryAppenderConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/memory-appender.configuration.ts\n        \n\n            \n                Description\n            \n            \n                Configuration for MemoryAppender.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        maxMessages\n                                \n                                \n                                            Optional\n                                        threshold\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        maxMessages\n                                    \n                                \n                                \n                                    \n                                        maxMessages:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Maximum number of log messages stored by the appender.\nDefault: 250.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        threshold\n                                    \n                                \n                                \n                                    \n                                        threshold:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Threshold.\nValid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN.\nDefault: ALL.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface MemoryAppenderConfiguration {\n\t/**\n\t * Maximum number of log messages stored by the appender.\n\t *\n\t * Default: 250.\n\t */\n\tmaxMessages?: number;\n\n\t/**\n\t * Threshold.\n\t *\n\t * Valid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN.\n\t *\n\t * Default: ALL.\n\t */\n\tthreshold?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/lib/ajax-appender.configuration.ts\n            \n            interface\n            AjaxAppenderConfiguration\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/lib/ajax-appender.model.ts\n            \n            class\n            AjaxAppender\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/lib/browser-console-appender.configuration.ts\n            \n            interface\n            BrowserConsoleAppenderConfiguration\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/lib/local-storage-appender.configuration.ts\n            \n            interface\n            LocalStorageAppenderConfiguration\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/lib/local-storage-appender.model.ts\n            \n            class\n            LocalStorageAppender\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/lib/log-level.converter.ts\n            \n            class\n            LogLevelConverter\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/lib/log-message.model.ts\n            \n            interface\n            LogMessage\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/lib/logger.model.ts\n            \n            class\n            Logger\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                src/lib/logging-service.configuration.ts\n            \n            interface\n            LoggingServiceConfiguration\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/lib/logging.service.ts\n            \n            injectable\n            LoggingService\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                src/lib/memory-appender.configuration.ts\n            \n            interface\n            MemoryAppenderConfiguration\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/lib/memory-appender.model.ts\n            \n            class\n            MemoryAppender\n            \n                100 %\n                (9/9)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            log4javascript : ^1.4.15\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : ^9.0.0\n        \n            @angular/core : ^9.0.0\n    \n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            LogLevel   (src/.../log-level.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/log-level.model.ts\n    \n        \n            \n                \n                    \n                        \n                        LogLevel\n                    \n                \n                    \n                        \n                            Logging levels.\n\n                        \n                    \n                        \n                            \n                                 ALL\n                            \n                        \n                        \n                            \n                                 TRACE\n                            \n                        \n                        \n                            \n                                 DEBUG\n                            \n                        \n                        \n                            \n                                 INFO\n                            \n                        \n                        \n                            \n                                 WARN\n                            \n                        \n                        \n                            \n                                 ERROR\n                            \n                        \n                        \n                            \n                                 FATAL\n                            \n                        \n                        \n                            \n                                 OFF\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nionic-logging-service\nThe dependencies used by the latest version are the same as needed for Ionic 5.0.0. For older versions use:\n\n\n\nionic-logging-service\nIonic\nAngular\n\n\n\n\n9.0.0\n>= 5.0.0\n^9.0.0\n\n\n8.0.0\n>= 4.7.0\n^8.0.0\n\n\n7.0.0\n>= 4.0.0-rc\n^7.0.0\n\n\n6.0.0\n>= 4.0.0-beta\n^6.0.0\n\n\n5.1.0\n>= 3.9.0\n^5.0.0\n\n\n3.1.0\n>= 3.0.0\n^4.0.0\n\n\n2.0.0\n>= 2.2.0\n^2.4.8\n\n\n1.2.1\n>= 2.0.0\n^2.2.1\n\n\n\nThis service encapsulates log4javascript's functionalities for apps built with Ionic framework.\nFor a sample, just have a look at ionic-logging-viewer.\nUsage\nFirst, you need to import the LoggingServiceModule in your AppModule. The next step is typically the configuration (see below). And then, finally, you can use the LoggingService in your code, e.g.:\nimport { Logger, LoggingService } from \"ionic-logging-service\";\n\nexport class MyComponent {\n\n  private logger: Logger;\n\n  constructor(\n    loggingService: LoggingService) {\n\n    this.logger = loggingService.getLogger(\"MyApp.MyComponent\");\n    const methodName = \"ctor\";\n    this.logger.entry(methodName);\n\n    ...\n\n    this.logger.exit(methodName);\n  }\n\n  public myMethod(index: number, message: string): number[] {\n    const methodName = \"myMethod\";\n    this.logger.entry(methodName, index, number);\n\n    try {\n      ...\n    } catch (e) {\n      this.logger.error(methodName, \"some error\", e);\n    }\n\n    this.logger.exit(methodName);\n    return result;\n  }\n}Depending how the code is called, this could produce the following output in the browser's console:\nI  18:49:43.794  MyApp.MyComponent  ctor  entry\nI  18:49:43.797  MyApp.MyComponent  ctor  exit\nI  18:49:43.801  MyApp.MyComponent  myMethod  entry  42  Hello\nE  18:49:43.814  MyApp.MyComponent  myMethod  some error\nI  18:49:43.801  MyApp.MyComponent  myMethod  exit  [2, 5, 99]Logger\nA logger is the component responsible for logging. Typically, you have one logger per every class. The logger name describe the place where in your app the class is placed. The single parts are separated by dots ('.'). This is quite the same as with namespaces in dotnet or packages in Java.\nThis builds some kind of hierarchy. E.g., if you have a logger named A.B.C.D, you get automatically also loggers for A.B.C, A.B and A. Additionally, there is the so-called root logger, which is the parent of all other loggers.\nThe hierarchy is important, since the loggers inherit the log level from there parent - if there is no other level defined. That means, you can define just one log level for the complete app (by setting the root logger's level), and you can par example define, you do not want to see logs written for logger A.B.C (this includes also A.B.C.D).\nLevel\nEvery log message has a level. This is the severity of the message. Available levels are TRACE, DEBUG, INFO, WARN, ERROR and FATAL - these correspond to the logging methods trace, debug, info, warn, error and fatal of Logger. Levels are ordered as follows: TRACE DEBUG INFO WARN ERROR FATAL. This means the FATAL is the most severe and TRACE the least. Also included are levels called ALL and OFF intended to enable or disable all logging respectively.\nSetting a level to a logger disables log messages of severity lower than that level. For instance, if a level of INFO is set on a logger then only log messages of severity INFO or greater will be logged, meaning DEBUG and TRACE messages will not be logged.\nAppender\nAppenders make the logs visible, e.g. by writing them to the browser's console. This is quite useful during development, either in console or using ionic serve --consolelogs. But later, you will need other logs:\n\nAjaxAppender: sends the log messages to a backend server\nMemoryAppender: keeps the log messages in memory\nLocalStorageAppender: stores the log messages in local storage\n\nIf you want to see a complete example, have a look at ionic-feedback-sample.\nConfiguration\nBy default, the following configuration is used:\n\nLogger:\n\nroot: Level.WARN\n\n\nAppender:\n\nBrowserConsoleAppender\nMemoryAppender\n\n\n\nTo change it, just call configure(). This method takes an object of type LoggingConfiguration.\nThe recommended way is to place the configuration in environment.ts:\nexport const environment = {\n  logging: {\n    ...\n  }\n};Call configure() in your app.module.ts:\nexport function configureLogging(loggingService: LoggingService): () => void {\n  return () => loggingService.configure(environment.logging);\n}\n\n@NgModule({\n  ...\n  imports: [\n    ...\n    LoggingServiceModule\n  ],\n  providers: [\n    {\n      deps: [LoggingService],\n      multi: true,\n      provide: APP_INITIALIZER,\n      useFactory: configureLogging\n    }\n  ]\n})\nexport class AppModule { }logLevels\nlogLevels gets an array of log level definitions for different loggers, e.g.\n{\n  \"logLevels\": [\n    {\n      \"loggerName\": \"root\",\n      \"logLevel\": \"DEBUG\"\n    },\n    {\n      \"loggerName\": \"MyApp.MyNamespace.MyLogger\",\n      \"logLevel\": \"INFO\"\n    }\n  ]\n};That means, instead of the default log level WARN, you want to log all messages with level DEBUG and higher. Only for MyApp.MyNamespace.MyLogger, you want to restrict the level to INFO.\najaxAppender\nWith ajaxAppender, you add an additional appender of type AjaxAppender, which sends the log messages to a backend server.\nbrowserConsoleAppender\nWith browserConsoleAppender, it is possible to configure the BrowserConsoleAppender, which writes the log to the browser's console.\nlocalStorageAppender\nWith localStorageAppender, you add an additional appender of type AjaxAppender, which stores log messages in the local storage.\nmemoryAppender\nWith memoryAppender, it is possible to configure the MemoryAppender, which keeps log messages in the memory.\nAPI\nsee API documentation.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        LoggingServiceModule\n                    \n                    \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    6 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
