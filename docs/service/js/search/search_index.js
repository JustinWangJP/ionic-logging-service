var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/classes/AjaxAppender.html",[0,0.332,1,1.011]],["body/classes/AjaxAppender.html",[0,0.204,1,1.185,2,0.715,3,0.308,4,0.25,5,0.204,6,3.224,7,0.948,8,0.765,9,1.791,10,2.051,11,0.888,12,1.359,13,2.374,14,2.051,15,2.555,16,2.051,17,1.218,18,1.471,19,0.055,20,3.244,21,2.555,22,3.066,23,2.555,24,3.066,25,2.555,26,1.034,27,0.162,28,0.878,29,2.008,30,3.131,31,0.968,32,2.374,33,1.273,34,3.528,35,3.528,36,3.528,37,3.528,38,2.555,39,2.555,40,2.555,41,2.374,42,0.715,43,1.719,44,2.101,45,1.835,46,1.647,47,1.273,48,1.763,49,1.109,50,1.83,51,1.538,52,0.541,53,0.863,54,2.832,55,1.647,56,2.032,57,2.051,58,2.374,59,1.335,60,0.636,61,1.719,62,2.107,63,1.647,64,1.719,65,1.109,66,1.719,67,1.719,68,2.143,69,1.984,70,1.471,71,1.647,72,1.471,73,1.109,74,1.273,75,1.273,76,1.719,77,2.051,78,1.273,79,1.647,80,1.407,81,2.051,82,3.499,83,2.832,84,1.647,85,2.555,86,1.273,87,2.374,88,2.032,89,2.374,90,2.374,91,3.131,92,1.647,93,2.933,94,3.819,95,3.819,96,1.647,97,3.528,98,2.374,99,2.832,100,3.528,101,2.832,102,3.528,103,2.555,104,1.647,105,4.041,106,2.555,107,2.555,108,2.555,109,1.647,110,2.555,111,1.647,112,2.555,113,2.051,114,1.647,115,1.273,116,0.568,117,1.014,118,0.948,119,0.968,120,1.108,121,0.948,122,0.544,123,0.821,124,0.204,125,1.108,126,1.108,127,1.657,128,1.803,129,1.647,130,1.108,131,1.647,132,2.051,133,1.108,134,0.299,135,1.754,136,1.108,137,1.803,138,1.322,139,2.051,140,3.819,141,2.555,142,2.555,143,1.647,144,2.555,145,1.647,146,1.647,147,1.647,148,1.647,149,1.647,150,1.647,151,1.647,152,1.647,153,1.647,154,1.647,155,1.647,156,1.108,157,1.322,158,0.948,159,2.555,160,1.647,161,1.719,162,1.647,163,2.555,164,1.647,165,1.322,166,1.647,167,0.821,168,1.647,169,0.715,170,0.948,171,0.948,172,1.108,173,1.108,174,1.647,175,1.53,176,1.647,177,1.647,178,1.647,179,1.647,180,1.647,181,1.647,182,1.647,183,1.647,184,0.016,185,0.025,186,0.016]],["title/interfaces/AjaxAppenderConfiguration.html",[44,1.331,187,0.405]],["body/interfaces/AjaxAppenderConfiguration.html",[1,1.223,3,0.447,4,0.49,5,0.401,6,2.174,8,0.586,11,0.868,12,1.375,17,0.804,19,0.054,20,4.058,22,3.841,24,3.841,26,1.67,27,0.318,28,1.026,44,2.055,52,0.594,53,1.08,58,2.775,59,1.362,60,1.026,80,1.495,81,3.841,82,3.31,83,3.31,99,3.31,101,3.31,113,3.31,116,0.917,124,0.401,130,2.775,132,3.841,134,0.868,184,0.032,185,0.04,186,0.032,187,0.49,188,1.223,189,1.61,190,1.453,191,2.375,192,2.055,193,1.185,194,1.362,195,1.362,196,1.789,197,4.124,198,4.124,199,2.775]],["title/interfaces/BrowserConsoleAppenderConfiguration.html",[187,0.405,200,1.538]],["body/interfaces/BrowserConsoleAppenderConfiguration.html",[3,0.482,4,0.58,5,0.475,8,0.694,17,0.951,19,0.054,26,1.74,27,0.376,28,1.138,52,0.475,53,0.978,60,1.138,116,0.889,124,0.475,134,0.83,184,0.037,185,0.045,186,0.037,187,0.58,188,1.447,189,1.905,190,1.315,191,2.635,192,2.281,193,1.459,194,1.512,195,1.512,200,2.635,201,3.069,202,1.905,203,2.201]],["title/classes/LocalStorageAppender.html",[0,0.332,204,1.011]],["body/classes/LocalStorageAppender.html",[0,0.18,2,0.629,3,0.284,4,0.22,5,0.18,7,0.834,8,0.729,9,1.668,11,0.816,12,1.487,16,1.855,17,1.186,18,1.893,19,0.055,26,0.952,27,0.143,28,0.575,29,1.939,31,0.875,32,2.212,33,1.639,41,2.212,42,0.629,43,1.555,45,1.761,47,1.151,48,1.704,49,1.002,50,1.661,51,1.456,52,0.475,53,0.818,56,1.659,59,1.086,61,1.555,62,1.939,64,1.555,65,1.002,66,1.555,67,1.555,68,1.912,69,1.865,70,1.33,72,1.33,73,1.002,74,1.151,75,1.908,76,1.555,77,1.855,78,1.151,80,1.316,86,1.639,87,2.575,88,2.204,89,2.575,90,2.575,93,2.212,115,1.639,116,0.816,117,1.032,119,0.875,121,0.834,122,0.479,123,0.722,124,0.18,125,0.975,126,0.975,127,1.558,128,2.401,133,0.975,134,0.263,135,1.661,136,0.975,137,1.659,138,1.163,139,1.855,156,0.975,157,1.163,158,0.834,161,1.555,165,1.163,167,0.722,169,1.25,170,0.834,171,0.834,172,0.975,173,0.975,175,1.579,184,0.014,185,0.023,186,0.014,192,1.151,196,1.002,204,0.875,205,3.081,206,2.271,207,2.212,208,1.555,209,2.492,210,2.31,211,2.881,212,3.081,213,2.31,214,3.027,215,2.31,216,1.639,217,2.31,218,3.288,219,3.288,220,2.212,221,2.639,222,2.31,223,1.555,224,1.855,225,2.001,226,1.163,227,1.163,228,1.449,229,1.855,230,1.449,231,1.449,232,1.855,233,1.449,234,2.713,235,1.865,236,1.449,237,2.204,238,2.31,239,1.449,240,2.31,241,3.288,242,2.31,243,1.449,244,2.212,245,1.855,246,1.449,247,1.855,248,1.855,249,2.702,250,1.855,251,2.639,252,1.555,253,1.449,254,0.629,255,0.834,256,0.975,257,1.163,258,0.834,259,2.212,260,1.893,261,1.555,262,1.555,263,3.537,264,2.31,265,2.881,266,2.31,267,3.827,268,2.31,269,2.881,270,1.449,271,1.449,272,2.313,273,1.449,274,1.855,275,1.449,276,1.449,277,1.449,278,1.449,279,1.449,280,1.449,281,1.449,282,1.449,283,1.449,284,1.163,285,0.975,286,1.163,287,1.163,288,2.313,289,3.073,290,1.855,291,0.975,292,0.549,293,1.163,294,0.479,295,1.163,296,1.33,297,1.163,298,1.163,299,0.722,300,1.163,301,0.975,302,1.163,303,1.163,304,2.31,305,2.31,306,2.31,307,2.31,308,1.449,309,1.163,310,1.449,311,1.449]],["title/interfaces/LocalStorageAppenderConfiguration.html",[187,0.405,225,1.331]],["body/interfaces/LocalStorageAppenderConfiguration.html",[3,0.46,4,0.522,5,0.427,8,0.625,9,1.625,11,0.779,12,1.407,17,0.856,19,0.054,26,1.697,27,0.339,28,1.068,52,0.581,53,1.046,60,1.068,80,1.448,86,2.139,116,0.932,124,0.427,134,0.888,184,0.034,185,0.042,186,0.034,187,0.522,188,1.304,189,1.716,190,1.407,191,2.472,192,2.139,193,1.234,194,1.418,195,1.418,204,1.304,205,2.317,206,2.029,209,2.139,212,2.888,214,3.295,216,2.44,225,2.139,232,3.446,234,2.472,237,2.472,258,2.472]],["title/classes/LogLevelConverter.html",[0,0.332,122,0.882]],["body/classes/LogLevelConverter.html",[0,0.495,2,1.08,3,0.341,4,0.378,5,0.309,8,0.723,11,0.723,19,0.054,27,0.245,29,1.509,31,1.312,45,1.509,48,1.509,50,1.729,51,1.317,52,0.648,53,0.851,60,0.619,68,1.729,78,2.542,116,0.873,117,0.996,119,1.312,122,1.145,124,0.309,128,2.87,134,0.452,135,1.729,137,2.295,175,2.059,184,0.024,185,0.034,186,0.024,190,1.145,193,0.715,194,0.822,195,0.822,254,2.264,255,1.433,292,1.997,312,2.482,313,1.998,314,3.465,315,3.465,316,1.727,317,2.332,318,3.465,319,3.465,320,3.465,321,3.465,322,4.985,323,2.489,324,4.691,325,3.432,326,3.46,327,3.465,328,2.489,329,4.31,330,3.465,331,2.489,332,3.986,333,4.342,334,3.465,335,3.986,336,3.465,337,3.986,338,3.465,339,3.986,340,3.465,341,3.986,342,3.465,343,3.986,344,3.465,345,3.986,346,3.465,347,3.986,348,3.465,349,3.986,350,3.2]],["title/interfaces/LogMessage.html",[187,0.405,235,1.159]],["body/interfaces/LogMessage.html",[3,0.348,4,0.537,5,0.439,8,0.642,11,0.921,19,0.054,27,0.348,28,1.086,51,1.442,52,0.63,59,1.763,65,1.894,98,2.937,116,0.984,124,0.439,184,0.035,185,0.043,186,0.035,187,0.537,188,1.339,235,1.894,292,1.958,294,1.708,299,2.464,301,3.326,312,2.037,351,2.839,352,3.326,353,4.734]],["title/classes/Logger.html",[0,0.332,294,0.882]],["body/classes/Logger.html",[0,0.176,2,0.614,3,0.42,4,0.215,5,0.176,8,0.794,11,0.794,12,0.651,18,2.759,19,0.055,27,0.139,29,1.99,31,0.858,42,0.614,45,1.75,47,1.129,48,1.228,49,0.983,50,2.252,51,1.715,52,0.555,53,1.095,59,1.503,60,0.883,65,2.195,68,2.057,69,2.116,75,1.129,80,0.406,88,1.305,116,0.942,117,0.815,119,0.858,122,0.467,123,0.705,124,0.176,127,0.614,134,0.588,135,2.205,167,1.616,169,2.079,175,1.506,184,0.014,185,0.022,186,0.014,193,1.188,194,1.071,195,1.071,196,0.983,199,3.224,254,1.643,255,0.814,292,1.947,294,1.527,296,0.814,299,2.522,325,1.525,354,1.135,355,1.819,356,2.849,357,2.849,358,2.266,359,3.242,360,3.242,361,2.266,362,2.266,363,1.414,364,0.951,365,2.266,366,5.297,367,1.414,368,3.973,369,4.791,370,4.791,371,2.266,372,1.414,373,2.266,374,1.414,375,2.266,376,1.414,377,2.266,378,1.414,379,2.266,380,1.414,381,2.266,382,2.266,383,3.548,384,1.414,385,2.266,386,2.276,387,1.414,388,2.266,389,1.414,390,2.266,391,1.414,392,2.266,393,1.414,394,2.266,395,1.414,396,2.603,397,1.135,398,1.414,399,1.414,400,1.414,401,1.414,402,4.791,403,4.133,404,1.414,405,2.835,406,1.414,407,2.835,408,2.835,409,1.414,410,1.414,411,1.414,412,1.414,413,1.414,414,1.414,415,2.266,416,1.414,417,1.414,418,1.414,419,0.951,420,1.414,421,0.951,422,0.951,423,1.414]],["title/injectables/LoggingService.html",[424,1.538,425,1.331]],["body/injectables/LoggingService.html",[0,0.193,1,1.142,3,0.153,4,0.236,5,0.193,8,0.716,9,1.563,11,0.927,12,1.468,13,1.644,14,1.961,17,1.063,19,0.055,26,1.13,27,0.153,28,0.608,29,1.964,31,0.925,33,2.13,42,1.309,45,1.704,47,1.217,48,1.813,49,1.06,50,1.613,51,1.515,52,0.49,53,0.794,54,3.313,56,2.14,57,2.745,58,1.644,59,1.412,60,0.608,68,1.855,69,1.712,70,1.407,72,1.407,73,1.613,74,1.217,75,1.966,78,1.217,80,0.702,86,1.217,115,1.966,116,0.816,117,1.263,118,0.895,119,1.142,120,2.03,122,0.513,123,0.775,124,0.193,127,1.06,134,0.443,135,1.613,137,0.895,158,0.895,167,1.704,169,1.791,170,0.895,171,0.895,175,1.563,184,0.015,185,0.024,186,0.015,190,0.702,193,0.702,196,0.674,202,0.775,203,1.969,204,1.704,206,1.613,209,1.852,212,2.876,214,2.301,216,1.217,220,2.301,223,2.301,229,1.961,235,1.613,244,1.644,249,1.644,252,2.301,256,1.046,259,1.046,260,0.895,261,1.046,262,1.046,285,1.644,292,1.295,294,1.694,296,1.969,316,0.775,325,1.644,333,1.248,350,1.248,352,2.301,364,1.046,386,1.248,397,1.961,419,1.046,421,1.046,422,1.046,424,1.407,425,1.217,426,1.554,427,1.248,428,2.745,429,2.443,430,1.961,431,2.745,432,2.876,433,1.766,434,1.961,435,2.443,436,3.017,437,3.017,438,2.443,439,2.443,440,3.419,441,2.443,442,1.554,443,1.969,444,1.554,445,2.443,446,1.554,447,2.443,448,2.443,449,2.443,450,1.961,451,1.554,452,2.443,453,2.443,454,1.961,455,2.443,456,2.443,457,2.443,458,1.554,459,2.443,460,1.554,461,1.644,462,2.443,463,1.554,464,2.443,465,1.554,466,1.554,467,1.554,468,2.443,469,1.961,470,2.443,471,2.443,472,1.969,473,2.443,474,1.961,475,2.443,476,3.017,477,1.554,478,1.554,479,1.554,480,1.554,481,2.443,482,1.554,483,1.248,484,1.554,485,1.554,486,1.554,487,1.554,488,1.554,489,1.554,490,1.554,491,1.554,492,1.248,493,1.554,494,1.554,495,1.554,496,2.443,497,2.443,498,2.443,499,1.554,500,1.554,501,1.554,502,1.554,503,1.554,504,1.554,505,1.554,506,3.017,507,1.554,508,2.443,509,1.554,510,1.554,511,1.554,512,1.554,513,1.554,514,1.554,515,1.554,516,1.554,517,1.554,518,1.554,519,1.554,520,1.554,521,1.554,522,1.554,523,1.554,524,1.248,525,1.554,526,1.554,527,1.554,528,1.248,529,1.554,530,1.554,531,1.554,532,1.554,533,1.554,534,1.554,535,1.554,536,1.554,537,1.554,538,1.554,539,1.554,540,1.554,541,1.554,542,1.554]],["title/interfaces/LoggingServiceConfiguration.html",[187,0.405,443,1.538]],["body/interfaces/LoggingServiceConfiguration.html",[1,1.912,3,0.317,4,0.489,5,0.4,8,0.584,11,0.747,17,1.024,19,0.055,27,0.317,28,1.024,44,2.382,52,0.613,53,1.13,117,1.373,120,2.167,121,2.752,124,0.4,134,0.747,184,0.031,185,0.04,186,0.031,187,0.489,188,1.219,190,1.183,200,2.752,202,1.605,203,2.909,204,1.912,206,1.397,209,1.605,225,2.382,316,2.051,317,2.769,425,2.051,431,4.173,432,2.769,433,1.912,443,2.37,461,2.769,472,1.854,492,2.585,543,2.167,544,2.585,545,4.115,546,4.115,547,3.837,548,3.641,549,2.382]],["title/modules/LoggingServiceModule.html",[550,2.144,551,1.538]],["body/modules/LoggingServiceModule.html",[0,0.505,3,0.401,4,0.618,5,0.505,19,0.054,117,1.17,118,2.344,124,0.505,184,0.04,185,0.046,186,0.04,543,2.739,551,2.735,552,2.739,553,4.071,554,3.813,555,3.268,556,4.071,557,4.071]],["title/classes/MemoryAppender.html",[0,0.332,433,1.011]],["body/classes/MemoryAppender.html",[0,0.215,2,0.75,3,0.17,4,0.262,5,0.215,7,0.996,8,0.748,9,1.755,11,0.779,12,1.461,17,1.24,18,1.528,19,0.055,26,1.066,27,0.17,28,0.66,29,1.969,31,1.005,32,2.436,33,1.322,41,2.436,42,0.75,43,1.785,45,1.785,47,1.322,48,1.811,49,1.151,50,1.694,51,1.5,52,0.485,53,0.834,56,1.859,59,1.531,61,1.785,62,2.172,64,1.785,65,1.151,66,1.785,67,2.436,68,1.921,69,2.101,70,1.528,72,1.528,73,1.151,74,1.322,75,1.322,76,1.785,78,1.322,80,1.375,87,1.785,88,1.528,89,1.785,90,1.785,93,2.436,98,1.785,115,1.804,116,0.481,117,1.122,119,1.005,121,0.996,122,0.571,123,0.862,124,0.215,125,1.163,126,1.163,127,1.694,128,1.528,133,1.163,135,1.694,136,1.163,156,1.163,158,0.996,161,1.785,167,1.322,169,1.151,170,0.996,171,0.996,172,1.163,173,1.163,175,1.479,184,0.017,185,0.026,186,0.017,190,0.762,196,1.151,207,2.436,208,1.785,216,1.804,220,2.436,221,2.906,223,2.436,224,2.13,226,1.388,227,1.388,234,2.669,235,1.921,237,2.373,244,2.436,245,2.13,247,2.13,248,2.13,249,2.773,250,2.13,251,2.906,252,1.785,254,0.75,255,0.996,256,1.163,257,1.388,258,1.859,259,1.785,260,1.528,261,1.785,262,1.785,263,2.906,272,2.13,274,2.13,284,1.388,285,1.163,286,1.388,287,1.388,288,2.591,289,3.309,290,1.388,291,1.163,292,0.655,293,1.388,294,0.571,295,1.388,296,0.996,297,1.388,298,1.388,299,0.862,300,1.388,301,1.163,302,1.388,303,1.388,309,1.388,364,1.163,433,1.561,472,2.715,483,2.13,528,1.388,549,2.139,558,3.118,559,2.653,560,2.653,561,2.653,562,2.13,563,2.653,564,1.729,565,1.729,566,1.729,567,1.729,568,1.729,569,2.653,570,1.729,571,2.653,572,4.291,573,2.906,574,2.13,575,2.13,576,2.653,577,2.13,578,1.729,579,1.729,580,2.653,581,1.729,582,1.388,583,1.729,584,2.653,585,1.729,586,2.653]],["title/interfaces/MemoryAppenderConfiguration.html",[187,0.405,549,1.331]],["body/interfaces/MemoryAppenderConfiguration.html",[3,0.47,4,0.549,5,0.449,8,0.656,9,1.675,11,0.803,12,1.272,17,0.9,19,0.054,26,1.718,27,0.356,28,1.101,52,0.549,53,1.064,60,1.101,80,1.469,116,0.867,124,0.449,134,0.803,184,0.035,185,0.043,186,0.035,187,0.549,188,1.369,189,1.802,190,1.432,191,2.548,192,2.205,193,1.272,194,1.462,195,1.462,216,2.483,234,2.548,237,2.548,258,2.548,433,1.369,549,2.205,558,2.433]],["title/coverage.html",[587,2.919]],["body/coverage.html",[0,0.632,1,1.354,5,0.444,6,2.957,7,2.74,19,0.053,44,1.782,48,1.354,52,0.444,122,1.181,184,0.035,185,0.043,186,0.035,187,0.787,189,2.473,200,2.059,201,2.871,202,1.782,204,1.354,205,2.957,206,1.907,225,1.782,235,1.552,294,1.181,312,2.531,313,2.871,351,2.871,354,2.871,424,2.059,425,1.782,427,2.871,433,1.354,443,2.059,543,2.406,544,2.871,549,1.782,558,2.957,587,2.871,588,2.871,589,3.576,590,3.576,591,5.43,592,3.576,593,3.576,594,3.576,595,4.394,596,3.576,597,4.394,598,3.576,599,3.576,600,3.576,601,3.576,602,3.576,603,3.576]],["title/dependencies.html",[604,2.234,605,2.16]],["body/dependencies.html",[19,0.052,118,2.426,119,1.595,184,0.041,185,0.047,186,0.041,605,3.259,606,4.212,607,4.212,608,4.212,609,3.889]],["title/miscellaneous/enumerations.html",[610,1.793,611,2.576]],["body/miscellaneous/enumerations.html",[3,0.41,19,0.047,27,0.41,60,1.037,73,1.808,134,0.756,184,0.041,185,0.047,186,0.041,193,1.198,194,1.377,195,1.377,254,2.089,312,2.4,316,2.077,610,3.345,611,3.345,612,4.167,613,4.814]],["title/index.html",[27,0.22,614,2.234,615,2.234]],["body/index.html",[0,0.482,1,1.47,3,0.442,9,1.47,10,2.362,11,0.919,12,1.379,13,1.98,17,0.965,19,0.054,27,0.195,29,0.751,31,0.751,33,1.934,42,0.861,45,0.751,49,0.861,51,0.655,52,0.436,59,1.159,60,1.031,65,0.861,69,0.861,73,2.003,74,0.988,80,1.008,86,1.466,115,0.988,116,0.36,117,0.846,124,0.482,127,0.861,134,0.704,169,1.522,175,1.114,184,0.029,185,0.029,186,0.019,190,0.846,193,1.248,194,1.282,195,1.369,196,0.861,199,2.36,202,1.934,203,2.235,204,1.47,206,1.277,207,1.98,208,2.36,209,1.466,254,1.277,260,1.142,291,1.98,292,1.886,294,1.645,299,1.466,316,1.748,317,1.334,326,1.592,352,1.334,355,1.592,356,2.362,357,2.362,368,2.362,396,1.592,419,1.334,421,1.334,422,2.36,425,2.164,428,3.116,430,2.362,432,2.611,433,1.57,434,2.362,450,2.362,454,2.816,461,2.611,469,1.592,472,1.694,474,2.362,524,1.592,547,2.816,548,1.592,551,1.694,554,1.592,555,1.592,562,1.592,573,2.816,574,1.592,575,3.116,577,1.592,582,1.592,588,1.592,605,1.334,609,2.362,616,4.717,617,1.983,618,1.983,619,2.942,620,1.983,621,3.508,622,1.983,623,1.983,624,2.942,625,1.983,626,2.942,627,1.983,628,2.942,629,3.508,630,1.983,631,2.942,632,1.983,633,1.983,634,1.983,635,1.983,636,1.983,637,2.942,638,1.983,639,1.983,640,1.983,641,1.983,642,1.983,643,1.983,644,1.983,645,1.983,646,1.983,647,2.942,648,2.942,649,1.983,650,1.983,651,1.983,652,2.942,653,2.942,654,1.983,655,2.942,656,3.881,657,1.983,658,1.983,659,2.942,660,3.881,661,1.983,662,1.983,663,3.508,664,2.942,665,2.942,666,1.983,667,3.881,668,1.983,669,1.983,670,1.983,671,1.983,672,4.145,673,1.983,674,2.942,675,1.983,676,1.983,677,1.983,678,1.983,679,1.592,680,1.983,681,1.983,682,1.983,683,1.983,684,1.983,685,2.942,686,2.942,687,1.983,688,1.983,689,1.983,690,1.983,691,1.983,692,2.942,693,1.983,694,1.983,695,1.983,696,1.983,697,1.983,698,1.983,699,2.942,700,1.983,701,2.942,702,1.983,703,2.942,704,1.983,705,1.983,706,2.942,707,1.983,708,1.983,709,2.942,710,2.942,711,2.942,712,1.983,713,1.983,714,2.942,715,1.983,716,3.508,717,1.983,718,1.983,719,1.983,720,1.983,721,1.983,722,1.983,723,1.983,724,1.983,725,1.983,726,1.983,727,1.983,728,1.983,729,1.983,730,1.983,731,1.983,732,1.983,733,1.983,734,1.983,735,1.983,736,1.983,737,1.983,738,2.942,739,2.942,740,1.983,741,1.983,742,2.942,743,1.983,744,1.983,745,1.983,746,1.983,747,1.983,748,1.983,749,1.983,750,1.983,751,1.983,752,1.983,753,1.983,754,1.983,755,1.983,756,1.983,757,1.983,758,1.983,759,1.983,760,1.983,761,2.942,762,1.983,763,1.983,764,1.983,765,2.942,766,1.983,767,2.942]],["title/modules.html",[552,2.447]],["body/modules.html",[19,0.048,184,0.042,185,0.048,186,0.042,551,2.474,552,2.891,768,4.296]],["title/overview.html",[769,2.919]],["body/overview.html",[2,1.84,19,0.048,130,3.272,184,0.041,185,0.048,186,0.041,188,1.605,424,2.442,550,3.404,679,3.404,769,3.404,770,4.24]]],"invertedIndex":[["",{"_index":19,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["0",{"_index":132,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["1",{"_index":130,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"overview.html":{}}}],["1.2.1",{"_index":640,"title":{},"body":{"index.html":{}}}],["1.4.15",{"_index":606,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":23,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["10/10",{"_index":601,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":591,"title":{},"body":{"coverage.html":{}}}],["11/11",{"_index":599,"title":{},"body":{"coverage.html":{}}}],["12/12",{"_index":596,"title":{},"body":{"coverage.html":{}}}],["13/13",{"_index":593,"title":{},"body":{"coverage.html":{}}}],["14/14",{"_index":598,"title":{},"body":{"coverage.html":{}}}],["18:49:43.794",{"_index":671,"title":{},"body":{"index.html":{}}}],["18:49:43.797",{"_index":673,"title":{},"body":{"index.html":{}}}],["18:49:43.801",{"_index":674,"title":{},"body":{"index.html":{}}}],["18:49:43.814",{"_index":677,"title":{},"body":{"index.html":{}}}],["2",{"_index":678,"title":{},"body":{"index.html":{}}}],["2.0.0",{"_index":637,"title":{},"body":{"index.html":{}}}],["2.2.0",{"_index":638,"title":{},"body":{"index.html":{}}}],["2.2.1",{"_index":641,"title":{},"body":{"index.html":{}}}],["2.4.8",{"_index":639,"title":{},"body":{"index.html":{}}}],["2/2",{"_index":594,"title":{},"body":{"coverage.html":{}}}],["250",{"_index":258,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["3.0.0",{"_index":636,"title":{},"body":{"index.html":{}}}],["3.1.0",{"_index":635,"title":{},"body":{"index.html":{}}}],["3.9.0",{"_index":634,"title":{},"body":{"index.html":{}}}],["3/3",{"_index":600,"title":{},"body":{"coverage.html":{}}}],["4.0.0",{"_index":629,"title":{},"body":{"index.html":{}}}],["4.7.0",{"_index":627,"title":{},"body":{"index.html":{}}}],["4/4",{"_index":595,"title":{},"body":{"coverage.html":{}}}],["42",{"_index":675,"title":{},"body":{"index.html":{}}}],["5",{"_index":679,"title":{},"body":{"index.html":{},"overview.html":{}}}],["5.0.0",{"_index":621,"title":{},"body":{"index.html":{}}}],["5.1.0",{"_index":633,"title":{},"body":{"index.html":{}}}],["5/5",{"_index":592,"title":{},"body":{"coverage.html":{}}}],["500",{"_index":217,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["6",{"_index":770,"title":{},"body":{"overview.html":{}}}],["6.0.0",{"_index":631,"title":{},"body":{"index.html":{}}}],["6/6",{"_index":597,"title":{},"body":{"coverage.html":{}}}],["60000",{"_index":25,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["7.0.0",{"_index":628,"title":{},"body":{"index.html":{}}}],["8",{"_index":151,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["8.0.0",{"_index":626,"title":{},"body":{"index.html":{}}}],["9.0.0",{"_index":609,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["99]logger",{"_index":680,"title":{},"body":{"index.html":{}}}],["a.b",{"_index":704,"title":{},"body":{"index.html":{}}}],["a.b.c",{"_index":703,"title":{},"body":{"index.html":{}}}],["a.b.c.d",{"_index":701,"title":{},"body":{"index.html":{}}}],["a.tostring",{"_index":527,"title":{},"body":{"injectables/LoggingService.html":{}}}],["add",{"_index":291,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["added",{"_index":471,"title":{},"body":{"injectables/LoggingService.html":{}}}],["additional",{"_index":765,"title":{},"body":{"index.html":{}}}],["additionally",{"_index":705,"title":{},"body":{"index.html":{}}}],["ajax",{"_index":120,"title":{},"body":{"classes/AjaxAppender.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{}}}],["ajaxappender",{"_index":1,"title":{"classes/AjaxAppender.html":{}},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["ajaxappender(configuration.ajaxappender",{"_index":514,"title":{},"body":{"injectables/LoggingService.html":{}}}],["ajaxappender.appenderfailed.subscribe((message",{"_index":515,"title":{},"body":{"injectables/LoggingService.html":{}}}],["ajaxappender.batchsizedefault",{"_index":160,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["ajaxappender.thresholddefault",{"_index":162,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["ajaxappender.timerintervaldefault",{"_index":164,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["ajaxappenderconfiguration",{"_index":44,"title":{"interfaces/AjaxAppenderConfiguration.html":{}},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{}}}],["ajaxappenderfailed",{"_index":436,"title":{},"body":{"injectables/LoggingService.html":{}}}],["alerts",{"_index":484,"title":{},"body":{"injectables/LoggingService.html":{}}}],["allows",{"_index":250,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["already",{"_index":285,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["amend",{"_index":435,"title":{},"body":{"injectables/LoggingService.html":{}}}],["angular",{"_index":625,"title":{},"body":{"index.html":{}}}],["angular/common",{"_index":608,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":118,"title":{},"body":{"classes/AjaxAppender.html":{},"injectables/LoggingService.html":{},"modules/LoggingServiceModule.html":{},"dependencies.html":{}}}],["anything",{"_index":561,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["api",{"_index":767,"title":{},"body":{"index.html":{}}}],["app",{"_index":686,"title":{},"body":{"index.html":{}}}],["app.module.ts",{"_index":749,"title":{},"body":{"index.html":{}}}],["app_initializer",{"_index":757,"title":{},"body":{"index.html":{}}}],["append",{"_index":32,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["append(loggingevent",{"_index":61,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["appended",{"_index":67,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["appender",{"_index":9,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["appender's",{"_index":93,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["appender.configuration",{"_index":121,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{}}}],["appender.configuration.ts",{"_index":189,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{}}}],["appender.model",{"_index":476,"title":{},"body":{"injectables/LoggingService.html":{}}}],["appender.model.ts",{"_index":7,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{},"coverage.html":{}}}],["appender.model.ts:101",{"_index":230,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:103",{"_index":63,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:104",{"_index":578,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["appender.model.ts:111",{"_index":567,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["appender.model.ts:112",{"_index":114,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:120",{"_index":84,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:121",{"_index":227,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["appender.model.ts:127",{"_index":79,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:134",{"_index":566,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["appender.model.ts:135",{"_index":104,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:141",{"_index":568,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["appender.model.ts:142",{"_index":92,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:145",{"_index":253,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:149",{"_index":109,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:150",{"_index":570,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["appender.model.ts:152",{"_index":231,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:156",{"_index":96,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:159",{"_index":236,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:164",{"_index":111,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:169",{"_index":246,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:190",{"_index":233,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:198",{"_index":228,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:32",{"_index":55,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:34",{"_index":226,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["appender.model.ts:35",{"_index":46,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:61",{"_index":565,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["appender.model.ts:69",{"_index":239,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:78",{"_index":564,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["appender.model.ts:80",{"_index":71,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:89",{"_index":243,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appenderfailed",{"_index":30,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appenders",{"_index":524,"title":{},"body":{"injectables/LoggingService.html":{},"index.html":{}}}],["appenders.find((a",{"_index":526,"title":{},"body":{"injectables/LoggingService.html":{}}}],["application/json",{"_index":149,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appmodule",{"_index":653,"title":{},"body":{"index.html":{}}}],["apps",{"_index":644,"title":{},"body":{"index.html":{}}}],["arg",{"_index":383,"title":{},"body":{"classes/Logger.html":{}}}],["arg.tostring",{"_index":415,"title":{},"body":{"classes/Logger.html":{}}}],["args",{"_index":402,"title":{},"body":{"classes/Logger.html":{}}}],["args.push(this.formatargument(param",{"_index":403,"title":{},"body":{"classes/Logger.html":{}}}],["argument",{"_index":382,"title":{},"body":{"classes/Logger.html":{}}}],["array",{"_index":548,"title":{},"body":{"interfaces/LoggingServiceConfiguration.html":{},"index.html":{}}}],["automatically",{"_index":702,"title":{},"body":{"index.html":{}}}],["available",{"_index":717,"title":{},"body":{"index.html":{}}}],["backend",{"_index":738,"title":{},"body":{"index.html":{}}}],["batch",{"_index":106,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["batchsize",{"_index":22,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["batchsizedefault",{"_index":129,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["behind",{"_index":523,"title":{},"body":{"injectables/LoggingService.html":{}}}],["below",{"_index":657,"title":{},"body":{"index.html":{}}}],["beta",{"_index":632,"title":{},"body":{"index.html":{}}}],["between",{"_index":100,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["browse",{"_index":768,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":492,"title":{},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{}}}],["browser's",{"_index":208,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["browserconsoleappender",{"_index":203,"title":{},"body":{"interfaces/BrowserConsoleAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"index.html":{}}}],["browserconsoleappenderconfiguration",{"_index":200,"title":{"interfaces/BrowserConsoleAppenderConfiguration.html":{}},"body":{"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{}}}],["builds",{"_index":697,"title":{},"body":{"index.html":{}}}],["built",{"_index":645,"title":{},"body":{"index.html":{}}}],["c",{"_index":497,"title":{},"body":{"injectables/LoggingService.html":{}}}],["call",{"_index":742,"title":{},"body":{"index.html":{}}}],["callback",{"_index":572,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["called",{"_index":573,"title":{},"body":{"classes/MemoryAppender.html":{},"index.html":{}}}],["case",{"_index":333,"title":{},"body":{"classes/LogLevelConverter.html":{},"injectables/LoggingService.html":{}}}],["catch",{"_index":421,"title":{},"body":{"classes/Logger.html":{},"injectables/LoggingService.html":{},"index.html":{}}}],["change",{"_index":469,"title":{},"body":{"injectables/LoggingService.html":{},"index.html":{}}}],["changed",{"_index":165,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["charset=utf",{"_index":150,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["class",{"_index":0,"title":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{}},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"coverage.html":{},"index.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{},"overview.html":{}}}],["clearlog",{"_index":218,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["code",{"_index":659,"title":{},"body":{"index.html":{}}}],["complete",{"_index":710,"title":{},"body":{"index.html":{}}}],["component",{"_index":681,"title":{},"body":{"index.html":{}}}],["configuration",{"_index":17,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["configuration.ajaxappender",{"_index":513,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configuration.batchsize",{"_index":159,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["configuration.browserconsoleappender",{"_index":533,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configuration.browserconsoleappender.threshold",{"_index":534,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configuration.localstorageappender",{"_index":518,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configuration.localstoragekey",{"_index":267,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["configuration.loglevels",{"_index":508,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configuration.maxmessages",{"_index":274,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["configuration.memoryappender",{"_index":531,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configuration.threshold",{"_index":161,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["configuration.timerinterval",{"_index":163,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["configuration.url",{"_index":140,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["configure",{"_index":33,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["configure(configuration",{"_index":70,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["configure](#configure",{"_index":479,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configurelogging",{"_index":759,"title":{},"body":{"index.html":{}}}],["configurelogging(loggingservice",{"_index":750,"title":{},"body":{"index.html":{}}}],["configures",{"_index":72,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["console",{"_index":202,"title":{},"body":{"interfaces/BrowserConsoleAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["consolelogs",{"_index":736,"title":{},"body":{"index.html":{}}}],["const",{"_index":169,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["constructor",{"_index":42,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["constructor(configuration",{"_index":43,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["constructor(logger",{"_index":362,"title":{},"body":{"classes/Logger.html":{}}}],["convertedthreshold",{"_index":170,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["converting",{"_index":315,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["converts",{"_index":324,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["correspond",{"_index":718,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":587,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":487,"title":{},"body":{"injectables/LoggingService.html":{}}}],["creates",{"_index":47,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["creating",{"_index":448,"title":{},"body":{"injectables/LoggingService.html":{}}}],["ctor",{"_index":663,"title":{},"body":{"index.html":{}}}],["current",{"_index":455,"title":{},"body":{"injectables/LoggingService.html":{}}}],["currently",{"_index":247,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["data",{"_index":78,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["date",{"_index":353,"title":{},"body":{"interfaces/LogMessage.html":{}}}],["date(logmessage.timestamp",{"_index":282,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["debug",{"_index":193,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["debug(methodname",{"_index":365,"title":{},"body":{"classes/Logger.html":{}}}],["debugger",{"_index":493,"title":{},"body":{"injectables/LoggingService.html":{}}}],["declarations",{"_index":556,"title":{},"body":{"modules/LoggingServiceModule.html":{}}}],["default",{"_index":190,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["define",{"_index":709,"title":{},"body":{"index.html":{}}}],["defined",{"_index":45,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["definition",{"_index":546,"title":{},"body":{"interfaces/LoggingServiceConfiguration.html":{}}}],["definitions",{"_index":760,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":605,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{}}}],["depending",{"_index":74,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["deps",{"_index":753,"title":{},"body":{"index.html":{}}}],["derive",{"_index":462,"title":{},"body":{"injectables/LoggingService.html":{}}}],["describe",{"_index":684,"title":{},"body":{"index.html":{}}}],["description",{"_index":8,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["development",{"_index":734,"title":{},"body":{"index.html":{}}}],["different",{"_index":317,"title":{},"body":{"classes/LogLevelConverter.html":{},"interfaces/LoggingServiceConfiguration.html":{},"index.html":{}}}],["disable",{"_index":725,"title":{},"body":{"index.html":{}}}],["disables",{"_index":727,"title":{},"body":{"index.html":{}}}],["display",{"_index":501,"title":{},"body":{"injectables/LoggingService.html":{}}}],["docs",{"_index":262,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["documentation",{"_index":588,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dotnet",{"_index":694,"title":{},"body":{"index.html":{}}}],["dots",{"_index":691,"title":{},"body":{"index.html":{}}}],["during",{"_index":733,"title":{},"body":{"index.html":{}}}],["e",{"_index":422,"title":{},"body":{"classes/Logger.html":{},"injectables/LoggingService.html":{},"index.html":{}}}],["e.g",{"_index":660,"title":{},"body":{"index.html":{}}}],["e.message",{"_index":423,"title":{},"body":{"classes/Logger.html":{}}}],["each",{"_index":82,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["element",{"_index":287,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["emitter",{"_index":488,"title":{},"body":{"injectables/LoggingService.html":{}}}],["empty",{"_index":139,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["enable",{"_index":724,"title":{},"body":{"index.html":{}}}],["enabled",{"_index":559,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["encapsulates",{"_index":642,"title":{},"body":{"index.html":{}}}],["ensure",{"_index":521,"title":{},"body":{"injectables/LoggingService.html":{}}}],["entry",{"_index":356,"title":{},"body":{"classes/Logger.html":{},"index.html":{}}}],["entry(methodname",{"_index":371,"title":{},"body":{"classes/Logger.html":{}}}],["enumerations",{"_index":611,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":748,"title":{},"body":{"index.html":{}}}],["environment.ts",{"_index":747,"title":{},"body":{"index.html":{}}}],["error",{"_index":60,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["error(\"configuration",{"_index":138,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["error(\"localstoragekey",{"_index":268,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["error(\"url",{"_index":141,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["error(`invalid",{"_index":350,"title":{},"body":{"classes/LogLevelConverter.html":{},"injectables/LoggingService.html":{}}}],["error(methodname",{"_index":373,"title":{},"body":{"classes/Logger.html":{}}}],["errors",{"_index":485,"title":{},"body":{"injectables/LoggingService.html":{}}}],["event",{"_index":56,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["eventemitter",{"_index":54,"title":{},"body":{"classes/AjaxAppender.html":{},"injectables/LoggingService.html":{}}}],["eventual",{"_index":522,"title":{},"body":{"injectables/LoggingService.html":{}}}],["example",{"_index":714,"title":{},"body":{"index.html":{}}}],["exist",{"_index":449,"title":{},"body":{"injectables/LoggingService.html":{}}}],["existing",{"_index":271,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["exit",{"_index":357,"title":{},"body":{"classes/Logger.html":{},"index.html":{}}}],["exit(methodname",{"_index":375,"title":{},"body":{"classes/Logger.html":{}}}],["export",{"_index":124,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["exports",{"_index":557,"title":{},"body":{"modules/LoggingServiceModule.html":{}}}],["extends",{"_index":125,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["false",{"_index":147,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["fatal",{"_index":194,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["fatal(methodname",{"_index":377,"title":{},"body":{"classes/Logger.html":{}}}],["feedback",{"_index":740,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{}}}],["finally",{"_index":658,"title":{},"body":{"index.html":{}}}],["first",{"_index":651,"title":{},"body":{"index.html":{}}}],["following",{"_index":430,"title":{},"body":{"injectables/LoggingService.html":{},"index.html":{}}}],["follows",{"_index":720,"title":{},"body":{"index.html":{}}}],["formatargument",{"_index":358,"title":{},"body":{"classes/Logger.html":{}}}],["formatargument(arg",{"_index":379,"title":{},"body":{"classes/Logger.html":{}}}],["formats",{"_index":381,"title":{},"body":{"classes/Logger.html":{}}}],["formatted",{"_index":370,"title":{},"body":{"classes/Logger.html":{}}}],["framework",{"_index":646,"title":{},"body":{"index.html":{}}}],["full",{"_index":286,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["function",{"_index":577,"title":{},"body":{"classes/MemoryAppender.html":{},"index.html":{}}}],["functionalities",{"_index":643,"title":{},"body":{"index.html":{}}}],["functionality",{"_index":429,"title":{},"body":{"injectables/LoggingService.html":{}}}],["getbatchsize",{"_index":34,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["getinternalappender",{"_index":35,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["getinternallogger",{"_index":359,"title":{},"body":{"classes/Logger.html":{}}}],["getlayout",{"_index":36,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["getlocalstoragekey",{"_index":219,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["getlogger",{"_index":438,"title":{},"body":{"injectables/LoggingService.html":{}}}],["getlogger(loggername",{"_index":445,"title":{},"body":{"injectables/LoggingService.html":{}}}],["getloglevel",{"_index":360,"title":{},"body":{"classes/Logger.html":{}}}],["getlogmessages",{"_index":220,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["getlogmessagesfromlocalstorage",{"_index":439,"title":{},"body":{"injectables/LoggingService.html":{}}}],["getlogmessagesfromlocalstorage(localstoragekey",{"_index":457,"title":{},"body":{"injectables/LoggingService.html":{}}}],["getmaxmessages",{"_index":221,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["getrootlogger",{"_index":440,"title":{},"body":{"injectables/LoggingService.html":{}}}],["gets",{"_index":115,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["gettimerinterval",{"_index":37,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["getting",{"_index":614,"title":{"index.html":{}},"body":{}}],["given",{"_index":75,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["greater",{"_index":729,"title":{},"body":{"index.html":{}}}],["happen",{"_index":470,"title":{},"body":{"injectables/LoggingService.html":{}}}],["hello",{"_index":676,"title":{},"body":{"index.html":{}}}],["helper",{"_index":314,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["here",{"_index":418,"title":{},"body":{"classes/Logger.html":{}}}],["hierarchy",{"_index":699,"title":{},"body":{"index.html":{}}}],["higher",{"_index":763,"title":{},"body":{"index.html":{}}}],["http",{"_index":15,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["https://my.backend.xy/loggingbackend",{"_index":21,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["identifier",{"_index":589,"title":{},"body":{"coverage.html":{}}}],["immediatedly",{"_index":197,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{}}}],["import",{"_index":117,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["important",{"_index":707,"title":{},"body":{"index.html":{}}}],["imports",{"_index":555,"title":{},"body":{"modules/LoggingServiceModule.html":{},"index.html":{}}}],["included",{"_index":722,"title":{},"body":{"index.html":{}}}],["includes",{"_index":715,"title":{},"body":{"index.html":{}}}],["index",{"_index":27,"title":{"index.html":{}},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["info(methodname",{"_index":388,"title":{},"body":{"classes/Logger.html":{}}}],["inform",{"_index":583,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["inherit",{"_index":708,"title":{},"body":{"index.html":{}}}],["injectable",{"_index":424,"title":{"injectables/LoggingService.html":{}},"body":{"injectables/LoggingService.html":{},"coverage.html":{},"overview.html":{}}}],["injectables",{"_index":426,"title":{},"body":{"injectables/LoggingService.html":{}}}],["instance",{"_index":49,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["instanceof",{"_index":416,"title":{},"body":{"classes/Logger.html":{}}}],["instead",{"_index":762,"title":{},"body":{"index.html":{}}}],["intended",{"_index":723,"title":{},"body":{"index.html":{}}}],["interface",{"_index":187,"title":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/LogMessage.html":{},"interfaces/LoggingServiceConfiguration.html":{},"interfaces/MemoryAppenderConfiguration.html":{}},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/LogMessage.html":{},"interfaces/LoggingServiceConfiguration.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{}}}],["interfaces",{"_index":188,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/LogMessage.html":{},"interfaces/LoggingServiceConfiguration.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"overview.html":{}}}],["internal",{"_index":325,"title":{},"body":{"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{}}}],["internally",{"_index":85,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["interval",{"_index":113,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["ionic",{"_index":616,"title":{},"body":{"index.html":{}}}],["ionic.logging.ajaxappender",{"_index":176,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["ionic.logging.localstorageappender",{"_index":308,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["ionic.logging.memoryappender",{"_index":528,"title":{},"body":{"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["java",{"_index":696,"title":{},"body":{"index.html":{}}}],["javascript",{"_index":198,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{}}}],["json",{"_index":18,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{}}}],["json.parse(localstorage.getitem(localstoragekey",{"_index":278,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["json.stringify",{"_index":417,"title":{},"body":{"classes/Logger.html":{}}}],["json.stringify(arg",{"_index":420,"title":{},"body":{"classes/Logger.html":{}}}],["json.stringify(this.logmessages",{"_index":307,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["keeps",{"_index":739,"title":{},"body":{"index.html":{}}}],["key",{"_index":212,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{}}}],["keyword",{"_index":266,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["kind",{"_index":698,"title":{},"body":{"index.html":{}}}],["last",{"_index":452,"title":{},"body":{"injectables/LoggingService.html":{}}}],["later",{"_index":737,"title":{},"body":{"index.html":{}}}],["latest",{"_index":617,"title":{},"body":{"index.html":{}}}],["layout",{"_index":94,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["length",{"_index":97,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["level",{"_index":292,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["level.converter",{"_index":123,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["level.converter.ts",{"_index":313,"title":{},"body":{"classes/LogLevelConverter.html":{},"coverage.html":{}}}],["level.converter.ts:15",{"_index":323,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["level.converter.ts:43",{"_index":328,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["level.converter.ts:71",{"_index":331,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["level.loggername",{"_index":509,"title":{},"body":{"injectables/LoggingService.html":{}}}],["level.loglevel",{"_index":512,"title":{},"body":{"injectables/LoggingService.html":{}}}],["level.model",{"_index":255,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{}}}],["level.model.ts",{"_index":613,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["level.warn",{"_index":741,"title":{},"body":{"index.html":{}}}],["levelfromlog4javascript",{"_index":318,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["levelfromlog4javascript(level",{"_index":321,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["levelfromstring",{"_index":319,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["levelfromstring(level",{"_index":327,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["levels",{"_index":316,"title":{},"body":{"classes/LogLevelConverter.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["leveltolog4javascript",{"_index":320,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["leveltolog4javascript(level",{"_index":330,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["limited",{"_index":456,"title":{},"body":{"injectables/LoggingService.html":{}}}],["line:completed",{"_index":261,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["line:no",{"_index":264,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["load",{"_index":240,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["loadlogmessages",{"_index":222,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["loadlogmessages(localstoragekey",{"_index":238,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["loads",{"_index":459,"title":{},"body":{"injectables/LoggingService.html":{}}}],["local",{"_index":209,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"index.html":{}}}],["localstorage",{"_index":305,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["localstorage.getitem(localstoragekey",{"_index":277,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["localstorage.removeitem(localstoragekey",{"_index":283,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["localstorage.removeitem(this.localstoragekey",{"_index":311,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["localstorage.setitem(this.localstoragekey",{"_index":306,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["localstorageappender",{"_index":204,"title":{"classes/LocalStorageAppender.html":{}},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["localstorageappender(configuration.localstorageappender",{"_index":519,"title":{},"body":{"injectables/LoggingService.html":{}}}],["localstorageappender.loadlogmessages(localstoragekey",{"_index":540,"title":{},"body":{"injectables/LoggingService.html":{}}}],["localstorageappender.loadlogmessages(this.localstoragekey",{"_index":273,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["localstorageappender.maxmessagesdefault",{"_index":275,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["localstorageappender.removelogmessages(localstoragekey",{"_index":542,"title":{},"body":{"injectables/LoggingService.html":{}}}],["localstorageappender.thresholddefault",{"_index":276,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["localstorageappenderconfiguration",{"_index":225,"title":{"interfaces/LocalStorageAppenderConfiguration.html":{}},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{}}}],["localstoragekey",{"_index":214,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{}}}],["log",{"_index":11,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["log4javascript",{"_index":119,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"dependencies.html":{}}}],["log4javascript's",{"_index":326,"title":{},"body":{"classes/LogLevelConverter.html":{},"index.html":{}}}],["log4javascript.ajaxappender",{"_index":91,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["log4javascript.ajaxappender(configuration.url",{"_index":143,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["log4javascript.appender",{"_index":126,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["log4javascript.browserconsoleappender",{"_index":481,"title":{},"body":{"injectables/LoggingService.html":{}}}],["log4javascript.getlogger(level.loggername",{"_index":510,"title":{},"body":{"injectables/LoggingService.html":{}}}],["log4javascript.getlogger(logger",{"_index":398,"title":{},"body":{"classes/Logger.html":{}}}],["log4javascript.getrootlogger",{"_index":397,"title":{},"body":{"classes/Logger.html":{},"injectables/LoggingService.html":{}}}],["log4javascript.getrootlogger().addappender(ajaxappender",{"_index":517,"title":{},"body":{"injectables/LoggingService.html":{}}}],["log4javascript.getrootlogger().addappender(localstorageappender",{"_index":520,"title":{},"body":{"injectables/LoggingService.html":{}}}],["log4javascript.getrootlogger().addappender(memoryappender",{"_index":530,"title":{},"body":{"injectables/LoggingService.html":{}}}],["log4javascript.getrootlogger().removeappender(memoryappender",{"_index":529,"title":{},"body":{"injectables/LoggingService.html":{}}}],["log4javascript.jsonlayout(false",{"_index":146,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["log4javascript.layout",{"_index":95,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["log4javascript.level",{"_index":322,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.all",{"_index":334,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.debug",{"_index":336,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.error",{"_index":338,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.fatal",{"_index":340,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.info",{"_index":342,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.off",{"_index":344,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.trace",{"_index":346,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.warn",{"_index":348,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.logger",{"_index":386,"title":{},"body":{"classes/Logger.html":{},"injectables/LoggingService.html":{}}}],["log4javascript.loggingevent",{"_index":62,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["log4javascript.loglog.setquietmode(true",{"_index":486,"title":{},"body":{"injectables/LoggingService.html":{}}}],["log4javascript.patternlayout(\"%d{hh:mm:ss,sss",{"_index":496,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logged",{"_index":368,"title":{},"body":{"classes/Logger.html":{},"index.html":{}}}],["logger",{"_index":294,"title":{"classes/Logger.html":{}},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"coverage.html":{},"index.html":{}}}],["logger's",{"_index":712,"title":{},"body":{"index.html":{}}}],["logger().getinternallogger().geteffectiveappenders",{"_index":525,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logger(loggername",{"_index":537,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logger.addappender(this.browserconsoleappender",{"_index":500,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logger.addappender(this.memoryappender",{"_index":507,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logger.model",{"_index":477,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logger.setlevel(log4javascript.level.warn",{"_index":491,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logger.setlevel(loglevelconverter.leveltolog4javascript(loglevelconverter.levelfromstring(level.loglevel",{"_index":511,"title":{},"body":{"injectables/LoggingService.html":{}}}],["loggername",{"_index":450,"title":{},"body":{"injectables/LoggingService.html":{},"index.html":{}}}],["loggers",{"_index":461,"title":{},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"index.html":{}}}],["logging",{"_index":73,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["loggingconfiguration",{"_index":744,"title":{},"body":{"index.html":{}}}],["loggingevent",{"_index":66,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loggingevent.logger",{"_index":295,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loggingevent.logger.name",{"_index":297,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loggingevent.messages.slice(1",{"_index":298,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loggingevent.messages[0",{"_index":300,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loggingevent.timestamp",{"_index":302,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loggingservice",{"_index":425,"title":{"injectables/LoggingService.html":{}},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["loggingservice.configure(environment.logging",{"_index":751,"title":{},"body":{"index.html":{}}}],["loggingservice.getlogger(\"myapp.mycomponent",{"_index":662,"title":{},"body":{"index.html":{}}}],["loggingserviceconfiguration",{"_index":443,"title":{"interfaces/LoggingServiceConfiguration.html":{}},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{}}}],["loggingservicemodule",{"_index":551,"title":{"modules/LoggingServiceModule.html":{}},"body":{"modules/LoggingServiceModule.html":{},"index.html":{},"modules.html":{}}}],["loglevel",{"_index":254,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["loglevel.all",{"_index":335,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel.debug",{"_index":337,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel.error",{"_index":339,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel.fatal",{"_index":341,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel.info",{"_index":343,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel.off",{"_index":345,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel.trace",{"_index":347,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel.warn",{"_index":349,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel[loglevelconverter.levelfromlog4javascript(loggingevent.level",{"_index":293,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loglevelconverter",{"_index":122,"title":{"classes/LogLevelConverter.html":{}},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"coverage.html":{}}}],["loglevelconverter.levelfromlog4javascript(this.logger.getlevel",{"_index":399,"title":{},"body":{"classes/Logger.html":{}}}],["loglevelconverter.levelfromstring(configuration.browserconsoleappender.threshold",{"_index":535,"title":{},"body":{"injectables/LoggingService.html":{}}}],["loglevelconverter.levelfromstring(configuration.threshold",{"_index":172,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loglevelconverter.leveltolog4javascript",{"_index":171,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["loglevels",{"_index":547,"title":{},"body":{"interfaces/LoggingServiceConfiguration.html":{},"index.html":{}}}],["logmessage",{"_index":235,"title":{"interfaces/LogMessage.html":{}},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LogMessage.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"coverage.html":{}}}],["logmessage.timestamp",{"_index":281,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["logmessages",{"_index":263,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["logmessageschanged",{"_index":437,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logs",{"_index":199,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"classes/Logger.html":{},"index.html":{}}}],["look",{"_index":648,"title":{},"body":{"index.html":{}}}],["lower",{"_index":728,"title":{},"body":{"index.html":{}}}],["m",{"_index":498,"title":{},"body":{"injectables/LoggingService.html":{}}}],["mainly",{"_index":87,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["make",{"_index":731,"title":{},"body":{"index.html":{}}}],["massages",{"_index":473,"title":{},"body":{"injectables/LoggingService.html":{}}}],["matching",{"_index":185,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["maximum",{"_index":237,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["maxmessages",{"_index":216,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["maxmessagesdefault",{"_index":257,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["meaning",{"_index":730,"title":{},"body":{"index.html":{}}}],["means",{"_index":454,"title":{},"body":{"injectables/LoggingService.html":{},"index.html":{}}}],["memory",{"_index":472,"title":{},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["memoryappender",{"_index":433,"title":{"classes/MemoryAppender.html":{}},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["memoryappender.maxmessagesdefault",{"_index":580,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["memoryappender.thresholddefault",{"_index":581,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["memoryappender](../memoryappender.html",{"_index":538,"title":{},"body":{"injectables/LoggingService.html":{}}}],["memoryappenderconfiguration",{"_index":549,"title":{"interfaces/MemoryAppenderConfiguration.html":{}},"body":{"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{}}}],["message",{"_index":59,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["message.model",{"_index":256,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["message.model.ts",{"_index":351,"title":{},"body":{"interfaces/LogMessage.html":{},"coverage.html":{}}}],["messages",{"_index":12,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["method",{"_index":65,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["methodname",{"_index":299,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["methods",{"_index":31,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["milliseconds",{"_index":99,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["miscellaneous",{"_index":610,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["modified",{"_index":77,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["module",{"_index":550,"title":{"modules/LoggingServiceModule.html":{}},"body":{"overview.html":{}}}],["modules",{"_index":552,"title":{"modules.html":{}},"body":{"modules/LoggingServiceModule.html":{},"modules.html":{}}}],["more",{"_index":248,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["much",{"_index":309,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["multi",{"_index":754,"title":{},"body":{"index.html":{}}}],["myapp.mycomponent",{"_index":672,"title":{},"body":{"index.html":{}}}],["myapp.mynamespace.mylogger",{"_index":761,"title":{},"body":{"index.html":{}}}],["mycomponent",{"_index":661,"title":{},"body":{"index.html":{}}}],["mylogs",{"_index":215,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["mymethod",{"_index":667,"title":{},"body":{"index.html":{}}}],["mymethod(index",{"_index":666,"title":{},"body":{"index.html":{}}}],["name",{"_index":51,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["named",{"_index":700,"title":{},"body":{"index.html":{}}}],["namespaces",{"_index":693,"title":{},"body":{"index.html":{}}}],["need",{"_index":652,"title":{},"body":{"index.html":{}}}],["needed",{"_index":620,"title":{},"body":{"index.html":{}}}],["new",{"_index":48,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"coverage.html":{}}}],["next",{"_index":260,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["ngmodule",{"_index":554,"title":{},"body":{"modules/LoggingServiceModule.html":{},"index.html":{}}}],["null",{"_index":265,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["number",{"_index":80,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["object",{"_index":582,"title":{},"body":{"classes/MemoryAppender.html":{},"index.html":{}}}],["objects",{"_index":369,"title":{},"body":{"classes/Logger.html":{}}}],["older",{"_index":622,"title":{},"body":{"index.html":{}}}],["oldest",{"_index":251,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["one",{"_index":474,"title":{},"body":{"injectables/LoggingService.html":{},"index.html":{}}}],["onlogmessageschangedcallback",{"_index":579,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["optional",{"_index":53,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["ordered",{"_index":719,"title":{},"body":{"index.html":{}}}],["output",{"_index":670,"title":{},"body":{"index.html":{}}}],["overview",{"_index":769,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwritten",{"_index":76,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["package",{"_index":604,"title":{"dependencies.html":{}},"body":{}}],["packages",{"_index":695,"title":{},"body":{"index.html":{}}}],["page",{"_index":502,"title":{},"body":{"injectables/LoggingService.html":{}}}],["par",{"_index":713,"title":{},"body":{"index.html":{}}}],["param",{"_index":135,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["parameters",{"_index":50,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["params",{"_index":366,"title":{},"body":{"classes/Logger.html":{}}}],["parent",{"_index":706,"title":{},"body":{"index.html":{}}}],["partial",{"_index":545,"title":{},"body":{"interfaces/LoggingServiceConfiguration.html":{}}}],["parts",{"_index":689,"title":{},"body":{"index.html":{}}}],["peer",{"_index":607,"title":{},"body":{"dependencies.html":{}}}],["per",{"_index":683,"title":{},"body":{"index.html":{}}}],["place",{"_index":685,"title":{},"body":{"index.html":{}}}],["placed",{"_index":687,"title":{},"body":{"index.html":{}}}],["possible",{"_index":434,"title":{},"body":{"injectables/LoggingService.html":{},"index.html":{}}}],["potentially",{"_index":468,"title":{},"body":{"injectables/LoggingService.html":{}}}],["prevent",{"_index":482,"title":{},"body":{"injectables/LoggingService.html":{}}}],["private",{"_index":127,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["process",{"_index":156,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["produce",{"_index":669,"title":{},"body":{"index.html":{}}}],["properties",{"_index":28,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/LogMessage.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["provide",{"_index":756,"title":{},"body":{"index.html":{}}}],["providedin",{"_index":480,"title":{},"body":{"injectables/LoggingService.html":{}}}],["providers",{"_index":752,"title":{},"body":{"index.html":{}}}],["public",{"_index":29,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["purposes",{"_index":90,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["queued",{"_index":102,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["quite",{"_index":692,"title":{},"body":{"index.html":{}}}],["rc",{"_index":630,"title":{},"body":{"index.html":{}}}],["read",{"_index":270,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["realtime",{"_index":576,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["recommended",{"_index":745,"title":{},"body":{"index.html":{}}}],["registers",{"_index":571,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["remaining",{"_index":157,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["remove",{"_index":244,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["removed",{"_index":252,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["removelogmessages",{"_index":223,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["removelogmessages(localstoragekey",{"_index":242,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["removelogmessagesfromlocalstorage",{"_index":441,"title":{},"body":{"injectables/LoggingService.html":{}}}],["removelogmessagesfromlocalstorage(localstoragekey",{"_index":464,"title":{},"body":{"injectables/LoggingService.html":{}}}],["removes",{"_index":229,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{}}}],["representation",{"_index":329,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["request",{"_index":83,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["respectively",{"_index":726,"title":{},"body":{"index.html":{}}}],["responsible",{"_index":682,"title":{},"body":{"index.html":{}}}],["restrict",{"_index":764,"title":{},"body":{"index.html":{}}}],["result",{"_index":184,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["results",{"_index":186,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["retrieved",{"_index":453,"title":{},"body":{"injectables/LoggingService.html":{}}}],["return",{"_index":175,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["returns",{"_index":68,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["root",{"_index":432,"title":{},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"index.html":{}}}],["same",{"_index":619,"title":{},"body":{"index.html":{}}}],["sample",{"_index":647,"title":{},"body":{"index.html":{}}}],["saved",{"_index":210,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["see",{"_index":656,"title":{},"body":{"index.html":{}}}],["send",{"_index":58,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"injectables/LoggingService.html":{}}}],["sending",{"_index":101,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["sends",{"_index":10,"title":{},"body":{"classes/AjaxAppender.html":{},"index.html":{}}}],["sent",{"_index":81,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["separated",{"_index":690,"title":{},"body":{"index.html":{}}}],["serialized",{"_index":211,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["serve",{"_index":735,"title":{},"body":{"index.html":{}}}],["server",{"_index":13,"title":{},"body":{"classes/AjaxAppender.html":{},"injectables/LoggingService.html":{},"index.html":{}}}],["service",{"_index":428,"title":{},"body":{"injectables/LoggingService.html":{},"index.html":{}}}],["service.configuration",{"_index":478,"title":{},"body":{"injectables/LoggingService.html":{}}}],["service.configuration.ts",{"_index":544,"title":{},"body":{"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{}}}],["service.module.ts",{"_index":553,"title":{},"body":{"modules/LoggingServiceModule.html":{}}}],["set",{"_index":196,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["setbatchsize",{"_index":38,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["setbatchsize(batchsize",{"_index":103,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["setlayout",{"_index":39,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["setlayout(layout",{"_index":108,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["setloglevel",{"_index":361,"title":{},"body":{"classes/Logger.html":{}}}],["setloglevel(level",{"_index":390,"title":{},"body":{"classes/Logger.html":{}}}],["setmaxmessages",{"_index":224,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["setmaxmessages(value",{"_index":245,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["setonlogmessageschangedcallback",{"_index":563,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["setonlogmessageschangedcallback(callback",{"_index":569,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["sets",{"_index":105,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["settimerinterval",{"_index":40,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["settimerinterval(timerinterval",{"_index":110,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["setting",{"_index":711,"title":{},"body":{"index.html":{}}}],["settings",{"_index":431,"title":{},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{}}}],["severe",{"_index":721,"title":{},"body":{"index.html":{}}}],["severity",{"_index":716,"title":{},"body":{"index.html":{}}}],["show",{"_index":483,"title":{},"body":{"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["single",{"_index":688,"title":{},"body":{"index.html":{}}}],["size",{"_index":107,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["spcific",{"_index":475,"title":{},"body":{"injectables/LoggingService.html":{}}}],["specific",{"_index":64,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["specified",{"_index":447,"title":{},"body":{"injectables/LoggingService.html":{}}}],["specify",{"_index":560,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["src/.../log",{"_index":612,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/lib/ajax",{"_index":6,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"coverage.html":{}}}],["src/lib/browser",{"_index":201,"title":{},"body":{"interfaces/BrowserConsoleAppenderConfiguration.html":{},"coverage.html":{}}}],["src/lib/local",{"_index":205,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"coverage.html":{}}}],["src/lib/log",{"_index":312,"title":{},"body":{"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/lib/logger.model.ts",{"_index":354,"title":{},"body":{"classes/Logger.html":{},"coverage.html":{}}}],["src/lib/logger.model.ts:11",{"_index":363,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:112",{"_index":374,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:128",{"_index":378,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:145",{"_index":372,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:164",{"_index":376,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:179",{"_index":380,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:199",{"_index":384,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:29",{"_index":387,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:38",{"_index":391,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:48",{"_index":393,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:64",{"_index":367,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:80",{"_index":389,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:96",{"_index":395,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logging",{"_index":543,"title":{},"body":{"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"coverage.html":{}}}],["src/lib/logging.service.ts",{"_index":427,"title":{},"body":{"injectables/LoggingService.html":{},"coverage.html":{}}}],["src/lib/logging.service.ts:149",{"_index":460,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:158",{"_index":446,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:170",{"_index":451,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:179",{"_index":458,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:186",{"_index":463,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:195",{"_index":465,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:34",{"_index":467,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:40",{"_index":466,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:44",{"_index":442,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:83",{"_index":444,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/memory",{"_index":558,"title":{},"body":{"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{}}}],["started",{"_index":615,"title":{"index.html":{}},"body":{}}],["statements",{"_index":590,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":128,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/MemoryAppender.html":{}}}],["step",{"_index":654,"title":{},"body":{"index.html":{}}}],["storage",{"_index":206,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["store",{"_index":232,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{}}}],["stored",{"_index":234,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["stores",{"_index":207,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["storing",{"_index":213,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["string",{"_index":116,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["strings",{"_index":280,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["super",{"_index":136,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["switch",{"_index":332,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["table",{"_index":603,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":602,"title":{},"body":{"coverage.html":{}}}],["takes",{"_index":743,"title":{},"body":{"index.html":{}}}],["testing",{"_index":89,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["tests",{"_index":385,"title":{},"body":{"classes/Logger.html":{}}}],["therefore",{"_index":310,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["this.ajaxappender",{"_index":142,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.addheader(\"content",{"_index":148,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.append(loggingevent",{"_index":174,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.getbatchsize",{"_index":177,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.getlayout",{"_index":179,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.gettimerinterval",{"_index":181,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.setbatchsize(batchsize",{"_index":178,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.setfailcallback((message",{"_index":154,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.setlayout(layout",{"_index":180,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.setlayout(new",{"_index":145,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.setsendallonunload(true",{"_index":152,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.settimed(timerinterval",{"_index":182,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.settimerinterval(timerinterval",{"_index":183,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappenderfailed",{"_index":490,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.ajaxappenderfailed.emit(message",{"_index":516,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.appenderfailed",{"_index":153,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.appenderfailed.emit(message",{"_index":155,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.browserconsoleappender",{"_index":494,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.browserconsoleappender.setlayout(new",{"_index":495,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.browserconsoleappender.setthreshold(convertedthreshold",{"_index":536,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.browserconsoleappender.setthreshold(log4javascript.level.all",{"_index":499,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.configure",{"_index":158,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["this.localstoragekey",{"_index":269,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["this.logger",{"_index":396,"title":{},"body":{"classes/Logger.html":{},"index.html":{}}}],["this.logger.debug.apply(this.logger",{"_index":406,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.entry(methodname",{"_index":664,"title":{},"body":{"index.html":{}}}],["this.logger.error(methodname",{"_index":668,"title":{},"body":{"index.html":{}}}],["this.logger.error.apply(this.logger",{"_index":412,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.exit(methodname",{"_index":665,"title":{},"body":{"index.html":{}}}],["this.logger.fatal.apply(this.logger",{"_index":414,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.info.apply(this.logger",{"_index":408,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.isdebugenabled",{"_index":405,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.iserrorenabled",{"_index":411,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.isfatalenabled",{"_index":413,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.isinfoenabled",{"_index":407,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.istraceenabled",{"_index":401,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.iswarnenabled",{"_index":409,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.setlevel(loglevelconverter.leveltolog4javascript(level",{"_index":400,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.trace.apply(this.logger",{"_index":404,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.warn.apply(this.logger",{"_index":410,"title":{},"body":{"classes/Logger.html":{}}}],["this.logmessages",{"_index":272,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["this.logmessages.length",{"_index":288,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["this.logmessages.push(message",{"_index":303,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["this.logmessages.shift",{"_index":290,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["this.logmessages.splice(0",{"_index":586,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["this.logmessageschanged",{"_index":489,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.logmessageschanged.emit",{"_index":506,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.maxmessages",{"_index":289,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["this.memoryappender",{"_index":503,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.memoryappender.configure(configuration.memoryappender",{"_index":532,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.memoryappender.getlogmessages",{"_index":539,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.memoryappender.removelogmessages",{"_index":541,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.memoryappender.setlayout(new",{"_index":504,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.memoryappender.setonlogmessageschangedcallback((message",{"_index":505,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.onlogmessageschangedcallback",{"_index":584,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["this.onlogmessageschangedcallback(message",{"_index":585,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["this.setbatchsize(configuration.batchsize",{"_index":166,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.setmaxmessages(configuration.maxmessages",{"_index":284,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["this.setthreshold(convertedthreshold",{"_index":173,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["this.settimerinterval(configuration.timerinterval",{"_index":168,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.url",{"_index":144,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["threshold",{"_index":26,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["thresholddefault",{"_index":133,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["throw",{"_index":137,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"injectables/LoggingService.html":{}}}],["time",{"_index":98,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/LogMessage.html":{},"classes/MemoryAppender.html":{}}}],["timer",{"_index":112,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["timerinterval",{"_index":24,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["timerintervaldefault",{"_index":131,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["timestamp",{"_index":301,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LogMessage.html":{},"classes/MemoryAppender.html":{}}}],["timestamps",{"_index":279,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["tostring",{"_index":41,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["trace",{"_index":195,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["trace(methodname",{"_index":392,"title":{},"body":{"classes/Logger.html":{}}}],["triggered",{"_index":57,"title":{},"body":{"classes/AjaxAppender.html":{},"injectables/LoggingService.html":{}}}],["true",{"_index":755,"title":{},"body":{"index.html":{}}}],["try",{"_index":419,"title":{},"body":{"classes/Logger.html":{},"injectables/LoggingService.html":{},"index.html":{}}}],["tslint:disable",{"_index":259,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["type",{"_index":52,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["typeof",{"_index":167,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["typical",{"_index":16,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["typically",{"_index":655,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":296,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["under",{"_index":241,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["unit",{"_index":88,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{}}}],["url",{"_index":20,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["usage",{"_index":650,"title":{},"body":{"index.html":{}}}],["use",{"_index":624,"title":{},"body":{"index.html":{}}}],["used",{"_index":86,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"index.html":{}}}],["usefactory",{"_index":758,"title":{},"body":{"index.html":{}}}],["useful",{"_index":574,"title":{},"body":{"classes/MemoryAppender.html":{},"index.html":{}}}],["using",{"_index":562,"title":{},"body":{"classes/MemoryAppender.html":{},"index.html":{}}}],["valid",{"_index":191,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["value",{"_index":249,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["values",{"_index":192,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["version",{"_index":618,"title":{},"body":{"index.html":{}}}],["versions",{"_index":623,"title":{},"body":{"index.html":{}}}],["via",{"_index":14,"title":{},"body":{"classes/AjaxAppender.html":{},"injectables/LoggingService.html":{}}}],["viewer",{"_index":649,"title":{},"body":{"index.html":{}}}],["visible",{"_index":732,"title":{},"body":{"index.html":{}}}],["void",{"_index":69,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["want",{"_index":575,"title":{},"body":{"classes/MemoryAppender.html":{},"index.html":{}}}],["warn",{"_index":134,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["warn(methodname",{"_index":394,"title":{},"body":{"classes/Logger.html":{}}}],["way",{"_index":746,"title":{},"body":{"index.html":{}}}],["write",{"_index":304,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["writes",{"_index":766,"title":{},"body":{"index.html":{}}}],["writing",{"_index":355,"title":{},"body":{"classes/Logger.html":{},"index.html":{}}}],["written",{"_index":352,"title":{},"body":{"interfaces/LogMessage.html":{},"injectables/LoggingService.html":{},"index.html":{}}}],["yes",{"_index":364,"title":{},"body":{"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AjaxAppender.html":{"url":"classes/AjaxAppender.html","title":"class - AjaxAppender","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AjaxAppender\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ajax-appender.model.ts\n        \n\n            \n                Description\n            \n            \n                An appender which sends the log messages to a server via HTTP.\nA typical configuration could be:\n```json\n\n{\n\"url\": \"https://my.backend.xy/LoggingBackend\",\n\"batchSize\": 10,\n\"timerInterval\": 60000,\n\"threshold\": \"INFO\"\n}\n```\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                appenderFailed\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                append\n                            \n                            \n                                    Public\n                                configure\n                            \n                            \n                                    Public\n                                getBatchSize\n                            \n                            \n                                    Public\n                                getInternalAppender\n                            \n                            \n                                    Public\n                                getLayout\n                            \n                            \n                                    Public\n                                getTimerInterval\n                            \n                            \n                                    Public\n                                setBatchSize\n                            \n                            \n                                    Public\n                                setLayout\n                            \n                            \n                                    Public\n                                setTimerInterval\n                            \n                            \n                                    Public\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configuration: AjaxAppenderConfiguration)\n                    \n                \n                        \n                            \n                                Defined in src/lib/ajax-appender.model.ts:35\n                            \n                        \n\n                \n                    \n                            Creates a new instance of the appender.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configuration\n                                                  \n                                                        \n                                                                        AjaxAppenderConfiguration\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                configuration for the appender.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            appenderFailed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     EventEmitter\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/ajax-appender.model.ts:32\n                            \n                        \n\n                \n                    \n                        Event triggered when the appender could not send log messages to the server.\n\n                    \n                \n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                                    Description\n                                          \n                                      \n                                      \n                                                \n                                                        message\n                                                        \n                                                                error message\n\n                                                        \n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            append\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    append(loggingEvent: log4javascript.LoggingEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:103\n                \n            \n\n\n            \n                \n                    Appender-specific method to append a log message.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    loggingEvent\n                                    \n                                            log4javascript.LoggingEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        event to be appended.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            configure\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(configuration: AjaxAppenderConfiguration)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:80\n                \n            \n\n\n            \n                \n                    Configures the logging depending on the given configuration.\nOnly the defined properties get overwritten.\nThe url cannot be modified.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    configuration\n                                    \n                                                AjaxAppenderConfiguration\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        configuration data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getBatchSize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBatchSize()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:127\n                \n            \n\n\n            \n                \n                    Returns the number of log messages sent in each request.\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getInternalAppender\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getInternalAppender()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:120\n                \n            \n\n\n            \n                \n                    Get the internally used appender.\nMainly for unit testing purposes.\n\n\n                    \n                        Returns :         log4javascript.AjaxAppender\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLayout\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLayout()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:142\n                \n            \n\n\n            \n                \n                    Returns the appender's layout.\n\n\n                    \n                        Returns :     log4javascript.Layout\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getTimerInterval\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTimerInterval()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:156\n                \n            \n\n\n            \n                \n                    Returns the length of time in milliseconds between each sending of queued log messages.\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setBatchSize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setBatchSize(batchSize: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:135\n                \n            \n\n\n            \n                \n                    Sets the number of log messages to send in each request.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    batchSize\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        new batch size\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setLayout\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setLayout(layout: log4javascript.Layout)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:149\n                \n            \n\n\n            \n                \n                    Sets the appender's layout.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    layout\n                                    \n                                            log4javascript.Layout\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setTimerInterval\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setTimerInterval(timerInterval: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:164\n                \n            \n\n\n            \n                \n                    Sets the length of time in milliseconds between each sending of queued log messages.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    timerInterval\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        new timer interval\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            toString\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toString()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:112\n                \n            \n\n\n            \n                \n                    Gets the appender's name.\nMainly for unit testing purposes.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        appender's name\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EventEmitter } from \"@angular/core\";\n\nimport * as log4javascript from \"log4javascript\";\n\nimport { AjaxAppenderConfiguration } from \"./ajax-appender.configuration\";\nimport { LogLevelConverter } from \"./log-level.converter\";\n\n/**\n * An appender which sends the log messages to a server via HTTP.\n *\n * A typical configuration could be:\n *\n * ```json\n * {\n *   \"url\": \"https://my.backend.xy/LoggingBackend\",\n *   \"batchSize\": 10,\n *   \"timerInterval\": 60000,\n *   \"threshold\": \"INFO\"\n * }\n * ```\n */\nexport class AjaxAppender extends log4javascript.Appender {\n\n\tprivate static batchSizeDefault = 1;\n\tprivate static timerIntervalDefault = 0;\n\tprivate static thresholdDefault = \"WARN\";\n\n\t/**\n\t * Event triggered when the appender could not send log messages to the server.\n\t * @param message error message\n\t */\n\tpublic appenderFailed: EventEmitter;\n\n\tprivate ajaxAppender: log4javascript.AjaxAppender;\n\tprivate url: string;\n\n\t/**\n\t * Creates a new instance of the appender.\n\t * @param configuration configuration for the appender.\n\t */\n\tconstructor(configuration: AjaxAppenderConfiguration) {\n\t\tsuper();\n\n\t\tif (!configuration) {\n\t\t\tthrow new Error(\"configuration must be not empty\");\n\t\t}\n\t\tif (!configuration.url) {\n\t\t\tthrow new Error(\"url must be not empty\");\n\t\t}\n\t\tthis.ajaxAppender = new log4javascript.AjaxAppender(configuration.url);\n\t\tthis.url = configuration.url;\n\n\t\tthis.ajaxAppender.setLayout(new log4javascript.JsonLayout(false, false));\n\t\tthis.ajaxAppender.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\t\tthis.ajaxAppender.setSendAllOnUnload(true);\n\n\t\tthis.appenderFailed = new EventEmitter();\n\t\tthis.ajaxAppender.setFailCallback((message: any) => {\n\t\t\tthis.appenderFailed.emit(message);\n\t\t});\n\n\t\t// process remaining configuration\n\t\tthis.configure({\n\t\t\tbatchSize: configuration.batchSize || AjaxAppender.batchSizeDefault,\n\t\t\tthreshold: configuration.threshold || AjaxAppender.thresholdDefault,\n\t\t\ttimerInterval: configuration.timerInterval || AjaxAppender.timerIntervalDefault,\n\t\t\turl: configuration.url,\n\t\t});\n\n\t}\n\n\t/**\n\t * Configures the logging depending on the given configuration.\n\t *\n\t * Only the defined properties get overwritten.\n\t * The url cannot be modified.\n\t *\n\t * @param configuration configuration data.\n\t */\n\tpublic configure(configuration: AjaxAppenderConfiguration): void {\n\t\tif (configuration) {\n\t\t\tif (configuration.url && configuration.url !== this.url) {\n\t\t\t\tthrow new Error(\"url must not be changed\");\n\t\t\t}\n\t\t\tif (configuration.batchSize) {\n\t\t\t\tthis.setBatchSize(configuration.batchSize);\n\t\t\t}\n\t\t\tif (typeof configuration.timerInterval === \"number\") {\n\t\t\t\tthis.setTimerInterval(configuration.timerInterval);\n\t\t\t}\n\t\t\tif (configuration.threshold) {\n\t\t\t\tconst convertedThreshold = LogLevelConverter.levelToLog4Javascript(\n\t\t\t\t\tLogLevelConverter.levelFromString(configuration.threshold));\n\t\t\t\tthis.setThreshold(convertedThreshold);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Appender-specific method to append a log message.\n\t * @param loggingEvent event to be appended.\n\t */\n\tpublic append(loggingEvent: log4javascript.LoggingEvent): void {\n\t\tthis.ajaxAppender.append(loggingEvent);\n\t}\n\n\t/**\n\t * Gets the appender's name.\n\t * Mainly for unit testing purposes.\n\t * @return appender's name\n\t */\n\tpublic toString(): string {\n\t\treturn \"Ionic.Logging.AjaxAppender\";\n\t}\n\n\t/**\n\t * Get the internally used appender.\n\t * Mainly for unit testing purposes.\n\t */\n\tpublic getInternalAppender(): log4javascript.AjaxAppender {\n\t\treturn this.ajaxAppender;\n\t}\n\n\t/**\n\t * Returns the number of log messages sent in each request.\n\t */\n\tpublic getBatchSize(): number {\n\t\treturn this.ajaxAppender.getBatchSize();\n\t}\n\n\t/**\n\t * Sets the number of log messages to send in each request.\n\t * @param batchSize new batch size\n\t */\n\tpublic setBatchSize(batchSize: number): void {\n\t\tthis.ajaxAppender.setBatchSize(batchSize);\n\t}\n\n\t/**\n\t * Returns the appender's layout.\n\t */\n\tpublic getLayout(): log4javascript.Layout {\n\t\treturn this.ajaxAppender.getLayout();\n\t}\n\n\t/**\n\t * Sets the appender's layout.\n\t */\n\tpublic setLayout(layout: log4javascript.Layout): void {\n\t\tthis.ajaxAppender.setLayout(layout);\n\t}\n\n\t/**\n\t * Returns the length of time in milliseconds between each sending of queued log messages.\n\t */\n\tpublic getTimerInterval(): number {\n\t\treturn this.ajaxAppender.getTimerInterval();\n\t}\n\n\t/**\n\t * Sets the length of time in milliseconds between each sending of queued log messages.\n\t * @param timerInterval new timer interval\n\t */\n\tpublic setTimerInterval(timerInterval: number): void {\n\t\tthis.ajaxAppender.setTimed(timerInterval > 0);\n\t\tthis.ajaxAppender.setTimerInterval(timerInterval);\n\t}\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AjaxAppenderConfiguration.html":{"url":"interfaces/AjaxAppenderConfiguration.html","title":"interface - AjaxAppenderConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AjaxAppenderConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ajax-appender.configuration.ts\n        \n\n            \n                Description\n            \n            \n                Configuration for AjaxAppender.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        batchSize\n                                \n                                \n                                            Optional\n                                        threshold\n                                \n                                \n                                            Optional\n                                        timerInterval\n                                \n                                \n                                        url\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        batchSize\n                                    \n                                \n                                \n                                    \n                                        batchSize:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Number of log messages sent in each request.\nDefault: 1.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        threshold\n                                    \n                                \n                                \n                                    \n                                        threshold:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Threshold.\nValid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN\nDefault: WARN.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timerInterval\n                                    \n                                \n                                \n                                    \n                                        timerInterval:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Interval for sending log messages (in milliseconds).\nIf set to 0, every message will be sent immediatedly.\nDefault: 0.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Url to send JavaScript logs\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface AjaxAppenderConfiguration {\n\n\t/**\n\t * Url to send JavaScript logs\n\t */\n\turl: string;\n\n\t/**\n\t * Number of log messages sent in each request.\n\t *\n\t * Default: 1.\n\t */\n\tbatchSize?: number;\n\n\t/**\n\t * Interval for sending log messages (in milliseconds).\n\t *\n\t * If set to 0, every message will be sent immediatedly.\n\t *\n\t * Default: 0.\n\t */\n\ttimerInterval?: number;\n\n\t/**\n\t * Threshold.\n\t *\n\t * Valid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN\n\t *\n\t * Default: WARN.\n\t */\n\tthreshold?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BrowserConsoleAppenderConfiguration.html":{"url":"interfaces/BrowserConsoleAppenderConfiguration.html","title":"interface - BrowserConsoleAppenderConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  BrowserConsoleAppenderConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/browser-console-appender.configuration.ts\n        \n\n            \n                Description\n            \n            \n                Configuration for BrowserConsoleAppender.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        threshold\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        threshold\n                                    \n                                \n                                \n                                    \n                                        threshold:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Threshold.\nValid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN\nDefault: DEBUG.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface BrowserConsoleAppenderConfiguration {\n\t/**\n\t * Threshold.\n\t *\n\t * Valid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN\n\t *\n\t * Default: DEBUG.\n\t */\n\tthreshold?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LocalStorageAppender.html":{"url":"classes/LocalStorageAppender.html","title":"class - LocalStorageAppender","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LocalStorageAppender\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/local-storage-appender.model.ts\n        \n\n            \n                Description\n            \n            \n                An appender which stores the log messages in the browser's local storage.\nThe messages are saved JSON-serialized.\nYou have to configure which key is used for storing the messages.\nA typical configuration could be:\n```json\n\n{\n\"localStorageKey\": \"myLogs\",\n\"maxMessages\": 500,\n\"threshold\": \"INFO\"\n}\n```\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                append\n                            \n                            \n                                    Public\n                                clearLog\n                            \n                            \n                                    Public\n                                configure\n                            \n                            \n                                    Public\n                                getLocalStorageKey\n                            \n                            \n                                    Public\n                                getLogMessages\n                            \n                            \n                                    Public\n                                getMaxMessages\n                            \n                            \n                                    Static\n                                loadLogMessages\n                            \n                            \n                                    Static\n                                removeLogMessages\n                            \n                            \n                                    Public\n                                setMaxMessages\n                            \n                            \n                                    Public\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configuration: LocalStorageAppenderConfiguration)\n                    \n                \n                        \n                            \n                                Defined in src/lib/local-storage-appender.model.ts:34\n                            \n                        \n\n                \n                    \n                            Creates a new instance of the appender.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configuration\n                                                  \n                                                        \n                                                                        LocalStorageAppenderConfiguration\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                configuration for the appender.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            append\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    append(loggingEvent: log4javascript.LoggingEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:121\n                \n            \n\n\n            \n                \n                    Appender-specific method to append a log message.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    loggingEvent\n                                    \n                                            log4javascript.LoggingEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        event to be appended.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            clearLog\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clearLog()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:198\n                \n            \n\n\n            \n                \n                    Removes all messages from local storage.\nMainly for unit testing purposes.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            configure\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(configuration: LocalStorageAppenderConfiguration)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:101\n                \n            \n\n\n            \n                \n                    Configures the logging depending on the given configuration.\nOnly the defined properties get overwritten.\nThe localStorageKey cannot be modified.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    configuration\n                                    \n                                                LocalStorageAppenderConfiguration\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        configuration data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLocalStorageKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLocalStorageKey()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:152\n                \n            \n\n\n            \n                \n                    Get the key which is used to store the messages in the local storage.\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLogMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLogMessages()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:190\n                \n            \n\n\n            \n                \n                    Gets all messages stored in local storage.\nMainly for unit testing purposes.\n\n\n                    \n                    \n                    \n                        Returns :         LogMessage[]\n\n                    \n                    \n                        stored messages\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMaxMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMaxMessages()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:159\n                \n            \n\n\n            \n                \n                    Get the maximum number of messages which will be stored in local storage.\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            loadLogMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    loadLogMessages(localStorageKey: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:69\n                \n            \n\n\n            \n                \n                    Load log messages from local storage which are stored there under the given key.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    localStorageKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        local storage key\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         LogMessage[]\n\n                    \n                    \n                        stored messages\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            removeLogMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeLogMessages(localStorageKey: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:89\n                \n            \n\n\n            \n                \n                    Remove log messages from local storage which are stored there under the given key.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    localStorageKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        local storage key\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setMaxMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setMaxMessages(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:169\n                \n            \n\n\n            \n                \n                    Set the maximum number of messages which will be stored in local storage.\nIf the appender stores currently more messages than the new value allows, the oldest messages get removed.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        new maximum number\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            toString\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toString()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:145\n                \n            \n\n\n            \n                \n                    Gets the appender's name.\nMainly for unit testing purposes.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        appender's name\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as log4javascript from \"log4javascript\";\n\nimport { LocalStorageAppenderConfiguration } from \"./local-storage-appender.configuration\";\nimport { LogLevelConverter } from \"./log-level.converter\";\nimport { LogLevel } from \"./log-level.model\";\nimport { LogMessage } from \"./log-message.model\";\n\n/**\n * An appender which stores the log messages in the browser's local storage.\n *\n * The messages are saved JSON-serialized.\n * You have to configure which key is used for storing the messages.\n *\n * A typical configuration could be:\n *\n * ```json\n * {\n *   \"localStorageKey\": \"myLogs\",\n *   \"maxMessages\": 500,\n *   \"threshold\": \"INFO\"\n * }\n * ```\n */\nexport class LocalStorageAppender extends log4javascript.Appender {\n\n\tprivate static maxMessagesDefault = 250;\n\tprivate static thresholdDefault = \"WARN\";\n\n\tprivate maxMessages: number;\n\n\t// tslint:disable-next-line:completed-docs\n\tprivate localStorageKey: string;\n\t// tslint:disable-next-line:completed-docs\n\tprivate logMessages: LogMessage[];\n\n\t/**\n\t * Creates a new instance of the appender.\n\t * @param configuration configuration for the appender.\n\t */\n\tconstructor(configuration: LocalStorageAppenderConfiguration) {\n\t\tsuper();\n\n\t\tif (!configuration) {\n\t\t\tthrow new Error(\"configuration must be not empty\");\n\t\t}\n\t\t// tslint:disable-next-line:no-null-keyword\n\t\tif (!configuration.localStorageKey || configuration.localStorageKey === \"\") {\n\t\t\tthrow new Error(\"localStorageKey must be not empty\");\n\t\t}\n\t\tthis.localStorageKey = configuration.localStorageKey;\n\n\t\t// read existing logMessages\n\t\t// tslint:disable-next-line:no-null-keyword\n\t\tthis.logMessages = LocalStorageAppender.loadLogMessages(this.localStorageKey);\n\n\t\t// process remaining configuration\n\t\tthis.configure({\n\t\t\tlocalStorageKey: configuration.localStorageKey,\n\t\t\tmaxMessages: configuration.maxMessages || LocalStorageAppender.maxMessagesDefault,\n\t\t\tthreshold: configuration.threshold || LocalStorageAppender.thresholdDefault,\n\t\t});\n\t}\n\n\t/**\n\t * Load log messages from local storage which are stored there under the given key.\n\t * @param localStorageKey local storage key\n\t * @return stored messages\n\t */\n\tpublic static loadLogMessages(localStorageKey: string): LogMessage[] {\n\t\tlet logMessages: LogMessage[];\n\n\t\tif (!localStorageKey || localStorage.getItem(localStorageKey) === null) {\n\t\t\tlogMessages = [];\n\t\t} else {\n\t\t\tlogMessages = JSON.parse(localStorage.getItem(localStorageKey));\n\t\t\tfor (const logMessage of logMessages) {\n\t\t\t\t// timestamps are serialized as strings\n\t\t\t\tlogMessage.timeStamp = new Date(logMessage.timeStamp);\n\t\t\t}\n\t\t}\n\n\t\treturn logMessages;\n\t}\n\n\t/**\n\t * Remove log messages from local storage which are stored there under the given key.\n\t * @param localStorageKey local storage key\n\t */\n\tpublic static removeLogMessages(localStorageKey: string) {\n\t\tlocalStorage.removeItem(localStorageKey);\n\t}\n\n\t/**\n\t * Configures the logging depending on the given configuration.\n\t *\n\t * Only the defined properties get overwritten.\n\t * The localStorageKey cannot be modified.\n\t *\n\t * @param configuration configuration data.\n\t */\n\tpublic configure(configuration: LocalStorageAppenderConfiguration): void {\n\t\tif (configuration) {\n\t\t\tif (configuration.localStorageKey && configuration.localStorageKey !== this.localStorageKey) {\n\t\t\t\tthrow new Error(\"localStorageKey must not be changed\");\n\t\t\t}\n\t\t\tif (configuration.maxMessages) {\n\t\t\t\tthis.setMaxMessages(configuration.maxMessages);\n\t\t\t}\n\t\t\tif (configuration.threshold) {\n\t\t\t\tconst convertedThreshold = LogLevelConverter.levelToLog4Javascript(\n\t\t\t\t\tLogLevelConverter.levelFromString(configuration.threshold));\n\t\t\t\tthis.setThreshold(convertedThreshold);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Appender-specific method to append a log message.\n\t * @param loggingEvent event to be appended.\n\t */\n\tpublic append(loggingEvent: log4javascript.LoggingEvent): void {\n\t\t// if logMessages is already full, remove oldest element\n\t\twhile (this.logMessages.length >= this.maxMessages) {\n\t\t\tthis.logMessages.shift();\n\t\t}\n\t\t// add event to logMessages\n\t\tconst message: LogMessage = {\n\t\t\tlevel: LogLevel[LogLevelConverter.levelFromLog4Javascript(loggingEvent.level)],\n\t\t\tlogger: typeof loggingEvent.logger !== \"undefined\" ? loggingEvent.logger.name : undefined,\n\t\t\tmessage: loggingEvent.messages.slice(1),\n\t\t\tmethodName: loggingEvent.messages[0],\n\t\t\ttimeStamp: loggingEvent.timeStamp,\n\t\t};\n\t\tthis.logMessages.push(message);\n\n\t\t// write values to localStorage\n\t\tlocalStorage.setItem(this.localStorageKey, JSON.stringify(this.logMessages));\n\t}\n\n\t/**\n\t * Gets the appender's name.\n\t * Mainly for unit testing purposes.\n\t * @return appender's name\n\t */\n\tpublic toString(): string {\n\t\treturn \"Ionic.Logging.LocalStorageAppender\";\n\t}\n\n\t/**\n\t * Get the key which is used to store the messages in the local storage.\n\t */\n\tpublic getLocalStorageKey(): string {\n\t\treturn this.localStorageKey;\n\t}\n\n\t/**\n\t * Get the maximum number of messages which will be stored in local storage.\n\t */\n\tpublic getMaxMessages(): number {\n\t\treturn this.maxMessages;\n\t}\n\n\t/**\n\t * Set the maximum number of messages which will be stored in local storage.\n\t *\n\t * If the appender stores currently more messages than the new value allows, the oldest messages get removed.\n\t * @param value new maximum number\n\t */\n\tpublic setMaxMessages(value: number): void {\n\t\tif (this.maxMessages !== value) {\n\t\t\tthis.maxMessages = value;\n\n\t\t\tif (this.logMessages.length > this.maxMessages) {\n\t\t\t\t// there are too much logMessages for the new value, therefore remove oldest messages\n\t\t\t\twhile (this.logMessages.length > this.maxMessages) {\n\t\t\t\t\tthis.logMessages.shift();\n\t\t\t\t}\n\n\t\t\t\t// write values to localStorage\n\t\t\t\tlocalStorage.setItem(this.localStorageKey, JSON.stringify(this.logMessages));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Gets all messages stored in local storage.\n\t * Mainly for unit testing purposes.\n\t * @return stored messages\n\t */\n\tpublic getLogMessages(): LogMessage[] {\n\t\treturn this.logMessages;\n\t}\n\n\t/**\n\t * Removes all messages from local storage.\n\t * Mainly for unit testing purposes.\n\t */\n\tpublic clearLog(): void {\n\t\tthis.logMessages = [];\n\t\tlocalStorage.removeItem(this.localStorageKey);\n\t}\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LocalStorageAppenderConfiguration.html":{"url":"interfaces/LocalStorageAppenderConfiguration.html","title":"interface - LocalStorageAppenderConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  LocalStorageAppenderConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/local-storage-appender.configuration.ts\n        \n\n            \n                Description\n            \n            \n                Configuration for LocalStorageAppender.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        localStorageKey\n                                \n                                \n                                            Optional\n                                        maxMessages\n                                \n                                \n                                            Optional\n                                        threshold\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        localStorageKey\n                                    \n                                \n                                \n                                    \n                                        localStorageKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Key which is used to store the messages in the local storage.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxMessages\n                                    \n                                \n                                \n                                    \n                                        maxMessages:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Maximum number of log messages stored by the appender.\nDefault: 250.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        threshold\n                                    \n                                \n                                \n                                    \n                                        threshold:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Threshold.\nValid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN\nDefault: WARN.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface LocalStorageAppenderConfiguration {\n\t/**\n\t * Key which is used to store the messages in the local storage.\n\t */\n\tlocalStorageKey: string;\n\n\t/**\n\t * Maximum number of log messages stored by the appender.\n\t *\n\t * Default: 250.\n\t */\n\tmaxMessages?: number;\n\n\t/**\n\t * Threshold.\n\t *\n\t * Valid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN\n\t *\n\t * Default: WARN.\n\t */\n\tthreshold?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LogLevelConverter.html":{"url":"classes/LogLevelConverter.html","title":"class - LogLevelConverter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LogLevelConverter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/log-level.converter.ts\n        \n\n            \n                Description\n            \n            \n                Helper class for converting log levels from and to different data type.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                levelFromLog4Javascript\n                            \n                            \n                                    Static\n                                levelFromString\n                            \n                            \n                                    Static\n                                levelToLog4Javascript\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            levelFromLog4Javascript\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    levelFromLog4Javascript(level: log4javascript.Level)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/log-level.converter.ts:15\n                \n            \n\n\n            \n                \n                    Converts log4javascript.Level to internal LogLevel.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    level\n                                    \n                                            log4javascript.Level\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        log4javascript's data type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         LogLevel\n\n                    \n                    \n                        internal data type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            levelFromString\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    levelFromString(level: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/log-level.converter.ts:43\n                \n            \n\n\n            \n                \n                    Converts string representation to internal LogLevel.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    level\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        string representation\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         LogLevel\n\n                    \n                    \n                        internal data type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            levelToLog4Javascript\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    levelToLog4Javascript(level: LogLevel)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/log-level.converter.ts:71\n                \n            \n\n\n            \n                \n                    Converts internal LogLevel to log4javascript.Level.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    level\n                                    \n                                                LogLevel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     log4javascript.Level\n\n                    \n                    \n                        level log4javascript's data type\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as log4javascript from \"log4javascript\";\n\nimport { LogLevel } from \"./log-level.model\";\n\n/**\n * Helper class for converting log levels from and to different data type.\n */\nexport class LogLevelConverter {\n\n\t/**\n\t * Converts log4javascript.Level to internal LogLevel.\n\t * @param level log4javascript's data type\n\t * @return internal data type.\n\t */\n\tpublic static levelFromLog4Javascript(level: log4javascript.Level): LogLevel {\n\t\tswitch (level) {\n\t\t\tcase log4javascript.Level.ALL:\n\t\t\t\treturn LogLevel.ALL;\n\t\t\tcase log4javascript.Level.DEBUG:\n\t\t\t\treturn LogLevel.DEBUG;\n\t\t\tcase log4javascript.Level.ERROR:\n\t\t\t\treturn LogLevel.ERROR;\n\t\t\tcase log4javascript.Level.FATAL:\n\t\t\t\treturn LogLevel.FATAL;\n\t\t\tcase log4javascript.Level.INFO:\n\t\t\t\treturn LogLevel.INFO;\n\t\t\tcase log4javascript.Level.OFF:\n\t\t\t\treturn LogLevel.OFF;\n\t\t\tcase log4javascript.Level.TRACE:\n\t\t\t\treturn LogLevel.TRACE;\n\t\t\tcase log4javascript.Level.WARN:\n\t\t\t\treturn LogLevel.WARN;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`invalid level ${level}`);\n\t\t}\n\t}\n\n\t/**\n\t * Converts string representation to internal LogLevel.\n\t * @param level string representation\n\t * @return internal data type.\n\t */\n\tpublic static levelFromString(level: string): LogLevel {\n\t\tswitch (level) {\n\t\t\tcase \"ALL\":\n\t\t\t\treturn LogLevel.ALL;\n\t\t\tcase \"DEBUG\":\n\t\t\t\treturn LogLevel.DEBUG;\n\t\t\tcase \"ERROR\":\n\t\t\t\treturn LogLevel.ERROR;\n\t\t\tcase \"FATAL\":\n\t\t\t\treturn LogLevel.FATAL;\n\t\t\tcase \"INFO\":\n\t\t\t\treturn LogLevel.INFO;\n\t\t\tcase \"OFF\":\n\t\t\t\treturn LogLevel.OFF;\n\t\t\tcase \"TRACE\":\n\t\t\t\treturn LogLevel.TRACE;\n\t\t\tcase \"WARN\":\n\t\t\t\treturn LogLevel.WARN;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`invalid level ${level}`);\n\t\t}\n\t}\n\n\t/**\n\t * Converts internal LogLevel to log4javascript.Level.\n\t * @param internal data type.\n\t * @return level log4javascript's data type\n\t */\n\tpublic static levelToLog4Javascript(level: LogLevel): log4javascript.Level {\n\t\tswitch (level) {\n\t\t\tcase LogLevel.ALL:\n\t\t\t\treturn log4javascript.Level.ALL;\n\t\t\tcase LogLevel.DEBUG:\n\t\t\t\treturn log4javascript.Level.DEBUG;\n\t\t\tcase LogLevel.ERROR:\n\t\t\t\treturn log4javascript.Level.ERROR;\n\t\t\tcase LogLevel.FATAL:\n\t\t\t\treturn log4javascript.Level.FATAL;\n\t\t\tcase LogLevel.INFO:\n\t\t\t\treturn log4javascript.Level.INFO;\n\t\t\tcase LogLevel.OFF:\n\t\t\t\treturn log4javascript.Level.OFF;\n\t\t\tcase LogLevel.TRACE:\n\t\t\t\treturn log4javascript.Level.TRACE;\n\t\t\tcase LogLevel.WARN:\n\t\t\t\treturn log4javascript.Level.WARN;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`invalid level ${level}`);\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LogMessage.html":{"url":"interfaces/LogMessage.html","title":"interface - LogMessage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  LogMessage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/log-message.model.ts\n        \n\n            \n                Description\n            \n            \n                Log message.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        level\n                                \n                                \n                                        logger\n                                \n                                \n                                        message\n                                \n                                \n                                        methodName\n                                \n                                \n                                        timeStamp\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        level\n                                    \n                                \n                                \n                                    \n                                        level:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Log level.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logger\n                                    \n                                \n                                \n                                    \n                                        logger:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of the logger.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Message.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        methodName\n                                    \n                                \n                                \n                                    \n                                        methodName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Method, in which the message was written.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timeStamp\n                                    \n                                \n                                \n                                    \n                                        timeStamp:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Time when the log was written.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface LogMessage {\n\t/**\n\t * Time when the log was written.\n\t */\n\ttimeStamp: Date;\n\n\t/**\n\t * Log level.\n\t */\n\tlevel: string;\n\n\t/**\n\t * Name of the logger.\n\t */\n\tlogger: string;\n\n\t/**\n\t * Method, in which the message was written.\n\t */\n\tmethodName: string;\n\n\t/**\n\t * Message.\n\t */\n\tmessage: string[];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Logger.html":{"url":"classes/Logger.html","title":"class - Logger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Logger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/logger.model.ts\n        \n\n            \n                Description\n            \n            \n                Logger for writing log messages.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                debug\n                            \n                            \n                                    Public\n                                entry\n                            \n                            \n                                    Public\n                                error\n                            \n                            \n                                    Public\n                                exit\n                            \n                            \n                                    Public\n                                fatal\n                            \n                            \n                                    Public\n                                formatArgument\n                            \n                            \n                                    Public\n                                getInternalLogger\n                            \n                            \n                                    Public\n                                getLogLevel\n                            \n                            \n                                    Public\n                                info\n                            \n                            \n                                    Public\n                                setLogLevel\n                            \n                            \n                                    Public\n                                trace\n                            \n                            \n                                    Public\n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger?: string | any)\n                    \n                \n                        \n                            \n                                Defined in src/lib/logger.model.ts:11\n                            \n                        \n\n                \n                    \n                            Creates a new instance of a logger.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    string | any\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            debug\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    debug(methodName: string, ...params: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:64\n                \n            \n\n\n            \n                \n                    Logs a message at level DEBUG.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    methodName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the method\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        optional parameters to be logged; objects will be formatted as JSON\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            entry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    entry(methodName: string, ...params: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:145\n                \n            \n\n\n            \n                \n                    Logs the entry into a method.\nThe method name will be logged at level INFO, the parameters at level DEBUG.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    methodName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the method\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        optional parameters to be logged; objects will be formatted as JSON\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            error\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    error(methodName: string, ...params: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:112\n                \n            \n\n\n            \n                \n                    Logs a message at level ERROR.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    methodName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the method\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        optional parameters to be logged; objects will be formatted as JSON\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            exit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    exit(methodName: string, ...params: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:164\n                \n            \n\n\n            \n                \n                    Logs the exit of a method.\nThe method name will be logged at level INFO, the parameters at level DEBUG.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    methodName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the method\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        optional parameters to be logged; objects will be formatted as JSON\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            fatal\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fatal(methodName: string, ...params: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:128\n                \n            \n\n\n            \n                \n                    Logs a message at level FATAL.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    methodName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the method\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        optional parameters to be logged; objects will be formatted as JSON\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            formatArgument\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    formatArgument(arg: any)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:179\n                \n            \n\n\n            \n                \n                    Formats the given argument.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    arg\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getInternalLogger\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getInternalLogger()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:199\n                \n            \n\n\n            \n                \n                    Returns the internal Logger (for unit tests only).\n\n\n                    \n                        Returns :         log4javascript.Logger\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLogLevel\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLogLevel()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:29\n                \n            \n\n\n            \n                \n                    Get the log level.\n\n\n                    \n                        Returns :         LogLevel\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            info\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    info(methodName: string, ...params: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:80\n                \n            \n\n\n            \n                \n                    Logs a message at level INFO.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    methodName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the method\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        optional parameters to be logged; objects will be formatted as JSON\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setLogLevel\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setLogLevel(level: LogLevel)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:38\n                \n            \n\n\n            \n                \n                    Set the log level.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    level\n                                    \n                                                LogLevel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the new log level\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            trace\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    trace(methodName: string, ...params: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:48\n                \n            \n\n\n            \n                \n                    Logs a message at level TRACE.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    methodName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the method\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        optional parameters to be logged; objects will be formatted as JSON\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            warn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    warn(methodName: string, ...params: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:96\n                \n            \n\n\n            \n                \n                    Logs a message at level WARN.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    methodName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the method\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        optional parameters to be logged; objects will be formatted as JSON\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as log4javascript from \"log4javascript\";\n\nimport { LogLevelConverter } from \"./log-level.converter\";\nimport { LogLevel } from \"./log-level.model\";\n\n/**\n * Logger for writing log messages.\n */\nexport class Logger {\n\n\tprivate logger: log4javascript.Logger;\n\n\t/**\n\t * Creates a new instance of a logger.\n\t */\n\tconstructor(logger?: string | any) {\n\t\tif (typeof logger === \"undefined\") {\n\t\t\tthis.logger = log4javascript.getRootLogger();\n\t\t} else if (typeof logger === \"string\") {\n\t\t\tthis.logger = log4javascript.getLogger(logger);\n\t\t} else {\n\t\t\tthis.logger = logger;\n\t\t}\n\t}\n\n\t/**\n\t * Get the log level.\n\t */\n\tpublic getLogLevel(): LogLevel {\n\t\treturn LogLevelConverter.levelFromLog4Javascript(this.logger.getLevel());\n\t}\n\n\t/**\n\t * Set the log level.\n\t *\n\t * @param level the new log level\n\t */\n\tpublic setLogLevel(level: LogLevel): void {\n\t\tthis.logger.setLevel(LogLevelConverter.levelToLog4Javascript(level));\n\t}\n\n\t/**\n\t * Logs a message at level TRACE.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic trace(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isTraceEnabled()) {\n\t\t\tconst args = [methodName];\n\t\t\tfor (const param of params) {\n\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t}\n\t\t\tthis.logger.trace.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Logs a message at level DEBUG.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic debug(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isDebugEnabled()) {\n\t\t\tconst args = [methodName];\n\t\t\tfor (const param of params) {\n\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t}\n\t\t\tthis.logger.debug.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Logs a message at level INFO.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic info(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isInfoEnabled()) {\n\t\t\tconst args = [methodName];\n\t\t\tfor (const param of params) {\n\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t}\n\t\t\tthis.logger.info.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Logs a message at level WARN.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic warn(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isWarnEnabled()) {\n\t\t\tconst args = [methodName];\n\t\t\tfor (const param of params) {\n\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t}\n\t\t\tthis.logger.warn.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Logs a message at level ERROR.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic error(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isErrorEnabled()) {\n\t\t\tconst args = [methodName];\n\t\t\tfor (const param of params) {\n\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t}\n\t\t\tthis.logger.error.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Logs a message at level FATAL.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic fatal(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isFatalEnabled()) {\n\t\t\tconst args = [methodName];\n\t\t\tfor (const param of params) {\n\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t}\n\t\t\tthis.logger.fatal.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Logs the entry into a method.\n\t * The method name will be logged at level INFO, the parameters at level DEBUG.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic entry(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isInfoEnabled()) {\n\t\t\tconst args = [methodName, \"entry\"];\n\t\t\tif (this.logger.isDebugEnabled()) {\n\t\t\t\tfor (const param of params) {\n\t\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.logger.info.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Logs the exit of a method.\n\t * The method name will be logged at level INFO, the parameters at level DEBUG.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic exit(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isInfoEnabled()) {\n\t\t\tconst args = [methodName, \"exit\"];\n\t\t\tif (this.logger.isDebugEnabled()) {\n\t\t\t\tfor (const param of params) {\n\t\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.logger.info.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Formats the given argument.\n\t */\n\tpublic formatArgument(arg: any): string {\n\t\tif (typeof arg === \"string\") {\n\t\t\treturn arg;\n\t\t} else if (typeof arg === \"number\") {\n\t\t\treturn arg.toString();\n\t\t} else if (arg instanceof Error) {\n\t\t\t// JSON.stringify() returns here \"{ }\"\n\t\t\treturn arg.toString();\n\t\t} else {\n\t\t\ttry {\n\t\t\t\treturn JSON.stringify(arg);\n\t\t\t} catch (e) {\n\t\t\t\treturn e.message;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns the internal Logger (for unit tests only).\n\t */\n\tpublic getInternalLogger(): log4javascript.Logger {\n\t\treturn this.logger;\n\t}\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingService.html":{"url":"injectables/LoggingService.html","title":"injectable - LoggingService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LoggingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/logging.service.ts\n        \n\n            \n                Description\n            \n            \n                Service for logging functionality.\nBy default, the following settings are used:\n\nlogger: root with level WARN\nappender: BrowserConsoleAppender with threshold DEBUG and MemoryAppender with threshold ALL\n\nVia configure, it is possible to amend these settings.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                ajaxAppenderFailed\n                            \n                            \n                                    Public\n                                logMessagesChanged\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                configure\n                            \n                            \n                                    Public\n                                getLogger\n                            \n                            \n                                    Public\n                                getLogMessages\n                            \n                            \n                                    Public\n                                getLogMessagesFromLocalStorage\n                            \n                            \n                                    Public\n                                getRootLogger\n                            \n                            \n                                    Public\n                                removeLogMessages\n                            \n                            \n                                    Public\n                                removeLogMessagesFromLocalStorage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/lib/logging.service.ts:44\n                            \n                        \n\n                \n                    \n                            Creates a new instance of the service.\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            configure\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(configuration?: LoggingServiceConfiguration)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logging.service.ts:83\n                \n            \n\n\n            \n                \n                    Configures the logging depending on the given configuration.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    configuration\n                                    \n                                                LoggingServiceConfiguration\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        configuration data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLogger\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLogger(loggerName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logging.service.ts:158\n                \n            \n\n\n            \n                \n                    Gets a logger with the specified name, creating it if a logger with that name does not already exist.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    loggerName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the logger\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Logger\n\n                    \n                    \n                        logger\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLogMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLogMessages()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logging.service.ts:170\n                \n            \n\n\n            \n                \n                    Gets the last log messages.\nThe log messages are retrieved from the internal MemoryAppender.\nThat means you will get only the most current messages. The number of the messages is limited\nby its maxMessages value.\n\n\n                    \n                    \n                    \n                        Returns :         LogMessage[]\n\n                    \n                    \n                        log messages\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLogMessagesFromLocalStorage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLogMessagesFromLocalStorage(localStorageKey: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logging.service.ts:179\n                \n            \n\n\n            \n                \n                    Loads the log messages written by the LocalStorageAppender with the given key.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    localStorageKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        key for the local storage\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         LogMessage[]\n\n                    \n                    \n                        log messages\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getRootLogger\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRootLogger()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logging.service.ts:149\n                \n            \n\n\n            \n                \n                    Gets the root logger from which all other loggers derive.\n\n\n                    \n                    \n                    \n                        Returns :         Logger\n\n                    \n                    \n                        root logger\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removeLogMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeLogMessages()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logging.service.ts:186\n                \n            \n\n\n            \n                \n                    Remove all log messages.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removeLogMessagesFromLocalStorage\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeLogMessagesFromLocalStorage(localStorageKey: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logging.service.ts:195\n                \n            \n\n\n            \n                \n                    Removes the log messages written by the LocalStorageAppender with the given key.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    localStorageKey\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        key for the local storage\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            ajaxAppenderFailed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     EventEmitter\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/logging.service.ts:40\n                            \n                        \n\n                \n                    \n                        Event triggered when ajax appender could not send log messages to the server.\n\n                    \n                \n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                                    Description\n                                          \n                                      \n                                      \n                                                \n                                                        message\n                                                        \n                                                                error message\n\n                                                        \n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            logMessagesChanged\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     EventEmitter\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/logging.service.ts:34\n                            \n                        \n\n                \n                    \n                        Event triggered when the log messages got (potentially) change.\nThis can happen when:\n\nnew message was added\nall message where removed from memory\nall massages where removed for one spcific LocalStorageAppender\n\n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import { EventEmitter, Injectable, Optional } from \"@angular/core\";\n\nimport * as log4javascript from \"log4javascript\";\n\nimport { AjaxAppender } from \"./ajax-appender.model\";\nimport { LocalStorageAppender } from \"./local-storage-appender.model\";\nimport { LogLevelConverter } from \"./log-level.converter\";\nimport { LogMessage } from \"./log-message.model\";\nimport { Logger } from \"./logger.model\";\nimport { LoggingServiceConfiguration } from \"./logging-service.configuration\";\nimport { MemoryAppender } from \"./memory-appender.model\";\n\n/**\n * Service for logging functionality.\n *\n * By default, the following settings are used:\n *  - logger: root with level WARN\n *  - appender: BrowserConsoleAppender with threshold DEBUG and MemoryAppender with threshold ALL\n *\n * Via [configure](#configure), it is possible to amend these settings.\n */\n@Injectable({\n\tprovidedIn: \"root\"\n})\nexport class LoggingService {\n\n\t/**\n\t * Event triggered when the log messages got (potentially) change.\n\t * This can happen when:\n\t * - new message was added\n\t * - all message where removed from memory\n\t * - all massages where removed for one spcific LocalStorageAppender\n\t */\n\tpublic logMessagesChanged: EventEmitter;\n\n\t/**\n\t * Event triggered when ajax appender could not send log messages to the server.\n\t * @param message error message\n\t */\n\tpublic ajaxAppenderFailed: EventEmitter;\n\n\t// tslint:disable-next-line:completed-docs\n\tprivate memoryAppender: MemoryAppender;\n\tprivate browserConsoleAppender: log4javascript.BrowserConsoleAppender;\n\n\t/**\n\t * Creates a new instance of the service.\n\t */\n\tconstructor() {\n\n\t\t// prevent log4javascript to show alerts on case of errors\n\t\tlog4javascript.logLog.setQuietMode(true);\n\n\t\t// create event emitter\n\t\tthis.logMessagesChanged = new EventEmitter();\n\t\tthis.ajaxAppenderFailed = new EventEmitter();\n\n\t\t// configure appender\n\t\tconst logger = log4javascript.getRootLogger();\n\t\tlogger.setLevel(log4javascript.Level.WARN);\n\n\t\t// browser console appender for debugger\n\t\tthis.browserConsoleAppender = new log4javascript.BrowserConsoleAppender();\n\t\tthis.browserConsoleAppender.setLayout(new log4javascript.PatternLayout(\"%d{HH:mm:ss,SSS} %c %m\"));\n\t\tthis.browserConsoleAppender.setThreshold(log4javascript.Level.ALL);\n\t\tlogger.addAppender(this.browserConsoleAppender);\n\n\t\t// in-memory appender for display on log messages page\n\t\tthis.memoryAppender = new MemoryAppender();\n\t\tthis.memoryAppender.setLayout(new log4javascript.PatternLayout(\"%d{HH:mm:ss,SSS} %c %m\"));\n\t\tthis.memoryAppender.setOnLogMessagesChangedCallback((message) => {\n\t\t\tthis.logMessagesChanged.emit();\n\t\t});\n\t\tlogger.addAppender(this.memoryAppender);\n\n\t\tthis.configure();\n\t}\n\n\t/**\n\t * Configures the logging depending on the given configuration.\n\t * @param configuration configuration data.\n\t */\n\tpublic configure(configuration?: LoggingServiceConfiguration): void {\n\n\t\tif (typeof configuration === \"undefined\") {\n\t\t\tconfiguration = {};\n\t\t}\n\n\t\t// set log levels\n\t\tif (typeof configuration.logLevels !== \"undefined\") {\n\t\t\tfor (const level of configuration.logLevels) {\n\t\t\t\tlet logger: log4javascript.Logger;\n\t\t\t\tif (level.loggerName === \"root\") {\n\t\t\t\t\tlogger = log4javascript.getRootLogger();\n\t\t\t\t} else {\n\t\t\t\t\tlogger = log4javascript.getLogger(level.loggerName);\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\tlogger.setLevel(LogLevelConverter.levelToLog4Javascript(LogLevelConverter.levelFromString(level.logLevel)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthrow new Error(`invalid log level ${level.logLevel}`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// configure AjaxAppender\n\t\tif (typeof configuration.ajaxAppender !== \"undefined\") {\n\t\t\tconst ajaxAppender = new AjaxAppender(configuration.ajaxAppender);\n\t\t\tajaxAppender.appenderFailed.subscribe((message: string) => {\n\t\t\t\tthis.ajaxAppenderFailed.emit(message);\n\t\t\t});\n\t\t\tlog4javascript.getRootLogger().addAppender(ajaxAppender);\n\t\t}\n\n\t\t// configure LocalStorageAppender\n\t\tif (typeof configuration.localStorageAppender !== \"undefined\") {\n\t\t\tconst localStorageAppender = new LocalStorageAppender(configuration.localStorageAppender);\n\t\t\tlog4javascript.getRootLogger().addAppender(localStorageAppender);\n\n\t\t\t// ensure that an eventual memoryAppender is behind the localStorageAppender\n\t\t\tconst appenders = new Logger().getInternalLogger().getEffectiveAppenders();\n\t\t\tconst memoryAppender = appenders.find((a) => a.toString() === \"Ionic.Logging.MemoryAppender\") as MemoryAppender;\n\t\t\tif (memoryAppender) {\n\t\t\t\tlog4javascript.getRootLogger().removeAppender(memoryAppender);\n\t\t\t\tlog4javascript.getRootLogger().addAppender(memoryAppender);\n\t\t\t}\n\t\t}\n\n\t\t// configure MemoryAppender\n\t\tif (configuration.memoryAppender) {\n\t\t\tthis.memoryAppender.configure(configuration.memoryAppender);\n\t\t}\n\n\t\t// configure BrowserConsoleAppender\n\t\tif (configuration.browserConsoleAppender) {\n\t\t\tif (configuration.browserConsoleAppender.threshold) {\n\t\t\t\tconst convertedThreshold = LogLevelConverter.levelToLog4Javascript(\n\t\t\t\t\tLogLevelConverter.levelFromString(configuration.browserConsoleAppender.threshold));\n\t\t\t\tthis.browserConsoleAppender.setThreshold(convertedThreshold);\n\t\t\t}\n\t\t}\n\n\t}\n\n\t/**\n\t * Gets the root logger from which all other loggers derive.\n\t * @return root logger\n\t */\n\tpublic getRootLogger(): Logger {\n\t\treturn new Logger();\n\t}\n\n\t/**\n\t * Gets a logger with the specified name, creating it if a logger with that name does not already exist.\n\t * @param loggerName name of the logger\n\t * @return logger\n\t */\n\tpublic getLogger(loggerName: string): Logger {\n\t\treturn new Logger(loggerName);\n\t}\n\n\t/**\n\t * Gets the last log messages.\n\t *\n\t * The log messages are retrieved from the internal [MemoryAppender](../memoryappender.html).\n\t * That means you will get only the most current messages. The number of the messages is limited\n\t * by its maxMessages value.\n\t * @return log messages\n\t */\n\tpublic getLogMessages(): LogMessage[] {\n\t\treturn this.memoryAppender.getLogMessages();\n\t}\n\n\t/**\n\t * Loads the log messages written by the LocalStorageAppender with the given key.\n\t * @param localStorageKey key for the local storage\n\t * @returns log messages\n\t */\n\tpublic getLogMessagesFromLocalStorage(localStorageKey: string): LogMessage[] {\n\t\treturn LocalStorageAppender.loadLogMessages(localStorageKey);\n\t}\n\n\t/**\n\t * Remove all log messages.\n\t */\n\tpublic removeLogMessages(): void {\n\t\tthis.memoryAppender.removeLogMessages();\n\t\tthis.logMessagesChanged.emit();\n\t}\n\n\t/**\n\t * Removes the log messages written by the LocalStorageAppender with the given key.\n\t * @param localStorageKey key for the local storage\n\t */\n\tpublic removeLogMessagesFromLocalStorage(localStorageKey: string): void {\n\t\tLocalStorageAppender.removeLogMessages(localStorageKey);\n\t\tthis.logMessagesChanged.emit();\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoggingServiceConfiguration.html":{"url":"interfaces/LoggingServiceConfiguration.html","title":"interface - LoggingServiceConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  LoggingServiceConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/logging-service.configuration.ts\n        \n\n            \n                Description\n            \n            \n                Partial configuration definition for LoggingService.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        ajaxAppender\n                                \n                                \n                                            Optional\n                                        browserConsoleAppender\n                                \n                                \n                                            Optional\n                                        localStorageAppender\n                                \n                                \n                                            Optional\n                                        logLevels\n                                \n                                \n                                            Optional\n                                        memoryAppender\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ajaxAppender\n                                    \n                                \n                                \n                                    \n                                        ajaxAppender:         AjaxAppenderConfiguration\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AjaxAppenderConfiguration\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Settings for AjaxAppender.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        browserConsoleAppender\n                                    \n                                \n                                \n                                    \n                                        browserConsoleAppender:         BrowserConsoleAppenderConfiguration\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BrowserConsoleAppenderConfiguration\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Settings for BrowserConsoleAppender.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        localStorageAppender\n                                    \n                                \n                                \n                                    \n                                        localStorageAppender:         LocalStorageAppenderConfiguration\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         LocalStorageAppenderConfiguration\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Settings for LocalStorageAppender.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logLevels\n                                    \n                                \n                                \n                                    \n                                        logLevels:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Log levels for different loggers.\nDefault: root: WARN\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        memoryAppender\n                                    \n                                \n                                \n                                    \n                                        memoryAppender:         MemoryAppenderConfiguration\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MemoryAppenderConfiguration\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Settings for MemoryAppender.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { AjaxAppenderConfiguration } from \"./ajax-appender.configuration\";\nimport { BrowserConsoleAppenderConfiguration } from \"./browser-console-appender.configuration\";\nimport { LocalStorageAppenderConfiguration } from \"./local-storage-appender.configuration\";\nimport { MemoryAppenderConfiguration } from \"./memory-appender.configuration\";\n\n/**\n * Partial configuration definition for LoggingService.\n */\nexport interface LoggingServiceConfiguration {\n\n\t/**\n\t * Log levels for different loggers.\n\t * Default: root: WARN\n\t */\n\tlogLevels?: Array;\n\n\t/**\n\t * Settings for AjaxAppender.\n\t */\n\tajaxAppender?: AjaxAppenderConfiguration;\n\n\t/**\n\t * Settings for LocalStorageAppender.\n\t */\n\tlocalStorageAppender?: LocalStorageAppenderConfiguration;\n\n\t/**\n\t * Settings for MemoryAppender.\n\t */\n\tmemoryAppender?: MemoryAppenderConfiguration;\n\n\t/**\n\t * Settings for BrowserConsoleAppender.\n\t */\n\tbrowserConsoleAppender?: BrowserConsoleAppenderConfiguration;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LoggingServiceModule.html":{"url":"modules/LoggingServiceModule.html","title":"module - LoggingServiceModule","body":"\n                   \n\n\n\n\n    Modules\n    LoggingServiceModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/logging-service.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\n\n@NgModule({\n\timports: [\n\t],\n\tdeclarations: [\n\t],\n\texports: [\n\t]\n})\nexport class LoggingServiceModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MemoryAppender.html":{"url":"classes/MemoryAppender.html","title":"class - MemoryAppender","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MemoryAppender\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/memory-appender.model.ts\n        \n\n            \n                Description\n            \n            \n                An appender which stores the log messages in the browser's memory.\nThe MemoryAppender is enabled by default.\nIf you do not specify anything else, it is using this configuration:\n```JSON\n\n{\n\"memoryAppender\": [\n{\n\"maxMessages\": 250,\n\"threshold\": \"ALL\"\n}\n}\n```\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                append\n                            \n                            \n                                    Public\n                                configure\n                            \n                            \n                                    Public\n                                getLogMessages\n                            \n                            \n                                    Public\n                                getMaxMessages\n                            \n                            \n                                    Public\n                                removeLogMessages\n                            \n                            \n                                    Public\n                                setMaxMessages\n                            \n                            \n                                    Public\n                                setOnLogMessagesChangedCallback\n                            \n                            \n                                    Public\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configuration?: MemoryAppenderConfiguration)\n                    \n                \n                        \n                            \n                                Defined in src/lib/memory-appender.model.ts:34\n                            \n                        \n\n                \n                    \n                            Creates a new instance of the appender.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configuration\n                                                  \n                                                        \n                                                                        MemoryAppenderConfiguration\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                configuration for the appender.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            append\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    append(loggingEvent: log4javascript.LoggingEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/memory-appender.model.ts:78\n                \n            \n\n\n            \n                \n                    Appender-specific method to append a log message.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    loggingEvent\n                                    \n                                            log4javascript.LoggingEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        event to be appended.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            configure\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(configuration: MemoryAppenderConfiguration)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/memory-appender.model.ts:61\n                \n            \n\n\n            \n                \n                    Configures the logging depending on the given configuration.\nOnly the defined properties get overwritten.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    configuration\n                                    \n                                                MemoryAppenderConfiguration\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        configuration data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLogMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLogMessages()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/memory-appender.model.ts:134\n                \n            \n\n\n            \n                \n                    Gets all messages stored in memory.\n\n\n                    \n                    \n                    \n                        Returns :         LogMessage[]\n\n                    \n                    \n                        stored messages\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMaxMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMaxMessages()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/memory-appender.model.ts:111\n                \n            \n\n\n            \n                \n                    Get the maximum number of messages which will be stored in memory.\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            removeLogMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    removeLogMessages()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/memory-appender.model.ts:141\n                \n            \n\n\n            \n                \n                    Remove all messages stored in memory.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setMaxMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setMaxMessages(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/memory-appender.model.ts:121\n                \n            \n\n\n            \n                \n                    Set the maximum number of messages which will be stored in memory.\nIf the appender stores currently more messages than the new value allows, the oldest messages get removed.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        new maximum number\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setOnLogMessagesChangedCallback\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setOnLogMessagesChangedCallback(callback: (message: LogMessage) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/memory-appender.model.ts:150\n                \n            \n\n\n            \n                \n                    Registers a callback which will be called every time a new message is appended.\nThis could be useful if you want to show new messages in realtime.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        callback to be called\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            toString\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toString()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/memory-appender.model.ts:104\n                \n            \n\n\n            \n                \n                    Gets the appender's name.\nMainly for unit testing purposes.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        appender's name\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as log4javascript from \"log4javascript\";\n\nimport { LogLevelConverter } from \"./log-level.converter\";\nimport { LogLevel } from \"./log-level.model\";\nimport { LogMessage } from \"./log-message.model\";\nimport { MemoryAppenderConfiguration } from \"./memory-appender.configuration\";\n\n/**\n * An appender which stores the log messages in the browser's memory.\n *\n * The MemoryAppender is enabled by default.\n * If you do not specify anything else, it is using this configuration:\n *\n * ```JSON\n * {\n *   \"memoryAppender\": [\n *     {\n *       \"maxMessages\": 250,\n *       \"threshold\": \"ALL\"\n *     }\n * }\n * ```\n */\nexport class MemoryAppender extends log4javascript.Appender {\n\n\tprivate static maxMessagesDefault = 250;\n\tprivate static thresholdDefault = \"ALL\";\n\n\tprivate maxMessages: number;\n\n\t// tslint:disable-next-line:completed-docs\n\tprivate logMessages: LogMessage[];\n\t// tslint:disable-next-line:completed-docs\n\tprivate onLogMessagesChangedCallback: (message: LogMessage) => void;\n\n\t/**\n\t * Creates a new instance of the appender.\n\t * @param configuration configuration for the appender.\n\t */\n\tconstructor(configuration?: MemoryAppenderConfiguration) {\n\t\tsuper();\n\n\t\tthis.logMessages = [];\n\n\t\t// process configuration\n\t\tconfiguration = configuration || {};\n\t\tthis.configure({\n\t\t\tmaxMessages: configuration.maxMessages || MemoryAppender.maxMessagesDefault,\n\t\t\tthreshold: configuration.threshold || MemoryAppender.thresholdDefault,\n\t\t});\n\n\t\tthis.maxMessages = MemoryAppender.maxMessagesDefault;\n\t}\n\n\t/**\n\t * Configures the logging depending on the given configuration.\n\t * Only the defined properties get overwritten.\n\t *\n\t * @param configuration configuration data.\n\t */\n\tpublic configure(configuration: MemoryAppenderConfiguration): void {\n\t\tif (configuration) {\n\t\t\tif (configuration.maxMessages) {\n\t\t\t\tthis.setMaxMessages(configuration.maxMessages);\n\t\t\t}\n\t\t\tif (configuration.threshold) {\n\t\t\t\tconst convertedThreshold = LogLevelConverter.levelToLog4Javascript(\n\t\t\t\t\tLogLevelConverter.levelFromString(configuration.threshold));\n\t\t\t\tthis.setThreshold(convertedThreshold);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Appender-specific method to append a log message.\n\t * @param loggingEvent event to be appended.\n\t */\n\tpublic append(loggingEvent: log4javascript.LoggingEvent): void {\n\t\t// if logMessages is already full, remove oldest element\n\t\twhile (this.logMessages.length >= this.maxMessages) {\n\t\t\tthis.logMessages.shift();\n\t\t}\n\t\t// add event to logMessages\n\t\tconst message: LogMessage = {\n\t\t\tlevel: LogLevel[LogLevelConverter.levelFromLog4Javascript(loggingEvent.level)],\n\t\t\tlogger: typeof loggingEvent.logger === \"object\" ? loggingEvent.logger.name : undefined,\n\t\t\tmessage: loggingEvent.messages.slice(1),\n\t\t\tmethodName: loggingEvent.messages[0],\n\t\t\ttimeStamp: loggingEvent.timeStamp,\n\t\t};\n\t\tthis.logMessages.push(message);\n\n\t\t// inform about new message\n\t\tif (typeof this.onLogMessagesChangedCallback === \"function\") {\n\t\t\tthis.onLogMessagesChangedCallback(message);\n\t\t}\n\t}\n\n\t/**\n\t * Gets the appender's name.\n\t * Mainly for unit testing purposes.\n\t * @return appender's name\n\t */\n\tpublic toString(): string {\n\t\treturn \"Ionic.Logging.MemoryAppender\";\n\t}\n\n\t/**\n\t * Get the maximum number of messages which will be stored in memory.\n\t */\n\tpublic getMaxMessages(): number {\n\t\treturn this.maxMessages;\n\t}\n\n\t/**\n\t * Set the maximum number of messages which will be stored in memory.\n\t *\n\t * If the appender stores currently more messages than the new value allows, the oldest messages get removed.\n\t * @param value new maximum number\n\t */\n\tpublic setMaxMessages(value: number): void {\n\t\tthis.maxMessages = value;\n\n\t\t// if there are too much logMessages for the new value, remove oldest messages\n\t\tif (this.logMessages.length > this.maxMessages) {\n\t\t\tthis.logMessages.splice(0, this.logMessages.length - this.maxMessages);\n\t\t}\n\t}\n\n\t/**\n\t * Gets all messages stored in memory.\n\t * @return stored messages\n\t */\n\tpublic getLogMessages(): LogMessage[] {\n\t\treturn this.logMessages;\n\t}\n\n\t/**\n\t * Remove all messages stored in memory.\n\t */\n\tpublic removeLogMessages(): void {\n\t\tthis.logMessages.splice(0);\n\t}\n\n\t/**\n\t * Registers a callback which will be called every time a new message is appended.\n\t * This could be useful if you want to show new messages in realtime.\n\t * @param callback callback to be called\n\t */\n\tpublic setOnLogMessagesChangedCallback(callback: (message: LogMessage) => void): void {\n\t\tthis.onLogMessagesChangedCallback = callback;\n\t}\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MemoryAppenderConfiguration.html":{"url":"interfaces/MemoryAppenderConfiguration.html","title":"interface - MemoryAppenderConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MemoryAppenderConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/memory-appender.configuration.ts\n        \n\n            \n                Description\n            \n            \n                Configuration for MemoryAppender.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        maxMessages\n                                \n                                \n                                            Optional\n                                        threshold\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        maxMessages\n                                    \n                                \n                                \n                                    \n                                        maxMessages:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Maximum number of log messages stored by the appender.\nDefault: 250.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        threshold\n                                    \n                                \n                                \n                                    \n                                        threshold:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Threshold.\nValid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN.\nDefault: ALL.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface MemoryAppenderConfiguration {\n\t/**\n\t * Maximum number of log messages stored by the appender.\n\t *\n\t * Default: 250.\n\t */\n\tmaxMessages?: number;\n\n\t/**\n\t * Threshold.\n\t *\n\t * Valid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN.\n\t *\n\t * Default: ALL.\n\t */\n\tthreshold?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/lib/ajax-appender.configuration.ts\n            \n            interface\n            AjaxAppenderConfiguration\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/lib/ajax-appender.model.ts\n            \n            class\n            AjaxAppender\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/lib/browser-console-appender.configuration.ts\n            \n            interface\n            BrowserConsoleAppenderConfiguration\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/lib/local-storage-appender.configuration.ts\n            \n            interface\n            LocalStorageAppenderConfiguration\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/lib/local-storage-appender.model.ts\n            \n            class\n            LocalStorageAppender\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                src/lib/log-level.converter.ts\n            \n            class\n            LogLevelConverter\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/lib/log-message.model.ts\n            \n            interface\n            LogMessage\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/lib/logger.model.ts\n            \n            class\n            Logger\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                src/lib/logging-service.configuration.ts\n            \n            interface\n            LoggingServiceConfiguration\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/lib/logging.service.ts\n            \n            injectable\n            LoggingService\n            \n                100 %\n                (11/11)\n            \n        \n        \n            \n                \n                src/lib/memory-appender.configuration.ts\n            \n            interface\n            MemoryAppenderConfiguration\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/lib/memory-appender.model.ts\n            \n            class\n            MemoryAppender\n            \n                100 %\n                (10/10)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            log4javascript : ^1.4.15\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : ^9.0.0\n        \n            @angular/core : ^9.0.0\n    \n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            LogLevel   (src/.../log-level.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/log-level.model.ts\n    \n        \n            \n                \n                    \n                        \n                        LogLevel\n                    \n                \n                    \n                        \n                            Logging levels.\n\n                        \n                    \n                        \n                            \n                                 ALL\n                            \n                        \n                        \n                            \n                                 TRACE\n                            \n                        \n                        \n                            \n                                 DEBUG\n                            \n                        \n                        \n                            \n                                 INFO\n                            \n                        \n                        \n                            \n                                 WARN\n                            \n                        \n                        \n                            \n                                 ERROR\n                            \n                        \n                        \n                            \n                                 FATAL\n                            \n                        \n                        \n                            \n                                 OFF\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nionic-logging-service\nThe dependencies used by the latest version are the same as needed for Ionic 5.0.0. For older versions use:\n\n\n\nionic-logging-service\nIonic\nAngular\n\n\n\n\n9.0.0\n>= 5.0.0\n^9.0.0\n\n\n8.0.0\n>= 4.7.0\n^8.0.0\n\n\n7.0.0\n>= 4.0.0-rc\n^7.0.0\n\n\n6.0.0\n>= 4.0.0-beta\n^6.0.0\n\n\n5.1.0\n>= 3.9.0\n^5.0.0\n\n\n3.1.0\n>= 3.0.0\n^4.0.0\n\n\n2.0.0\n>= 2.2.0\n^2.4.8\n\n\n1.2.1\n>= 2.0.0\n^2.2.1\n\n\n\nThis service encapsulates log4javascript's functionalities for apps built with Ionic framework.\nFor a sample, just have a look at ionic-logging-viewer.\nUsage\nFirst, you need to import the LoggingServiceModule in your AppModule. The next step is typically the configuration (see below). And then, finally, you can use the LoggingService in your code, e.g.:\nimport { Logger, LoggingService } from \"ionic-logging-service\";\n\nexport class MyComponent {\n\n  private logger: Logger;\n\n  constructor(\n    loggingService: LoggingService) {\n\n    this.logger = loggingService.getLogger(\"MyApp.MyComponent\");\n    const methodName = \"ctor\";\n    this.logger.entry(methodName);\n\n    ...\n\n    this.logger.exit(methodName);\n  }\n\n  public myMethod(index: number, message: string): number[] {\n    const methodName = \"myMethod\";\n    this.logger.entry(methodName, index, number);\n\n    try {\n      ...\n    } catch (e) {\n      this.logger.error(methodName, \"some error\", e);\n    }\n\n    this.logger.exit(methodName);\n    return result;\n  }\n}Depending how the code is called, this could produce the following output in the browser's console:\nI  18:49:43.794  MyApp.MyComponent  ctor  entry\nI  18:49:43.797  MyApp.MyComponent  ctor  exit\nI  18:49:43.801  MyApp.MyComponent  myMethod  entry  42  Hello\nE  18:49:43.814  MyApp.MyComponent  myMethod  some error\nI  18:49:43.801  MyApp.MyComponent  myMethod  exit  [2, 5, 99]Logger\nA logger is the component responsible for logging. Typically, you have one logger per every class. The logger name describe the place where in your app the class is placed. The single parts are separated by dots ('.'). This is quite the same as with namespaces in dotnet or packages in Java.\nThis builds some kind of hierarchy. E.g., if you have a logger named A.B.C.D, you get automatically also loggers for A.B.C, A.B and A. Additionally, there is the so-called root logger, which is the parent of all other loggers.\nThe hierarchy is important, since the loggers inherit the log level from there parent - if there is no other level defined. That means, you can define just one log level for the complete app (by setting the root logger's level), and you can par example define, you do not want to see logs written for logger A.B.C (this includes also A.B.C.D).\nLevel\nEvery log message has a level. This is the severity of the message. Available levels are TRACE, DEBUG, INFO, WARN, ERROR and FATAL - these correspond to the logging methods trace, debug, info, warn, error and fatal of Logger. Levels are ordered as follows: TRACE DEBUG INFO WARN ERROR FATAL. This means the FATAL is the most severe and TRACE the least. Also included are levels called ALL and OFF intended to enable or disable all logging respectively.\nSetting a level to a logger disables log messages of severity lower than that level. For instance, if a level of INFO is set on a logger then only log messages of severity INFO or greater will be logged, meaning DEBUG and TRACE messages will not be logged.\nAppender\nAppenders make the logs visible, e.g. by writing them to the browser's console. This is quite useful during development, either in console or using ionic serve --consolelogs. But later, you will need other logs:\n\nAjaxAppender: sends the log messages to a backend server\nMemoryAppender: keeps the log messages in memory\nLocalStorageAppender: stores the log messages in local storage\n\nIf you want to see a complete example, have a look at ionic-feedback-sample.\nConfiguration\nBy default, the following configuration is used:\n\nLogger:\n\nroot: Level.WARN\n\n\nAppender:\n\nBrowserConsoleAppender\nMemoryAppender\n\n\n\nTo change it, just call configure(). This method takes an object of type LoggingConfiguration.\nThe recommended way is to place the configuration in environment.ts:\nexport const environment = {\n  logging: {\n    ...\n  }\n};Call configure() in your app.module.ts:\nexport function configureLogging(loggingService: LoggingService): () => void {\n  return () => loggingService.configure(environment.logging);\n}\n\n@NgModule({\n  ...\n  imports: [\n    ...\n    LoggingServiceModule\n  ],\n  providers: [\n    {\n      deps: [LoggingService],\n      multi: true,\n      provide: APP_INITIALIZER,\n      useFactory: configureLogging\n    }\n  ]\n})\nexport class AppModule { }logLevels\nlogLevels gets an array of log level definitions for different loggers, e.g.\n{\n  \"logLevels\": [\n    {\n      \"loggerName\": \"root\",\n      \"logLevel\": \"DEBUG\"\n    },\n    {\n      \"loggerName\": \"MyApp.MyNamespace.MyLogger\",\n      \"logLevel\": \"INFO\"\n    }\n  ]\n};That means, instead of the default log level WARN, you want to log all messages with level DEBUG and higher. Only for MyApp.MyNamespace.MyLogger, you want to restrict the level to INFO.\najaxAppender\nWith ajaxAppender, you add an additional appender of type AjaxAppender, which sends the log messages to a backend server.\nbrowserConsoleAppender\nWith browserConsoleAppender, it is possible to configure the BrowserConsoleAppender, which writes the log to the browser's console.\nlocalStorageAppender\nWith localStorageAppender, you add an additional appender of type LocalStorageAppender, which stores log messages in the local storage.\nmemoryAppender\nWith memoryAppender, it is possible to configure the MemoryAppender, which keeps log messages in the memory.\nAPI\nsee API documentation.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        LoggingServiceModule\n                    \n                    \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    6 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
