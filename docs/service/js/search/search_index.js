var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.6","fields":["title","body"],"fieldVectors":[["title/classes/AjaxAppender.html",[0,0.332,1,1.011]],["body/classes/AjaxAppender.html",[0,0.197,1,1.157,2,0.688,3,0.301,4,0.24,5,0.197,6,3.196,7,0.913,8,0.754,9,1.774,10,1.991,11,0.881,12,1.346,13,2.325,14,1.991,15,2.48,16,1.991,17,1.208,18,1.428,19,0.055,20,3.193,21,2.48,22,3.011,23,2.48,24,3.011,25,2.48,26,1.009,27,0.156,28,0.86,29,2,30,3.055,31,0.939,32,2.325,33,1.236,34,3.456,35,3.456,36,3.456,37,3.456,38,2.48,39,2.48,40,2.48,41,2.325,42,0.688,43,1.669,44,2.072,45,1.82,46,1.585,47,1.236,48,1.746,49,1.076,50,1.804,51,1.523,52,0.534,53,0.85,54,2.774,55,1.585,56,1.99,57,1.991,58,2.325,59,1.314,60,0.617,61,1.669,62,2.056,63,1.585,64,1.669,65,1.076,66,1.669,67,1.669,68,2.127,69,1.963,70,1.428,71,1.272,72,1.428,73,1.076,74,1.236,75,1.236,76,1.669,77,1.991,78,1.236,79,1.585,80,1.396,81,1.991,82,3.454,83,2.774,84,1.585,85,2.48,86,1.236,87,2.325,88,1.99,89,2.325,90,2.325,91,3.055,92,1.585,93,2.895,94,3.751,95,3.751,96,1.585,97,3.456,98,2.325,99,2.774,100,3.456,101,2.774,102,3.456,103,2.48,104,1.585,105,3.978,106,2.48,107,2.48,108,2.48,109,1.585,110,2.48,111,1.585,112,2.48,113,1.991,114,1.585,115,1.236,116,0.554,117,0.993,118,0.913,119,0.939,120,1.066,121,0.913,122,0.523,123,0.79,124,0.197,125,1.066,126,1.066,127,1.628,128,1.759,129,1.585,130,1.066,131,1.585,132,1.991,133,1.066,134,0.288,135,1.726,136,1.066,137,1.759,138,1.272,139,1.991,140,3.751,141,2.48,142,2.48,143,1.585,144,2.48,145,1.585,146,1.585,147,1.585,148,1.585,149,1.585,150,1.585,151,1.585,152,1.585,153,1.585,154,1.585,155,1.585,156,1.066,157,1.272,158,0.913,159,2.48,160,1.585,161,1.669,162,1.585,163,2.48,164,1.585,165,1.272,166,1.585,167,0.79,168,1.585,169,0.688,170,0.913,171,0.913,172,1.066,173,1.066,174,1.585,175,1.506,176,1.585,177,1.585,178,1.585,179,1.585,180,1.585,181,1.585,182,1.585,183,1.585,184,0.015,185,0.024,186,0.015]],["title/interfaces/AjaxAppenderConfiguration.html",[44,1.331,187,0.405]],["body/interfaces/AjaxAppenderConfiguration.html",[1,1.204,3,0.444,4,0.482,5,0.395,6,2.139,8,0.577,11,0.863,12,1.367,17,0.791,19,0.054,20,4.041,22,3.818,24,3.818,26,1.663,27,0.313,28,1.015,44,2.034,52,0.59,53,1.075,58,2.746,59,1.348,60,1.015,80,1.49,81,3.818,82,3.276,83,3.276,99,3.276,101,3.276,113,3.276,116,0.913,124,0.395,130,2.746,132,3.818,134,0.863,184,0.031,185,0.04,186,0.031,187,0.482,188,1.204,189,1.584,190,1.447,191,2.35,192,2.034,193,1.173,194,1.348,195,1.348,196,1.771,197,4.081,198,4.081,199,2.746]],["title/interfaces/BrowserConsoleAppenderConfiguration.html",[187,0.405,200,1.538]],["body/interfaces/BrowserConsoleAppenderConfiguration.html",[3,0.48,4,0.575,5,0.471,8,0.688,17,0.943,19,0.053,26,1.737,27,0.373,28,1.133,52,0.471,53,0.973,60,1.133,116,0.886,124,0.471,134,0.826,184,0.037,185,0.045,186,0.037,187,0.575,188,1.436,189,1.89,190,1.309,191,2.622,192,2.27,193,1.455,194,1.504,195,1.504,200,2.622,201,3.044,202,1.89,203,2.184]],["title/classes/LocalStorageAppender.html",[0,0.332,204,1.011]],["body/classes/LocalStorageAppender.html",[0,0.192,2,0.67,3,0.296,4,0.234,5,0.192,7,0.889,8,0.672,9,1.7,11,0.747,12,1.466,16,1.951,17,1.202,18,1.962,19,0.055,26,0.993,27,0.152,28,0.605,29,1.94,31,0.92,32,2.293,33,1.698,41,2.293,42,0.67,43,1.635,45,1.734,47,1.211,48,1.734,49,1.054,50,1.478,51,1.409,52,0.423,53,0.728,56,1.73,59,1.126,61,1.635,62,2.022,64,1.635,65,1.054,66,1.635,67,1.635,68,1.85,69,1.85,70,1.399,71,1.24,72,1.399,73,1.054,74,1.211,75,1.211,76,1.635,77,1.951,78,1.211,80,1.338,86,1.698,87,2.648,88,2.266,89,2.648,90,2.648,93,2.293,115,1.698,116,0.672,117,1.065,119,0.92,121,0.889,122,0.51,123,0.77,124,0.192,125,1.039,126,1.039,127,1.608,128,1.399,133,1.039,134,0.28,135,1.478,136,1.039,137,1.73,138,1.24,139,1.951,156,1.039,157,1.24,158,0.889,161,1.635,165,1.24,167,0.77,169,1.304,170,0.889,171,0.889,172,1.039,173,1.039,175,1.49,184,0.015,185,0.024,186,0.015,192,1.211,196,1.054,204,0.92,205,3.022,206,2.214,207,2.293,208,1.635,209,2.353,210,2.43,211,3.005,212,2.735,213,2.43,214,3.159,215,2.43,216,1.698,217,2.43,218,3.407,219,3.407,220,2.293,221,2.735,222,1.951,223,2.052,224,1.24,225,1.544,226,1.544,227,2.43,228,1.544,229,1.951,230,1.544,231,2.456,232,1.707,233,1.544,234,2.266,235,1.951,236,1.544,237,1.951,238,1.951,239,2.77,240,1.951,241,2.735,242,1.951,243,1.544,244,0.67,245,0.889,246,1.039,247,1.24,248,0.889,249,2.293,250,1.962,251,1.635,252,1.635,253,2.975,254,2.43,255,3.005,256,2.43,257,3.935,258,2.43,259,3.005,260,1.544,261,1.544,262,1.544,263,2.975,264,1.544,265,1.544,266,1.544,267,1.544,268,1.544,269,1.951,270,1.544,271,1.544,272,1.24,273,1.039,274,1.24,275,1.951,276,1.24,277,2.412,278,3.159,279,1.951,280,1.039,281,0.585,282,1.24,283,0.51,284,1.24,285,1.399,286,1.24,287,1.24,288,0.77,289,1.24,290,1.039,291,1.24,292,1.24,293,2.43,294,2.43,295,2.43,296,2.43,297,1.544,298,1.24,299,1.544,300,1.544]],["title/interfaces/LocalStorageAppenderConfiguration.html",[187,0.405,223,1.331]],["body/interfaces/LocalStorageAppenderConfiguration.html",[3,0.457,4,0.515,5,0.422,8,0.616,9,1.612,11,0.772,12,1.401,17,0.845,19,0.054,26,1.691,27,0.334,28,1.059,52,0.577,53,1.041,60,1.059,80,1.442,86,2.122,116,0.929,124,0.422,134,0.884,184,0.033,185,0.042,186,0.033,187,0.515,188,1.286,189,1.693,190,1.401,191,2.451,192,2.122,193,1.223,194,1.406,195,1.406,204,1.286,205,2.286,206,2.017,209,2.122,212,3.417,214,3.912,216,2.429,223,2.122,229,3.417,231,2.451,234,2.451,248,2.451]],["title/classes/LogLevelConverter.html",[0,0.332,122,0.882]],["body/classes/LogLevelConverter.html",[0,0.488,2,1.052,3,0.335,4,0.368,5,0.301,8,0.713,11,0.713,19,0.054,27,0.238,29,1.488,31,1.288,45,1.488,48,1.488,50,1.705,51,1.298,52,0.645,53,0.839,60,0.603,68,1.705,78,2.529,116,0.867,117,0.977,119,1.288,122,1.123,124,0.301,128,2.853,134,0.44,135,1.705,137,2.262,175,2.055,184,0.024,185,0.033,186,0.024,190,1.129,193,0.697,194,0.801,195,0.801,244,2.255,245,1.396,281,1.99,301,2.453,302,1.946,303,3.401,304,3.401,305,1.695,306,2.288,307,3.401,308,3.401,309,3.401,310,3.401,311,4.955,312,2.423,313,4.651,314,3.415,315,3.419,316,3.401,317,2.423,318,4.26,319,3.401,320,2.423,321,3.929,322,4.331,323,3.401,324,3.929,325,3.401,326,3.929,327,3.401,328,3.929,329,3.401,330,3.929,331,3.401,332,3.929,333,3.401,334,3.929,335,3.401,336,3.929,337,3.401,338,3.929,339,3.154]],["title/interfaces/LogMessage.html",[187,0.405,232,1.159]],["body/interfaces/LogMessage.html",[3,0.344,4,0.53,5,0.434,8,0.634,11,0.918,19,0.054,27,0.344,28,1.078,51,1.431,52,0.628,59,1.759,65,1.88,98,2.915,116,0.982,124,0.434,184,0.034,185,0.042,186,0.034,187,0.53,188,1.323,232,1.88,281,1.953,283,1.703,288,2.453,290,3.312,301,2.012,340,2.805,341,3.952,342,4.709]],["title/classes/Logger.html",[0,0.332,283,0.882]],["body/classes/Logger.html",[0,0.168,2,0.589,3,0.414,4,0.206,5,0.168,8,0.783,11,0.783,12,0.63,18,2.734,19,0.055,27,0.133,29,1.982,31,0.83,42,0.589,45,1.731,47,1.092,48,1.199,49,0.951,50,2.241,51,1.706,52,0.548,53,1.088,59,1.486,60,0.864,65,2.182,68,2.038,69,2.099,75,1.092,80,0.39,88,1.262,116,0.937,117,0.792,119,0.83,122,0.448,123,0.676,124,0.168,127,0.589,134,0.574,135,2.192,167,1.578,169,2.06,175,1.481,184,0.013,185,0.021,186,0.013,193,1.17,194,1.046,195,1.046,196,0.951,199,3.195,244,1.612,245,0.781,281,1.936,283,1.51,285,0.781,288,2.506,314,1.474,343,1.089,344,1.759,345,2.789,346,2.789,347,2.191,348,3.165,349,3.165,350,2.191,351,2.191,352,1.356,353,0.913,354,2.191,355,5.276,356,1.356,357,3.944,358,4.748,359,4.748,360,2.191,361,1.356,362,2.191,363,1.356,364,2.191,365,1.356,366,2.191,367,1.356,368,2.191,369,1.356,370,2.191,371,2.191,372,3.474,373,1.356,374,2.191,375,2.213,376,1.356,377,2.191,378,1.356,379,2.191,380,1.356,381,2.191,382,1.356,383,2.191,384,1.356,385,2.541,386,1.089,387,1.356,388,1.356,389,1.356,390,1.356,391,4.748,392,4.07,393,1.356,394,2.757,395,1.356,396,2.757,397,2.757,398,1.356,399,1.356,400,1.356,401,1.356,402,1.356,403,1.356,404,2.191,405,1.356,406,1.356,407,1.356,408,0.913,409,1.356,410,0.913,411,0.913,412,1.356]],["title/injectables/LoggingService.html",[413,1.538,414,1.331]],["body/injectables/LoggingService.html",[0,0.217,1,1.23,3,0.172,4,0.265,5,0.217,8,0.712,9,1.631,11,0.913,12,1.395,13,1.799,14,2.147,17,1.105,19,0.055,26,1.202,27,0.172,28,0.665,29,1.917,31,1.012,33,2.214,42,1.41,45,1.631,47,1.333,48,1.875,49,1.16,50,1.579,51,1.535,52,0.452,53,0.694,54,3.457,56,2.259,57,2.922,58,1.799,59,1.535,60,0.665,68,1.579,69,1.16,70,1.54,72,1.54,73,1.702,74,1.333,75,1.333,78,1.333,80,0.768,86,1.333,115,2.062,116,0.66,117,1.309,118,1.006,119,1.23,120,2.186,122,0.577,123,0.871,124,0.217,127,1.16,134,0.485,135,1.579,137,1.006,158,1.006,167,1.814,169,1.702,170,1.006,171,1.006,175,1.567,184,0.017,185,0.026,186,0.017,190,0.768,193,0.768,196,0.758,202,0.871,203,2.096,204,1.23,206,0.758,209,0.871,216,1.333,220,2.449,232,1.41,239,1.799,246,1.175,249,1.175,250,1.006,251,1.175,252,1.175,273,1.799,281,1.378,283,1.72,285,2.096,305,0.871,314,1.799,322,1.402,339,1.402,353,1.175,375,1.402,386,2.147,408,1.175,410,1.175,411,1.175,413,1.54,414,1.333,415,1.747,416,1.402,417,2.922,418,2.674,419,2.147,420,2.922,421,2.989,422,1.682,423,2.147,424,2.674,425,3.249,426,3.249,427,2.674,428,3.64,429,1.747,430,2.096,431,1.747,432,2.674,433,1.747,434,2.674,435,2.674,436,2.674,437,2.147,438,1.747,439,2.674,440,2.674,441,2.147,442,2.674,443,2.674,444,1.747,445,1.799,446,2.674,447,1.747,448,1.747,449,2.674,450,3.249,451,1.747,452,1.747,453,1.54,454,1.747,455,1.747,456,2.674,457,1.747,458,1.402,459,1.747,460,1.747,461,1.747,462,1.747,463,1.747,464,1.747,465,1.747,466,1.747,467,1.402,468,1.747,469,1.747,470,1.747,471,2.674,472,2.674,473,2.674,474,1.747,475,1.747,476,1.747,477,1.747,478,1.747,479,1.747,480,1.747,481,1.747,482,1.747,483,2.674,484,1.747,485,1.747,486,1.747,487,1.747,488,1.747,489,1.747,490,1.747,491,1.747,492,1.747,493,1.747,494,1.747,495,1.747,496,1.747,497,1.747,498,1.747,499,1.747,500,1.747,501,1.747,502,1.747,503,1.747,504,1.747]],["title/interfaces/LoggingServiceConfiguration.html",[187,0.405,430,1.538]],["body/interfaces/LoggingServiceConfiguration.html",[1,1.904,3,0.312,4,0.481,5,0.393,8,0.575,11,0.739,17,1.013,19,0.054,27,0.312,28,1.013,44,2.367,52,0.61,53,1.127,117,1.365,120,2.131,121,2.735,124,0.393,134,0.739,184,0.031,185,0.04,186,0.031,187,0.481,188,1.199,190,1.17,200,2.735,202,1.579,203,2.896,204,1.904,206,1.374,209,1.579,223,2.367,305,2.029,306,2.74,414,2.029,420,4.159,421,2.74,422,1.904,430,2.345,445,2.74,453,1.824,467,2.543,505,2.131,506,2.543,507,4.072,508,4.072,509,3.813,510,3.612,511,2.367]],["title/modules/LoggingServiceModule.html",[512,2.144,513,1.538]],["body/modules/LoggingServiceModule.html",[0,0.503,3,0.399,4,0.615,5,0.503,19,0.054,117,1.165,118,2.334,124,0.503,184,0.04,185,0.046,186,0.04,505,2.727,513,2.728,514,2.727,515,4.053,516,3.803,517,3.254,518,4.053,519,4.053]],["title/classes/MemoryAppender.html",[0,0.332,422,1.011]],["body/classes/MemoryAppender.html",[0,0.212,2,0.742,3,0.168,4,0.259,5,0.212,7,0.984,8,0.744,9,1.749,11,0.775,12,1.44,17,1.237,18,1.514,19,0.055,26,1.059,27,0.168,28,0.654,29,1.942,31,0.996,32,2.421,33,1.311,41,2.421,42,0.742,43,1.769,45,1.749,47,1.311,48,1.806,49,1.141,50,1.686,51,1.495,52,0.482,53,0.83,56,1.846,59,1.526,61,1.769,62,2.157,64,1.769,65,1.141,66,1.769,67,2.421,68,1.854,69,2.04,70,1.514,72,1.514,73,1.141,74,1.311,75,1.311,76,1.769,78,1.311,80,1.371,87,1.769,88,1.514,89,1.769,90,1.769,93,2.421,98,1.769,115,1.794,116,0.477,117,1.117,119,0.996,121,0.984,122,0.565,123,0.852,124,0.212,125,1.15,126,1.15,127,1.686,128,1.514,133,1.15,135,1.686,136,1.15,156,1.15,158,0.984,161,1.769,167,1.311,169,1.141,170,0.984,171,0.984,172,1.15,173,1.15,175,1.471,184,0.017,185,0.026,186,0.017,190,0.756,196,1.141,207,2.421,208,1.769,216,1.794,220,2.421,221,2.889,222,2.111,224,1.372,231,2.54,232,1.914,234,2.363,235,2.111,237,2.111,238,2.111,239,2.761,240,2.111,241,2.889,242,2.111,244,0.742,245,0.984,246,1.15,247,1.372,248,1.846,249,1.769,250,1.514,251,1.769,252,1.769,253,2.889,263,2.111,269,2.111,272,1.372,273,1.15,274,1.372,275,2.111,276,1.372,277,2.573,278,3.294,279,1.372,280,1.15,281,0.647,282,1.372,283,0.565,284,1.372,285,0.984,286,1.372,287,1.372,288,0.852,289,1.372,290,1.15,291,1.372,292,1.372,298,1.372,353,1.15,422,1.553,453,2.606,458,2.111,511,2.13,520,3.045,521,2.63,522,2.63,523,2.63,524,2.111,525,2.63,526,1.709,527,1.709,528,1.709,529,1.709,530,1.709,531,2.63,532,1.709,533,2.63,534,4.274,535,2.889,536,2.111,537,2.111,538,2.63,539,2.111,540,1.709,541,1.709,542,2.63,543,1.709,544,1.372,545,1.709,546,2.63,547,1.709,548,1.709,549,1.709]],["title/interfaces/MemoryAppenderConfiguration.html",[187,0.405,511,1.331]],["body/interfaces/MemoryAppenderConfiguration.html",[3,0.468,4,0.543,5,0.444,8,0.649,9,1.664,11,0.797,12,1.263,17,0.89,19,0.054,26,1.713,27,0.352,28,1.093,52,0.546,53,1.06,60,1.093,80,1.464,116,0.863,124,0.444,134,0.797,184,0.035,185,0.043,186,0.035,187,0.543,188,1.354,189,1.783,190,1.426,191,2.531,192,2.19,193,1.263,194,1.452,195,1.452,216,2.473,231,2.531,234,2.531,248,2.531,422,1.354,511,2.19,520,2.407]],["title/coverage.html",[550,2.919]],["body/coverage.html",[0,0.63,1,1.339,5,0.439,6,2.936,7,2.726,19,0.053,44,1.762,48,1.339,52,0.439,122,1.168,184,0.035,185,0.043,186,0.035,187,0.785,189,2.463,200,2.036,201,2.838,202,1.762,204,1.339,205,2.936,206,1.893,223,1.762,232,1.534,283,1.168,301,2.513,302,2.838,340,2.838,343,2.838,413,2.036,414,1.762,416,2.838,422,1.339,430,2.036,505,2.379,506,2.838,511,1.762,520,2.936,550,2.838,551,2.838,552,3.535,553,3.535,554,5.422,555,3.535,556,3.535,557,3.535,558,4.363,559,3.535,560,4.363,561,3.535,562,3.535,563,3.535,564,3.535,565,3.535,566,3.535]],["title/dependencies.html",[567,2.234,568,2.16]],["body/dependencies.html",[19,0.052,118,2.42,119,1.591,184,0.041,185,0.047,186,0.041,568,3.255,569,4.202,570,4.202,571,4.202,572,3.883]],["title/miscellaneous/enumerations.html",[573,1.793,574,2.576]],["body/miscellaneous/enumerations.html",[3,0.409,19,0.047,27,0.409,60,1.033,73,1.803,134,0.754,184,0.041,185,0.047,186,0.041,193,1.194,194,1.372,195,1.372,244,2.085,301,2.392,305,2.07,573,3.335,574,3.335,575,4.154,576,4.805]],["title/index.html",[27,0.22,577,2.234,578,2.234]],["body/index.html",[0,0.476,1,1.553,3,0.439,9,1.451,10,2.318,11,0.915,12,1.371,13,1.943,17,0.953,19,0.054,27,0.19,29,0.732,31,0.732,33,1.91,42,0.839,45,0.732,49,0.839,51,0.639,52,0.429,59,1.142,60,1.02,65,0.839,69,0.839,73,1.989,74,0.964,80,0.993,86,1.439,115,0.964,116,0.351,117,0.83,124,0.476,127,0.839,134,0.695,169,1.499,175,1.093,184,0.028,185,0.028,186,0.019,190,0.83,193,1.236,194,1.266,195,1.355,196,0.839,199,2.325,202,1.91,203,2.207,204,1.308,206,1.253,207,1.943,208,2.325,209,1.439,244,1.253,250,1.113,280,1.943,281,1.877,283,1.637,288,1.439,305,1.722,306,1.301,315,1.552,341,1.552,344,1.552,345,2.318,346,2.318,357,2.318,385,1.552,408,1.301,410,1.301,411,2.325,414,2.144,417,3.077,419,2.318,421,2.579,422,1.553,423,2.318,437,2.318,441,2.774,445,2.579,453,1.663,509,2.774,510,1.552,513,1.663,516,1.552,517,1.552,524,1.552,535,2.774,536,1.552,537,3.077,539,1.552,544,1.552,551,1.552,568,1.301,572,2.318,579,4.685,580,1.934,581,1.934,582,2.887,583,1.934,584,3.833,585,1.934,586,1.934,587,2.887,588,1.934,589,1.934,590,2.887,591,1.934,592,1.934,593,1.934,594,1.934,595,1.934,596,1.934,597,2.887,598,1.934,599,1.934,600,1.934,601,1.934,602,1.934,603,1.934,604,1.934,605,1.934,606,1.934,607,2.887,608,2.887,609,1.934,610,1.934,611,1.934,612,2.887,613,2.887,614,1.934,615,2.887,616,3.833,617,1.934,618,1.934,619,2.887,620,3.833,621,1.934,622,1.934,623,3.456,624,2.887,625,2.887,626,1.934,627,3.833,628,1.934,629,1.934,630,1.934,631,1.934,632,4.101,633,1.934,634,2.887,635,1.934,636,1.934,637,1.934,638,1.934,639,1.552,640,1.934,641,1.934,642,1.934,643,2.887,644,1.934,645,1.934,646,2.887,647,2.887,648,1.934,649,1.934,650,1.934,651,1.934,652,1.934,653,2.887,654,1.934,655,1.934,656,1.934,657,1.934,658,1.934,659,1.934,660,2.887,661,1.934,662,2.887,663,1.934,664,2.887,665,1.934,666,1.934,667,2.887,668,1.934,669,1.934,670,2.887,671,2.887,672,2.887,673,1.934,674,1.934,675,2.887,676,1.934,677,3.456,678,1.934,679,1.934,680,1.934,681,1.934,682,1.934,683,1.934,684,1.934,685,1.934,686,1.934,687,1.934,688,1.934,689,1.934,690,1.934,691,1.934,692,1.934,693,1.934,694,1.934,695,1.934,696,1.934,697,1.934,698,1.934,699,1.934,700,2.887,701,2.887,702,1.934,703,1.934,704,1.934,705,2.887,706,1.934,707,1.934,708,1.934,709,1.934,710,1.934,711,1.934,712,1.934,713,1.934,714,1.934,715,1.934,716,1.934,717,1.934,718,1.934,719,1.934,720,1.934,721,1.934,722,1.934,723,1.934,724,2.887,725,1.934,726,1.934,727,1.934,728,2.887,729,1.934,730,2.887]],["title/modules.html",[514,2.447]],["body/modules.html",[19,0.048,184,0.042,185,0.048,186,0.042,513,2.471,514,2.887,731,4.291]],["title/overview.html",[732,2.919]],["body/overview.html",[2,1.836,19,0.047,130,3.268,184,0.041,185,0.047,186,0.041,188,1.602,413,2.437,512,3.397,639,3.397,732,3.397,733,4.231]]],"invertedIndex":[["",{"_index":19,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["0",{"_index":132,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["1",{"_index":130,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"overview.html":{}}}],["1.2.1",{"_index":600,"title":{},"body":{"index.html":{}}}],["1.4.15",{"_index":569,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":23,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["10/10",{"_index":559,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":554,"title":{},"body":{"coverage.html":{}}}],["13/13",{"_index":556,"title":{},"body":{"coverage.html":{}}}],["14/14",{"_index":561,"title":{},"body":{"coverage.html":{}}}],["18:49:43.794",{"_index":631,"title":{},"body":{"index.html":{}}}],["18:49:43.797",{"_index":633,"title":{},"body":{"index.html":{}}}],["18:49:43.801",{"_index":634,"title":{},"body":{"index.html":{}}}],["18:49:43.814",{"_index":637,"title":{},"body":{"index.html":{}}}],["2",{"_index":638,"title":{},"body":{"index.html":{}}}],["2.0.0",{"_index":597,"title":{},"body":{"index.html":{}}}],["2.2.0",{"_index":598,"title":{},"body":{"index.html":{}}}],["2.2.1",{"_index":601,"title":{},"body":{"index.html":{}}}],["2.4.8",{"_index":599,"title":{},"body":{"index.html":{}}}],["2/2",{"_index":557,"title":{},"body":{"coverage.html":{}}}],["250",{"_index":248,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["3.0.0",{"_index":596,"title":{},"body":{"index.html":{}}}],["3.1.0",{"_index":595,"title":{},"body":{"index.html":{}}}],["3.9.0",{"_index":593,"title":{},"body":{"index.html":{}}}],["3/3",{"_index":563,"title":{},"body":{"coverage.html":{}}}],["4.0.0",{"_index":584,"title":{},"body":{"index.html":{}}}],["4/4",{"_index":558,"title":{},"body":{"coverage.html":{}}}],["42",{"_index":635,"title":{},"body":{"index.html":{}}}],["5",{"_index":639,"title":{},"body":{"index.html":{},"overview.html":{}}}],["5.0.0",{"_index":594,"title":{},"body":{"index.html":{}}}],["5.1.0",{"_index":592,"title":{},"body":{"index.html":{}}}],["5/5",{"_index":555,"title":{},"body":{"coverage.html":{}}}],["500",{"_index":217,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["6",{"_index":733,"title":{},"body":{"overview.html":{}}}],["6.0.0",{"_index":590,"title":{},"body":{"index.html":{}}}],["6/6",{"_index":560,"title":{},"body":{"coverage.html":{}}}],["60000",{"_index":25,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["7.0.0",{"_index":572,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["8",{"_index":151,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["8/8",{"_index":562,"title":{},"body":{"coverage.html":{}}}],["9/9",{"_index":564,"title":{},"body":{"coverage.html":{}}}],["99]logger",{"_index":640,"title":{},"body":{"index.html":{}}}],["a.b",{"_index":665,"title":{},"body":{"index.html":{}}}],["a.b.c",{"_index":664,"title":{},"body":{"index.html":{}}}],["a.b.c.d",{"_index":662,"title":{},"body":{"index.html":{}}}],["add",{"_index":280,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["added",{"_index":449,"title":{},"body":{"injectables/LoggingService.html":{}}}],["additional",{"_index":728,"title":{},"body":{"index.html":{}}}],["additionally",{"_index":666,"title":{},"body":{"index.html":{}}}],["ajax",{"_index":120,"title":{},"body":{"classes/AjaxAppender.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{}}}],["ajaxappender",{"_index":1,"title":{"classes/AjaxAppender.html":{}},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["ajaxappender(configuration.ajaxappender",{"_index":489,"title":{},"body":{"injectables/LoggingService.html":{}}}],["ajaxappender.appenderfailed.subscribe((message",{"_index":490,"title":{},"body":{"injectables/LoggingService.html":{}}}],["ajaxappender.batchsizedefault",{"_index":160,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["ajaxappender.thresholddefault",{"_index":162,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["ajaxappender.timerintervaldefault",{"_index":164,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["ajaxappenderconfiguration",{"_index":44,"title":{"interfaces/AjaxAppenderConfiguration.html":{}},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{}}}],["ajaxappenderfailed",{"_index":425,"title":{},"body":{"injectables/LoggingService.html":{}}}],["alerts",{"_index":459,"title":{},"body":{"injectables/LoggingService.html":{}}}],["allows",{"_index":240,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["already",{"_index":273,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["amend",{"_index":424,"title":{},"body":{"injectables/LoggingService.html":{}}}],["angular",{"_index":588,"title":{},"body":{"index.html":{}}}],["angular/common",{"_index":571,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":118,"title":{},"body":{"classes/AjaxAppender.html":{},"injectables/LoggingService.html":{},"modules/LoggingServiceModule.html":{},"dependencies.html":{}}}],["anything",{"_index":523,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["api",{"_index":730,"title":{},"body":{"index.html":{}}}],["app",{"_index":647,"title":{},"body":{"index.html":{}}}],["app.module.ts",{"_index":712,"title":{},"body":{"index.html":{}}}],["app_initializer",{"_index":720,"title":{},"body":{"index.html":{}}}],["append",{"_index":32,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["append(loggingevent",{"_index":61,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["appended",{"_index":67,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["appender",{"_index":9,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["appender's",{"_index":93,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["appender.configuration",{"_index":121,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{}}}],["appender.configuration.ts",{"_index":189,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{}}}],["appender.model",{"_index":450,"title":{},"body":{"injectables/LoggingService.html":{}}}],["appender.model.ts",{"_index":7,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{},"coverage.html":{}}}],["appender.model.ts:100",{"_index":225,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:103",{"_index":63,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:104",{"_index":540,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["appender.model.ts:111",{"_index":529,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["appender.model.ts:112",{"_index":114,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:120",{"_index":84,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:121",{"_index":530,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["appender.model.ts:124",{"_index":243,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:127",{"_index":79,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:131",{"_index":228,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:134",{"_index":528,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["appender.model.ts:135",{"_index":104,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:138",{"_index":233,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:142",{"_index":92,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:143",{"_index":532,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["appender.model.ts:148",{"_index":236,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:149",{"_index":109,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:156",{"_index":96,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:164",{"_index":111,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:169",{"_index":230,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:177",{"_index":226,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:32",{"_index":55,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:34",{"_index":224,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["appender.model.ts:35",{"_index":46,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:61",{"_index":527,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["appender.model.ts:78",{"_index":526,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["appender.model.ts:80",{"_index":71,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["appenderfailed",{"_index":30,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appenders",{"_index":692,"title":{},"body":{"index.html":{}}}],["application/json",{"_index":149,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appmodule",{"_index":613,"title":{},"body":{"index.html":{}}}],["apps",{"_index":604,"title":{},"body":{"index.html":{}}}],["arg",{"_index":372,"title":{},"body":{"classes/Logger.html":{}}}],["arg.tostring",{"_index":404,"title":{},"body":{"classes/Logger.html":{}}}],["args",{"_index":391,"title":{},"body":{"classes/Logger.html":{}}}],["args.push(this.formatargument(param",{"_index":392,"title":{},"body":{"classes/Logger.html":{}}}],["argument",{"_index":371,"title":{},"body":{"classes/Logger.html":{}}}],["array",{"_index":510,"title":{},"body":{"interfaces/LoggingServiceConfiguration.html":{},"index.html":{}}}],["automatically",{"_index":663,"title":{},"body":{"index.html":{}}}],["available",{"_index":678,"title":{},"body":{"index.html":{}}}],["backend",{"_index":700,"title":{},"body":{"index.html":{}}}],["batch",{"_index":106,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["batchsize",{"_index":22,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["batchsizedefault",{"_index":129,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["below",{"_index":617,"title":{},"body":{"index.html":{}}}],["beta",{"_index":591,"title":{},"body":{"index.html":{}}}],["between",{"_index":100,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["browse",{"_index":731,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":467,"title":{},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{}}}],["browser's",{"_index":208,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["browserconsoleappender",{"_index":203,"title":{},"body":{"interfaces/BrowserConsoleAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"index.html":{}}}],["browserconsoleappenderconfiguration",{"_index":200,"title":{"interfaces/BrowserConsoleAppenderConfiguration.html":{}},"body":{"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{}}}],["builds",{"_index":658,"title":{},"body":{"index.html":{}}}],["built",{"_index":605,"title":{},"body":{"index.html":{}}}],["c",{"_index":472,"title":{},"body":{"injectables/LoggingService.html":{}}}],["call",{"_index":705,"title":{},"body":{"index.html":{}}}],["callback",{"_index":534,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["called",{"_index":535,"title":{},"body":{"classes/MemoryAppender.html":{},"index.html":{}}}],["case",{"_index":322,"title":{},"body":{"classes/LogLevelConverter.html":{},"injectables/LoggingService.html":{}}}],["catch",{"_index":410,"title":{},"body":{"classes/Logger.html":{},"injectables/LoggingService.html":{},"index.html":{}}}],["change",{"_index":704,"title":{},"body":{"index.html":{}}}],["changed",{"_index":165,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["charset=utf",{"_index":150,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["class",{"_index":0,"title":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{}},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"coverage.html":{},"index.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{},"overview.html":{}}}],["clearlog",{"_index":218,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["code",{"_index":619,"title":{},"body":{"index.html":{}}}],["complete",{"_index":671,"title":{},"body":{"index.html":{}}}],["component",{"_index":641,"title":{},"body":{"index.html":{}}}],["configuration",{"_index":17,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["configuration.ajaxappender",{"_index":488,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configuration.batchsize",{"_index":159,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["configuration.browserconsoleappender",{"_index":498,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configuration.browserconsoleappender.threshold",{"_index":499,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configuration.localstorageappender",{"_index":493,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configuration.localstoragekey",{"_index":257,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["configuration.loglevels",{"_index":483,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configuration.maxmessages",{"_index":269,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["configuration.memoryappender",{"_index":496,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configuration.threshold",{"_index":161,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["configuration.timerinterval",{"_index":163,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["configuration.url",{"_index":140,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["configure",{"_index":33,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["configure(configuration",{"_index":70,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["configure](#configure",{"_index":454,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configurelogging",{"_index":722,"title":{},"body":{"index.html":{}}}],["configurelogging(loggingservice",{"_index":713,"title":{},"body":{"index.html":{}}}],["configures",{"_index":72,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["console",{"_index":202,"title":{},"body":{"interfaces/BrowserConsoleAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["consolelogs",{"_index":698,"title":{},"body":{"index.html":{}}}],["const",{"_index":169,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["constructor",{"_index":42,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["constructor(configuration",{"_index":43,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["constructor(logger",{"_index":351,"title":{},"body":{"classes/Logger.html":{}}}],["convertedthreshold",{"_index":170,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["converting",{"_index":304,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["converts",{"_index":313,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["correspond",{"_index":679,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":550,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":462,"title":{},"body":{"injectables/LoggingService.html":{}}}],["creates",{"_index":47,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["creating",{"_index":435,"title":{},"body":{"injectables/LoggingService.html":{}}}],["ctor",{"_index":623,"title":{},"body":{"index.html":{}}}],["current",{"_index":442,"title":{},"body":{"injectables/LoggingService.html":{}}}],["currently",{"_index":237,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["data",{"_index":78,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["date",{"_index":342,"title":{},"body":{"interfaces/LogMessage.html":{}}}],["date(logmessage.timestamp",{"_index":268,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["debug",{"_index":193,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["debug(methodname",{"_index":354,"title":{},"body":{"classes/Logger.html":{}}}],["debugger",{"_index":468,"title":{},"body":{"injectables/LoggingService.html":{}}}],["declarations",{"_index":518,"title":{},"body":{"modules/LoggingServiceModule.html":{}}}],["default",{"_index":190,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["define",{"_index":670,"title":{},"body":{"index.html":{}}}],["defined",{"_index":45,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["definition",{"_index":508,"title":{},"body":{"interfaces/LoggingServiceConfiguration.html":{}}}],["definitions",{"_index":723,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":568,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"index.html":{}}}],["depending",{"_index":74,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["deps",{"_index":716,"title":{},"body":{"index.html":{}}}],["derive",{"_index":446,"title":{},"body":{"injectables/LoggingService.html":{}}}],["describe",{"_index":645,"title":{},"body":{"index.html":{}}}],["description",{"_index":8,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["development",{"_index":696,"title":{},"body":{"index.html":{}}}],["different",{"_index":306,"title":{},"body":{"classes/LogLevelConverter.html":{},"interfaces/LoggingServiceConfiguration.html":{},"index.html":{}}}],["disable",{"_index":686,"title":{},"body":{"index.html":{}}}],["disables",{"_index":688,"title":{},"body":{"index.html":{}}}],["display",{"_index":476,"title":{},"body":{"injectables/LoggingService.html":{}}}],["docs",{"_index":252,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["documentation",{"_index":551,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dotnet",{"_index":655,"title":{},"body":{"index.html":{}}}],["dots",{"_index":652,"title":{},"body":{"index.html":{}}}],["during",{"_index":695,"title":{},"body":{"index.html":{}}}],["e",{"_index":411,"title":{},"body":{"classes/Logger.html":{},"injectables/LoggingService.html":{},"index.html":{}}}],["e.g",{"_index":620,"title":{},"body":{"index.html":{}}}],["e.message",{"_index":412,"title":{},"body":{"classes/Logger.html":{}}}],["each",{"_index":82,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["element",{"_index":276,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["emitter",{"_index":463,"title":{},"body":{"injectables/LoggingService.html":{}}}],["empty",{"_index":139,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["enable",{"_index":685,"title":{},"body":{"index.html":{}}}],["enabled",{"_index":521,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["encapsulates",{"_index":602,"title":{},"body":{"index.html":{}}}],["entry",{"_index":345,"title":{},"body":{"classes/Logger.html":{},"index.html":{}}}],["entry(methodname",{"_index":360,"title":{},"body":{"classes/Logger.html":{}}}],["enumerations",{"_index":574,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environment",{"_index":711,"title":{},"body":{"index.html":{}}}],["environment.ts",{"_index":710,"title":{},"body":{"index.html":{}}}],["error",{"_index":60,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["error(\"configuration",{"_index":138,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["error(\"localstoragekey",{"_index":258,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["error(\"url",{"_index":141,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["error(`invalid",{"_index":339,"title":{},"body":{"classes/LogLevelConverter.html":{},"injectables/LoggingService.html":{}}}],["error(methodname",{"_index":362,"title":{},"body":{"classes/Logger.html":{}}}],["errors",{"_index":460,"title":{},"body":{"injectables/LoggingService.html":{}}}],["event",{"_index":56,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["eventemitter",{"_index":54,"title":{},"body":{"classes/AjaxAppender.html":{},"injectables/LoggingService.html":{}}}],["example",{"_index":675,"title":{},"body":{"index.html":{}}}],["exist",{"_index":436,"title":{},"body":{"injectables/LoggingService.html":{}}}],["existing",{"_index":261,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["exit",{"_index":346,"title":{},"body":{"classes/Logger.html":{},"index.html":{}}}],["exit(methodname",{"_index":364,"title":{},"body":{"classes/Logger.html":{}}}],["export",{"_index":124,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["exports",{"_index":519,"title":{},"body":{"modules/LoggingServiceModule.html":{}}}],["extends",{"_index":125,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["false",{"_index":147,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["fatal",{"_index":194,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["fatal(methodname",{"_index":366,"title":{},"body":{"classes/Logger.html":{}}}],["feedback",{"_index":702,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{}}}],["finally",{"_index":618,"title":{},"body":{"index.html":{}}}],["first",{"_index":611,"title":{},"body":{"index.html":{}}}],["following",{"_index":419,"title":{},"body":{"injectables/LoggingService.html":{},"index.html":{}}}],["follows",{"_index":681,"title":{},"body":{"index.html":{}}}],["formatargument",{"_index":347,"title":{},"body":{"classes/Logger.html":{}}}],["formatargument(arg",{"_index":368,"title":{},"body":{"classes/Logger.html":{}}}],["formats",{"_index":370,"title":{},"body":{"classes/Logger.html":{}}}],["formatted",{"_index":359,"title":{},"body":{"classes/Logger.html":{}}}],["framework",{"_index":606,"title":{},"body":{"index.html":{}}}],["full",{"_index":274,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["function",{"_index":539,"title":{},"body":{"classes/MemoryAppender.html":{},"index.html":{}}}],["functionalities",{"_index":603,"title":{},"body":{"index.html":{}}}],["functionality",{"_index":418,"title":{},"body":{"injectables/LoggingService.html":{}}}],["getbatchsize",{"_index":34,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["getinternalappender",{"_index":35,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["getinternallogger",{"_index":348,"title":{},"body":{"classes/Logger.html":{}}}],["getlayout",{"_index":36,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["getlocalstoragekey",{"_index":219,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["getlogger",{"_index":427,"title":{},"body":{"injectables/LoggingService.html":{}}}],["getlogger(loggername",{"_index":432,"title":{},"body":{"injectables/LoggingService.html":{}}}],["getloglevel",{"_index":349,"title":{},"body":{"classes/Logger.html":{}}}],["getlogmessages",{"_index":220,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["getmaxmessages",{"_index":221,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["getrootlogger",{"_index":428,"title":{},"body":{"injectables/LoggingService.html":{}}}],["gets",{"_index":115,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["gettimerinterval",{"_index":37,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["getting",{"_index":577,"title":{"index.html":{}},"body":{}}],["given",{"_index":75,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["greater",{"_index":690,"title":{},"body":{"index.html":{}}}],["hello",{"_index":636,"title":{},"body":{"index.html":{}}}],["helper",{"_index":303,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["here",{"_index":407,"title":{},"body":{"classes/Logger.html":{}}}],["hierarchy",{"_index":660,"title":{},"body":{"index.html":{}}}],["higher",{"_index":726,"title":{},"body":{"index.html":{}}}],["http",{"_index":15,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["https://my.backend.xy/loggingbackend",{"_index":21,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["identifier",{"_index":552,"title":{},"body":{"coverage.html":{}}}],["immediatedly",{"_index":197,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{}}}],["import",{"_index":117,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["important",{"_index":668,"title":{},"body":{"index.html":{}}}],["imports",{"_index":517,"title":{},"body":{"modules/LoggingServiceModule.html":{},"index.html":{}}}],["included",{"_index":683,"title":{},"body":{"index.html":{}}}],["includes",{"_index":676,"title":{},"body":{"index.html":{}}}],["index",{"_index":27,"title":{"index.html":{}},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["info(methodname",{"_index":377,"title":{},"body":{"classes/Logger.html":{}}}],["inform",{"_index":545,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["inherit",{"_index":669,"title":{},"body":{"index.html":{}}}],["injectable",{"_index":413,"title":{"injectables/LoggingService.html":{}},"body":{"injectables/LoggingService.html":{},"coverage.html":{},"overview.html":{}}}],["injectables",{"_index":415,"title":{},"body":{"injectables/LoggingService.html":{}}}],["instance",{"_index":49,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["instanceof",{"_index":405,"title":{},"body":{"classes/Logger.html":{}}}],["instead",{"_index":725,"title":{},"body":{"index.html":{}}}],["intended",{"_index":684,"title":{},"body":{"index.html":{}}}],["interface",{"_index":187,"title":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/LogMessage.html":{},"interfaces/LoggingServiceConfiguration.html":{},"interfaces/MemoryAppenderConfiguration.html":{}},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/LogMessage.html":{},"interfaces/LoggingServiceConfiguration.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{}}}],["interfaces",{"_index":188,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/LogMessage.html":{},"interfaces/LoggingServiceConfiguration.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"overview.html":{}}}],["internal",{"_index":314,"title":{},"body":{"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{}}}],["internally",{"_index":85,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["interval",{"_index":113,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["ionic",{"_index":579,"title":{},"body":{"index.html":{}}}],["ionic.logging.ajaxappender",{"_index":176,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["ionic.logging.localstorageappender",{"_index":297,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["ionic.logging.memoryappender",{"_index":548,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["java",{"_index":657,"title":{},"body":{"index.html":{}}}],["javascript",{"_index":198,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{}}}],["json",{"_index":18,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{}}}],["json.parse(localstorage.getitem(this.localstoragekey",{"_index":264,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["json.stringify",{"_index":406,"title":{},"body":{"classes/Logger.html":{}}}],["json.stringify(arg",{"_index":409,"title":{},"body":{"classes/Logger.html":{}}}],["json.stringify(this.logmessages",{"_index":296,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["keeps",{"_index":701,"title":{},"body":{"index.html":{}}}],["key",{"_index":212,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{}}}],["keyword",{"_index":256,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["kind",{"_index":659,"title":{},"body":{"index.html":{}}}],["last",{"_index":439,"title":{},"body":{"injectables/LoggingService.html":{}}}],["later",{"_index":699,"title":{},"body":{"index.html":{}}}],["latest",{"_index":580,"title":{},"body":{"index.html":{}}}],["layout",{"_index":94,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["length",{"_index":97,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["level",{"_index":281,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["level.converter",{"_index":123,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["level.converter.ts",{"_index":302,"title":{},"body":{"classes/LogLevelConverter.html":{},"coverage.html":{}}}],["level.converter.ts:15",{"_index":312,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["level.converter.ts:43",{"_index":317,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["level.converter.ts:71",{"_index":320,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["level.loggername",{"_index":484,"title":{},"body":{"injectables/LoggingService.html":{}}}],["level.loglevel",{"_index":487,"title":{},"body":{"injectables/LoggingService.html":{}}}],["level.model",{"_index":245,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{}}}],["level.model.ts",{"_index":576,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["level.warn",{"_index":703,"title":{},"body":{"index.html":{}}}],["levelfromlog4javascript",{"_index":307,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["levelfromlog4javascript(level",{"_index":310,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["levelfromstring",{"_index":308,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["levelfromstring(level",{"_index":316,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["levels",{"_index":305,"title":{},"body":{"classes/LogLevelConverter.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["leveltolog4javascript",{"_index":309,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["leveltolog4javascript(level",{"_index":319,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["limited",{"_index":443,"title":{},"body":{"injectables/LoggingService.html":{}}}],["line:completed",{"_index":251,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["line:no",{"_index":254,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["local",{"_index":209,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"index.html":{}}}],["localstorage",{"_index":294,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["localstorage.getitem(this.localstoragekey",{"_index":262,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["localstorage.removeitem(this.localstoragekey",{"_index":300,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["localstorage.setitem(this.localstoragekey",{"_index":295,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["localstorageappender",{"_index":204,"title":{"classes/LocalStorageAppender.html":{}},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["localstorageappender(configuration.localstorageappender",{"_index":494,"title":{},"body":{"injectables/LoggingService.html":{}}}],["localstorageappender.maxmessagesdefault",{"_index":270,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["localstorageappender.thresholddefault",{"_index":271,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["localstorageappenderconfiguration",{"_index":223,"title":{"interfaces/LocalStorageAppenderConfiguration.html":{}},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{}}}],["localstoragekey",{"_index":214,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{}}}],["log",{"_index":11,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["log4javascript",{"_index":119,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"dependencies.html":{}}}],["log4javascript's",{"_index":315,"title":{},"body":{"classes/LogLevelConverter.html":{},"index.html":{}}}],["log4javascript.ajaxappender",{"_index":91,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["log4javascript.ajaxappender(configuration.url",{"_index":143,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["log4javascript.appender",{"_index":126,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["log4javascript.browserconsoleappender",{"_index":456,"title":{},"body":{"injectables/LoggingService.html":{}}}],["log4javascript.getlogger(level.loggername",{"_index":485,"title":{},"body":{"injectables/LoggingService.html":{}}}],["log4javascript.getlogger(logger",{"_index":387,"title":{},"body":{"classes/Logger.html":{}}}],["log4javascript.getrootlogger",{"_index":386,"title":{},"body":{"classes/Logger.html":{},"injectables/LoggingService.html":{}}}],["log4javascript.getrootlogger().addappender(ajaxappender",{"_index":492,"title":{},"body":{"injectables/LoggingService.html":{}}}],["log4javascript.getrootlogger().addappender(localstorageappender",{"_index":495,"title":{},"body":{"injectables/LoggingService.html":{}}}],["log4javascript.jsonlayout(false",{"_index":146,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["log4javascript.layout",{"_index":95,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["log4javascript.level",{"_index":311,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.all",{"_index":323,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.debug",{"_index":325,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.error",{"_index":327,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.fatal",{"_index":329,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.info",{"_index":331,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.off",{"_index":333,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.trace",{"_index":335,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.warn",{"_index":337,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.logger",{"_index":375,"title":{},"body":{"classes/Logger.html":{},"injectables/LoggingService.html":{}}}],["log4javascript.loggingevent",{"_index":62,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["log4javascript.loglog.setquietmode(true",{"_index":461,"title":{},"body":{"injectables/LoggingService.html":{}}}],["log4javascript.patternlayout(\"%d{hh:mm:ss,sss",{"_index":471,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logged",{"_index":357,"title":{},"body":{"classes/Logger.html":{},"index.html":{}}}],["logger",{"_index":283,"title":{"classes/Logger.html":{}},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"coverage.html":{},"index.html":{}}}],["logger's",{"_index":673,"title":{},"body":{"index.html":{}}}],["logger(loggername",{"_index":502,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logger.addappender(this.browserconsoleappender",{"_index":475,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logger.addappender(this.memoryappender",{"_index":482,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logger.model",{"_index":451,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logger.setlevel(log4javascript.level.warn",{"_index":466,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logger.setlevel(loglevelconverter.leveltolog4javascript(loglevelconverter.levelfromstring(level.loglevel",{"_index":486,"title":{},"body":{"injectables/LoggingService.html":{}}}],["loggername",{"_index":437,"title":{},"body":{"injectables/LoggingService.html":{},"index.html":{}}}],["loggers",{"_index":445,"title":{},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"index.html":{}}}],["logging",{"_index":73,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["loggingconfiguration",{"_index":707,"title":{},"body":{"index.html":{}}}],["loggingevent",{"_index":66,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loggingevent.logger",{"_index":284,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loggingevent.logger.name",{"_index":286,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loggingevent.messages.slice(1",{"_index":287,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loggingevent.messages[0",{"_index":289,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loggingevent.timestamp",{"_index":291,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loggingservice",{"_index":414,"title":{"injectables/LoggingService.html":{}},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["loggingservice.configure(environment.logging",{"_index":714,"title":{},"body":{"index.html":{}}}],["loggingservice.getlogger(\"myapp.mycomponent",{"_index":622,"title":{},"body":{"index.html":{}}}],["loggingserviceconfiguration",{"_index":430,"title":{"interfaces/LoggingServiceConfiguration.html":{}},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{}}}],["loggingservicemodule",{"_index":513,"title":{"modules/LoggingServiceModule.html":{}},"body":{"modules/LoggingServiceModule.html":{},"index.html":{},"modules.html":{}}}],["loglevel",{"_index":244,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["loglevel.all",{"_index":324,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel.debug",{"_index":326,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel.error",{"_index":328,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel.fatal",{"_index":330,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel.info",{"_index":332,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel.off",{"_index":334,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel.trace",{"_index":336,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel.warn",{"_index":338,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel[loglevelconverter.levelfromlog4javascript(loggingevent.level",{"_index":282,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loglevelconverter",{"_index":122,"title":{"classes/LogLevelConverter.html":{}},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"coverage.html":{}}}],["loglevelconverter.levelfromlog4javascript(this.logger.getlevel",{"_index":388,"title":{},"body":{"classes/Logger.html":{}}}],["loglevelconverter.levelfromstring(configuration.browserconsoleappender.threshold",{"_index":500,"title":{},"body":{"injectables/LoggingService.html":{}}}],["loglevelconverter.levelfromstring(configuration.threshold",{"_index":172,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loglevelconverter.leveltolog4javascript",{"_index":171,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["loglevels",{"_index":509,"title":{},"body":{"interfaces/LoggingServiceConfiguration.html":{},"index.html":{}}}],["logmessage",{"_index":232,"title":{"interfaces/LogMessage.html":{}},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LogMessage.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"coverage.html":{}}}],["logmessage.timestamp",{"_index":267,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["logmessages",{"_index":253,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["logmessageschanged",{"_index":426,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logs",{"_index":199,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"classes/Logger.html":{},"index.html":{}}}],["look",{"_index":608,"title":{},"body":{"index.html":{}}}],["lower",{"_index":689,"title":{},"body":{"index.html":{}}}],["m",{"_index":473,"title":{},"body":{"injectables/LoggingService.html":{}}}],["mainly",{"_index":87,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["make",{"_index":693,"title":{},"body":{"index.html":{}}}],["matching",{"_index":185,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["maximum",{"_index":234,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["maxmessages",{"_index":216,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["maxmessagesdefault",{"_index":247,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["meaning",{"_index":691,"title":{},"body":{"index.html":{}}}],["means",{"_index":441,"title":{},"body":{"injectables/LoggingService.html":{},"index.html":{}}}],["memory",{"_index":453,"title":{},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["memoryappender",{"_index":422,"title":{"classes/MemoryAppender.html":{}},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["memoryappender.maxmessagesdefault",{"_index":542,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["memoryappender.thresholddefault",{"_index":543,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["memoryappender](../memoryappender.html",{"_index":503,"title":{},"body":{"injectables/LoggingService.html":{}}}],["memoryappenderconfiguration",{"_index":511,"title":{"interfaces/MemoryAppenderConfiguration.html":{}},"body":{"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{}}}],["message",{"_index":59,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["message.model",{"_index":246,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["message.model.ts",{"_index":340,"title":{},"body":{"interfaces/LogMessage.html":{},"coverage.html":{}}}],["messages",{"_index":12,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["method",{"_index":65,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["methodname",{"_index":288,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["methods",{"_index":31,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["milliseconds",{"_index":99,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["miscellaneous",{"_index":573,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["modified",{"_index":77,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["module",{"_index":512,"title":{"modules/LoggingServiceModule.html":{}},"body":{"overview.html":{}}}],["modules",{"_index":514,"title":{"modules.html":{}},"body":{"modules/LoggingServiceModule.html":{},"modules.html":{}}}],["more",{"_index":238,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["much",{"_index":298,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["multi",{"_index":717,"title":{},"body":{"index.html":{}}}],["myapp.mycomponent",{"_index":632,"title":{},"body":{"index.html":{}}}],["myapp.mynamespace.mylogger",{"_index":724,"title":{},"body":{"index.html":{}}}],["mycomponent",{"_index":621,"title":{},"body":{"index.html":{}}}],["mylogs",{"_index":215,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["mymethod",{"_index":627,"title":{},"body":{"index.html":{}}}],["mymethod(index",{"_index":626,"title":{},"body":{"index.html":{}}}],["name",{"_index":51,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["named",{"_index":661,"title":{},"body":{"index.html":{}}}],["namespaces",{"_index":654,"title":{},"body":{"index.html":{}}}],["need",{"_index":612,"title":{},"body":{"index.html":{}}}],["needed",{"_index":583,"title":{},"body":{"index.html":{}}}],["new",{"_index":48,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"coverage.html":{}}}],["next",{"_index":250,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["ngmodule",{"_index":516,"title":{},"body":{"modules/LoggingServiceModule.html":{},"index.html":{}}}],["null",{"_index":255,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["number",{"_index":80,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["object",{"_index":544,"title":{},"body":{"classes/MemoryAppender.html":{},"index.html":{}}}],["objects",{"_index":358,"title":{},"body":{"classes/Logger.html":{}}}],["older",{"_index":585,"title":{},"body":{"index.html":{}}}],["oldest",{"_index":241,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["one",{"_index":643,"title":{},"body":{"index.html":{}}}],["onlogmessageschangedcallback",{"_index":541,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["optional",{"_index":53,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["ordered",{"_index":680,"title":{},"body":{"index.html":{}}}],["output",{"_index":630,"title":{},"body":{"index.html":{}}}],["overview",{"_index":732,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwritten",{"_index":76,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["package",{"_index":567,"title":{"dependencies.html":{}},"body":{}}],["packages",{"_index":656,"title":{},"body":{"index.html":{}}}],["page",{"_index":477,"title":{},"body":{"injectables/LoggingService.html":{}}}],["par",{"_index":674,"title":{},"body":{"index.html":{}}}],["param",{"_index":135,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["parameters",{"_index":50,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["params",{"_index":355,"title":{},"body":{"classes/Logger.html":{}}}],["parent",{"_index":667,"title":{},"body":{"index.html":{}}}],["partial",{"_index":507,"title":{},"body":{"interfaces/LoggingServiceConfiguration.html":{}}}],["parts",{"_index":650,"title":{},"body":{"index.html":{}}}],["peer",{"_index":570,"title":{},"body":{"dependencies.html":{}}}],["per",{"_index":644,"title":{},"body":{"index.html":{}}}],["place",{"_index":646,"title":{},"body":{"index.html":{}}}],["placed",{"_index":648,"title":{},"body":{"index.html":{}}}],["possible",{"_index":423,"title":{},"body":{"injectables/LoggingService.html":{},"index.html":{}}}],["prevent",{"_index":457,"title":{},"body":{"injectables/LoggingService.html":{}}}],["private",{"_index":127,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["process",{"_index":156,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["produce",{"_index":629,"title":{},"body":{"index.html":{}}}],["properties",{"_index":28,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/LogMessage.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["provide",{"_index":719,"title":{},"body":{"index.html":{}}}],["providedin",{"_index":455,"title":{},"body":{"injectables/LoggingService.html":{}}}],["providers",{"_index":715,"title":{},"body":{"index.html":{}}}],["public",{"_index":29,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["purposes",{"_index":90,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["queued",{"_index":102,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["quite",{"_index":653,"title":{},"body":{"index.html":{}}}],["rc",{"_index":589,"title":{},"body":{"index.html":{}}}],["read",{"_index":260,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["realtime",{"_index":538,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["recommended",{"_index":708,"title":{},"body":{"index.html":{}}}],["registers",{"_index":533,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["remaining",{"_index":157,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["remove",{"_index":275,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["removed",{"_index":242,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["removes",{"_index":227,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["representation",{"_index":318,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["request",{"_index":83,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["respectively",{"_index":687,"title":{},"body":{"index.html":{}}}],["responsible",{"_index":642,"title":{},"body":{"index.html":{}}}],["restrict",{"_index":727,"title":{},"body":{"index.html":{}}}],["result",{"_index":184,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["results",{"_index":186,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["retrieved",{"_index":440,"title":{},"body":{"injectables/LoggingService.html":{}}}],["return",{"_index":175,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["returns",{"_index":68,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["root",{"_index":421,"title":{},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"index.html":{}}}],["same",{"_index":582,"title":{},"body":{"index.html":{}}}],["sample",{"_index":607,"title":{},"body":{"index.html":{}}}],["saved",{"_index":210,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["see",{"_index":616,"title":{},"body":{"index.html":{}}}],["send",{"_index":58,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"injectables/LoggingService.html":{}}}],["sending",{"_index":101,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["sends",{"_index":10,"title":{},"body":{"classes/AjaxAppender.html":{},"index.html":{}}}],["sent",{"_index":81,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["separated",{"_index":651,"title":{},"body":{"index.html":{}}}],["serialized",{"_index":211,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["serve",{"_index":697,"title":{},"body":{"index.html":{}}}],["server",{"_index":13,"title":{},"body":{"classes/AjaxAppender.html":{},"injectables/LoggingService.html":{},"index.html":{}}}],["service",{"_index":417,"title":{},"body":{"injectables/LoggingService.html":{},"index.html":{}}}],["service.configuration",{"_index":452,"title":{},"body":{"injectables/LoggingService.html":{}}}],["service.configuration.ts",{"_index":506,"title":{},"body":{"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{}}}],["service.module.ts",{"_index":515,"title":{},"body":{"modules/LoggingServiceModule.html":{}}}],["set",{"_index":196,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["setbatchsize",{"_index":38,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["setbatchsize(batchsize",{"_index":103,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["setlayout",{"_index":39,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["setlayout(layout",{"_index":108,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["setloglevel",{"_index":350,"title":{},"body":{"classes/Logger.html":{}}}],["setloglevel(level",{"_index":379,"title":{},"body":{"classes/Logger.html":{}}}],["setmaxmessages",{"_index":222,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["setmaxmessages(value",{"_index":235,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["setonlogmessageschangedcallback",{"_index":525,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["setonlogmessageschangedcallback(callback",{"_index":531,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["sets",{"_index":105,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["settimerinterval",{"_index":40,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["settimerinterval(timerinterval",{"_index":110,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["setting",{"_index":672,"title":{},"body":{"index.html":{}}}],["settings",{"_index":420,"title":{},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{}}}],["severe",{"_index":682,"title":{},"body":{"index.html":{}}}],["severity",{"_index":677,"title":{},"body":{"index.html":{}}}],["show",{"_index":458,"title":{},"body":{"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["single",{"_index":649,"title":{},"body":{"index.html":{}}}],["size",{"_index":107,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["specific",{"_index":64,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["specified",{"_index":434,"title":{},"body":{"injectables/LoggingService.html":{}}}],["specify",{"_index":522,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["src/.../log",{"_index":575,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/lib/ajax",{"_index":6,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"coverage.html":{}}}],["src/lib/browser",{"_index":201,"title":{},"body":{"interfaces/BrowserConsoleAppenderConfiguration.html":{},"coverage.html":{}}}],["src/lib/local",{"_index":205,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"coverage.html":{}}}],["src/lib/log",{"_index":301,"title":{},"body":{"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/lib/logger.model.ts",{"_index":343,"title":{},"body":{"classes/Logger.html":{},"coverage.html":{}}}],["src/lib/logger.model.ts:11",{"_index":352,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:112",{"_index":363,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:128",{"_index":367,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:145",{"_index":361,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:164",{"_index":365,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:179",{"_index":369,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:199",{"_index":373,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:29",{"_index":376,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:38",{"_index":380,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:48",{"_index":382,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:64",{"_index":356,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:80",{"_index":378,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:96",{"_index":384,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logging",{"_index":505,"title":{},"body":{"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"coverage.html":{}}}],["src/lib/logging.service.ts",{"_index":416,"title":{},"body":{"injectables/LoggingService.html":{},"coverage.html":{}}}],["src/lib/logging.service.ts:138",{"_index":444,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:147",{"_index":433,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:159",{"_index":438,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:31",{"_index":448,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:37",{"_index":447,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:41",{"_index":429,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:80",{"_index":431,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/memory",{"_index":520,"title":{},"body":{"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{}}}],["started",{"_index":578,"title":{"index.html":{}},"body":{}}],["statements",{"_index":553,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":128,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/MemoryAppender.html":{}}}],["step",{"_index":614,"title":{},"body":{"index.html":{}}}],["storage",{"_index":206,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["store",{"_index":229,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{}}}],["stored",{"_index":231,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["stores",{"_index":207,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["storing",{"_index":213,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["string",{"_index":116,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["strings",{"_index":266,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["super",{"_index":136,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["switch",{"_index":321,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["table",{"_index":566,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":565,"title":{},"body":{"coverage.html":{}}}],["takes",{"_index":706,"title":{},"body":{"index.html":{}}}],["testing",{"_index":89,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["tests",{"_index":374,"title":{},"body":{"classes/Logger.html":{}}}],["therefore",{"_index":299,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["this.ajaxappender",{"_index":142,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.addheader(\"content",{"_index":148,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.append(loggingevent",{"_index":174,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.getbatchsize",{"_index":177,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.getlayout",{"_index":179,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.gettimerinterval",{"_index":181,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.setbatchsize(batchsize",{"_index":178,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.setfailcallback((message",{"_index":154,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.setlayout(layout",{"_index":180,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.setlayout(new",{"_index":145,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.setsendallonunload(true",{"_index":152,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.settimed(timerinterval",{"_index":182,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.settimerinterval(timerinterval",{"_index":183,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappenderfailed",{"_index":465,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.ajaxappenderfailed.emit(message",{"_index":491,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.appenderfailed",{"_index":153,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.appenderfailed.emit(message",{"_index":155,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.browserconsoleappender",{"_index":469,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.browserconsoleappender.setlayout(new",{"_index":470,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.browserconsoleappender.setthreshold(convertedthreshold",{"_index":501,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.browserconsoleappender.setthreshold(log4javascript.level.all",{"_index":474,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.configure",{"_index":158,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["this.localstoragekey",{"_index":259,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["this.logger",{"_index":385,"title":{},"body":{"classes/Logger.html":{},"index.html":{}}}],["this.logger.debug.apply(this.logger",{"_index":395,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.entry(methodname",{"_index":624,"title":{},"body":{"index.html":{}}}],["this.logger.error(methodname",{"_index":628,"title":{},"body":{"index.html":{}}}],["this.logger.error.apply(this.logger",{"_index":401,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.exit(methodname",{"_index":625,"title":{},"body":{"index.html":{}}}],["this.logger.fatal.apply(this.logger",{"_index":403,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.info.apply(this.logger",{"_index":397,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.isdebugenabled",{"_index":394,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.iserrorenabled",{"_index":400,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.isfatalenabled",{"_index":402,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.isinfoenabled",{"_index":396,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.istraceenabled",{"_index":390,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.iswarnenabled",{"_index":398,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.setlevel(loglevelconverter.leveltolog4javascript(level",{"_index":389,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.trace.apply(this.logger",{"_index":393,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.warn.apply(this.logger",{"_index":399,"title":{},"body":{"classes/Logger.html":{}}}],["this.logmessages",{"_index":263,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["this.logmessages.length",{"_index":277,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["this.logmessages.push(message",{"_index":292,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["this.logmessages.shift",{"_index":279,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["this.logmessages.splice(0",{"_index":549,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["this.logmessageschanged",{"_index":464,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.logmessageschanged.emit(message",{"_index":481,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.maxmessages",{"_index":278,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["this.memoryappender",{"_index":478,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.memoryappender.configure(configuration.memoryappender",{"_index":497,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.memoryappender.getlogmessages",{"_index":504,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.memoryappender.setlayout(new",{"_index":479,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.memoryappender.setonlogmessageschangedcallback((message",{"_index":480,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.onlogmessageschangedcallback",{"_index":546,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["this.onlogmessageschangedcallback(message",{"_index":547,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["this.setbatchsize(configuration.batchsize",{"_index":166,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.setmaxmessages(configuration.maxmessages",{"_index":272,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["this.setthreshold(convertedthreshold",{"_index":173,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["this.settimerinterval(configuration.timerinterval",{"_index":168,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.url",{"_index":144,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["threshold",{"_index":26,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["thresholddefault",{"_index":133,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["throw",{"_index":137,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"injectables/LoggingService.html":{}}}],["time",{"_index":98,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/LogMessage.html":{},"classes/MemoryAppender.html":{}}}],["timer",{"_index":112,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["timerinterval",{"_index":24,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["timerintervaldefault",{"_index":131,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["timestamp",{"_index":290,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LogMessage.html":{},"classes/MemoryAppender.html":{}}}],["timestamps",{"_index":265,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["tostring",{"_index":41,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["trace",{"_index":195,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["trace(methodname",{"_index":381,"title":{},"body":{"classes/Logger.html":{}}}],["triggered",{"_index":57,"title":{},"body":{"classes/AjaxAppender.html":{},"injectables/LoggingService.html":{}}}],["true",{"_index":718,"title":{},"body":{"index.html":{}}}],["try",{"_index":408,"title":{},"body":{"classes/Logger.html":{},"injectables/LoggingService.html":{},"index.html":{}}}],["tslint:disable",{"_index":249,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["type",{"_index":52,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["typeof",{"_index":167,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["typical",{"_index":16,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["typically",{"_index":615,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":285,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["unit",{"_index":88,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{}}}],["url",{"_index":20,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["usage",{"_index":610,"title":{},"body":{"index.html":{}}}],["use",{"_index":587,"title":{},"body":{"index.html":{}}}],["used",{"_index":86,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"index.html":{}}}],["usefactory",{"_index":721,"title":{},"body":{"index.html":{}}}],["useful",{"_index":536,"title":{},"body":{"classes/MemoryAppender.html":{},"index.html":{}}}],["using",{"_index":524,"title":{},"body":{"classes/MemoryAppender.html":{},"index.html":{}}}],["valid",{"_index":191,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["value",{"_index":239,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["values",{"_index":192,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["version",{"_index":581,"title":{},"body":{"index.html":{}}}],["versions",{"_index":586,"title":{},"body":{"index.html":{}}}],["via",{"_index":14,"title":{},"body":{"classes/AjaxAppender.html":{},"injectables/LoggingService.html":{}}}],["viewer",{"_index":609,"title":{},"body":{"index.html":{}}}],["visible",{"_index":694,"title":{},"body":{"index.html":{}}}],["void",{"_index":69,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["want",{"_index":537,"title":{},"body":{"classes/MemoryAppender.html":{},"index.html":{}}}],["warn",{"_index":134,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["warn(methodname",{"_index":383,"title":{},"body":{"classes/Logger.html":{}}}],["way",{"_index":709,"title":{},"body":{"index.html":{}}}],["write",{"_index":293,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["writes",{"_index":729,"title":{},"body":{"index.html":{}}}],["writing",{"_index":344,"title":{},"body":{"classes/Logger.html":{},"index.html":{}}}],["written",{"_index":341,"title":{},"body":{"interfaces/LogMessage.html":{},"index.html":{}}}],["yes",{"_index":353,"title":{},"body":{"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AjaxAppender.html":{"url":"classes/AjaxAppender.html","title":"class - AjaxAppender","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AjaxAppender\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ajax-appender.model.ts\n        \n\n            \n                Description\n            \n            \n                An appender which sends the log messages to a server via HTTP.\nA typical configuration could be:\n```json\n\n{\n\"url\": \"https://my.backend.xy/LoggingBackend\",\n\"batchSize\": 10,\n\"timerInterval\": 60000,\n\"threshold\": \"INFO\"\n}\n```\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                appenderFailed\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                append\n                            \n                            \n                                    Public\n                                configure\n                            \n                            \n                                    Public\n                                getBatchSize\n                            \n                            \n                                    Public\n                                getInternalAppender\n                            \n                            \n                                    Public\n                                getLayout\n                            \n                            \n                                    Public\n                                getTimerInterval\n                            \n                            \n                                    Public\n                                setBatchSize\n                            \n                            \n                                    Public\n                                setLayout\n                            \n                            \n                                    Public\n                                setTimerInterval\n                            \n                            \n                                    Public\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configuration: AjaxAppenderConfiguration)\n                    \n                \n                        \n                            \n                                Defined in src/lib/ajax-appender.model.ts:35\n                            \n                        \n\n                \n                    \n                            Creates a new instance of the appender.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configuration\n                                                  \n                                                        \n                                                                        AjaxAppenderConfiguration\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                configuration for the appender.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            appenderFailed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     EventEmitter\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/ajax-appender.model.ts:32\n                            \n                        \n\n                \n                    \n                        Event triggered when the appender could not send log messages to the server.\n\n                    \n                \n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                                    Description\n                                          \n                                      \n                                      \n                                                \n                                                        message\n                                                        \n                                                                error message\n\n                                                        \n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            append\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    append(loggingEvent: log4javascript.LoggingEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:103\n                \n            \n\n\n            \n                \n                    Appender-specific method to append a log message.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    loggingEvent\n                                    \n                                            log4javascript.LoggingEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        event to be appended.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            configure\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(configuration: AjaxAppenderConfiguration)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:80\n                \n            \n\n\n            \n                \n                    Configures the logging depending on the given configuration.\nOnly the defined properties get overwritten.\nThe url cannot be modified.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    configuration\n                                    \n                                                AjaxAppenderConfiguration\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        configuration data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getBatchSize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getBatchSize()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:127\n                \n            \n\n\n            \n                \n                    Returns the number of log messages sent in each request.\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getInternalAppender\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getInternalAppender()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:120\n                \n            \n\n\n            \n                \n                    Get the internally used appender.\nMainly for unit testing purposes.\n\n\n                    \n                        Returns :         log4javascript.AjaxAppender\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLayout\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLayout()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:142\n                \n            \n\n\n            \n                \n                    Returns the appender's layout.\n\n\n                    \n                        Returns :     log4javascript.Layout\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getTimerInterval\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTimerInterval()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:156\n                \n            \n\n\n            \n                \n                    Returns the length of time in milliseconds between each sending of queued log messages.\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setBatchSize\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setBatchSize(batchSize: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:135\n                \n            \n\n\n            \n                \n                    Sets the number of log messages to send in each request.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    batchSize\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        new batch size\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setLayout\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setLayout(layout: log4javascript.Layout)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:149\n                \n            \n\n\n            \n                \n                    Sets the appender's layout.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    layout\n                                    \n                                            log4javascript.Layout\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setTimerInterval\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setTimerInterval(timerInterval: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:164\n                \n            \n\n\n            \n                \n                    Sets the length of time in milliseconds between each sending of queued log messages.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    timerInterval\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        new timer interval\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            toString\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toString()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/ajax-appender.model.ts:112\n                \n            \n\n\n            \n                \n                    Gets the appender's name.\nMainly for unit testing purposes.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        appender's name\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EventEmitter } from \"@angular/core\";\n\nimport * as log4javascript from \"log4javascript\";\n\nimport { AjaxAppenderConfiguration } from \"./ajax-appender.configuration\";\nimport { LogLevelConverter } from \"./log-level.converter\";\n\n/**\n * An appender which sends the log messages to a server via HTTP.\n *\n * A typical configuration could be:\n *\n * ```json\n * {\n *   \"url\": \"https://my.backend.xy/LoggingBackend\",\n *   \"batchSize\": 10,\n *   \"timerInterval\": 60000,\n *   \"threshold\": \"INFO\"\n * }\n * ```\n */\nexport class AjaxAppender extends log4javascript.Appender {\n\n\tprivate static batchSizeDefault = 1;\n\tprivate static timerIntervalDefault = 0;\n\tprivate static thresholdDefault = \"WARN\";\n\n\t/**\n\t * Event triggered when the appender could not send log messages to the server.\n\t * @param message error message\n\t */\n\tpublic appenderFailed: EventEmitter;\n\n\tprivate ajaxAppender: log4javascript.AjaxAppender;\n\tprivate url: string;\n\n\t/**\n\t * Creates a new instance of the appender.\n\t * @param configuration configuration for the appender.\n\t */\n\tconstructor(configuration: AjaxAppenderConfiguration) {\n\t\tsuper();\n\n\t\tif (!configuration) {\n\t\t\tthrow new Error(\"configuration must be not empty\");\n\t\t}\n\t\tif (!configuration.url) {\n\t\t\tthrow new Error(\"url must be not empty\");\n\t\t}\n\t\tthis.ajaxAppender = new log4javascript.AjaxAppender(configuration.url);\n\t\tthis.url = configuration.url;\n\n\t\tthis.ajaxAppender.setLayout(new log4javascript.JsonLayout(false, false));\n\t\tthis.ajaxAppender.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\t\tthis.ajaxAppender.setSendAllOnUnload(true);\n\n\t\tthis.appenderFailed = new EventEmitter();\n\t\tthis.ajaxAppender.setFailCallback((message: any) => {\n\t\t\tthis.appenderFailed.emit(message);\n\t\t});\n\n\t\t// process remaining configuration\n\t\tthis.configure({\n\t\t\tbatchSize: configuration.batchSize || AjaxAppender.batchSizeDefault,\n\t\t\tthreshold: configuration.threshold || AjaxAppender.thresholdDefault,\n\t\t\ttimerInterval: configuration.timerInterval || AjaxAppender.timerIntervalDefault,\n\t\t\turl: configuration.url,\n\t\t});\n\n\t}\n\n\t/**\n\t * Configures the logging depending on the given configuration.\n\t *\n\t * Only the defined properties get overwritten.\n\t * The url cannot be modified.\n\t *\n\t * @param configuration configuration data.\n\t */\n\tpublic configure(configuration: AjaxAppenderConfiguration): void {\n\t\tif (configuration) {\n\t\t\tif (configuration.url && configuration.url !== this.url) {\n\t\t\t\tthrow new Error(\"url must not be changed\");\n\t\t\t}\n\t\t\tif (configuration.batchSize) {\n\t\t\t\tthis.setBatchSize(configuration.batchSize);\n\t\t\t}\n\t\t\tif (typeof configuration.timerInterval === \"number\") {\n\t\t\t\tthis.setTimerInterval(configuration.timerInterval);\n\t\t\t}\n\t\t\tif (configuration.threshold) {\n\t\t\t\tconst convertedThreshold = LogLevelConverter.levelToLog4Javascript(\n\t\t\t\t\tLogLevelConverter.levelFromString(configuration.threshold));\n\t\t\t\tthis.setThreshold(convertedThreshold);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Appender-specific method to append a log message.\n\t * @param loggingEvent event to be appended.\n\t */\n\tpublic append(loggingEvent: log4javascript.LoggingEvent): void {\n\t\tthis.ajaxAppender.append(loggingEvent);\n\t}\n\n\t/**\n\t * Gets the appender's name.\n\t * Mainly for unit testing purposes.\n\t * @return appender's name\n\t */\n\tpublic toString(): string {\n\t\treturn \"Ionic.Logging.AjaxAppender\";\n\t}\n\n\t/**\n\t * Get the internally used appender.\n\t * Mainly for unit testing purposes.\n\t */\n\tpublic getInternalAppender(): log4javascript.AjaxAppender {\n\t\treturn this.ajaxAppender;\n\t}\n\n\t/**\n\t * Returns the number of log messages sent in each request.\n\t */\n\tpublic getBatchSize(): number {\n\t\treturn this.ajaxAppender.getBatchSize();\n\t}\n\n\t/**\n\t * Sets the number of log messages to send in each request.\n\t * @param batchSize new batch size\n\t */\n\tpublic setBatchSize(batchSize: number): void {\n\t\tthis.ajaxAppender.setBatchSize(batchSize);\n\t}\n\n\t/**\n\t * Returns the appender's layout.\n\t */\n\tpublic getLayout(): log4javascript.Layout {\n\t\treturn this.ajaxAppender.getLayout();\n\t}\n\n\t/**\n\t * Sets the appender's layout.\n\t */\n\tpublic setLayout(layout: log4javascript.Layout): void {\n\t\tthis.ajaxAppender.setLayout(layout);\n\t}\n\n\t/**\n\t * Returns the length of time in milliseconds between each sending of queued log messages.\n\t */\n\tpublic getTimerInterval(): number {\n\t\treturn this.ajaxAppender.getTimerInterval();\n\t}\n\n\t/**\n\t * Sets the length of time in milliseconds between each sending of queued log messages.\n\t * @param timerInterval new timer interval\n\t */\n\tpublic setTimerInterval(timerInterval: number): void {\n\t\tthis.ajaxAppender.setTimed(timerInterval > 0);\n\t\tthis.ajaxAppender.setTimerInterval(timerInterval);\n\t}\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AjaxAppenderConfiguration.html":{"url":"interfaces/AjaxAppenderConfiguration.html","title":"interface - AjaxAppenderConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AjaxAppenderConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ajax-appender.configuration.ts\n        \n\n            \n                Description\n            \n            \n                Configuration for AjaxAppender.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        batchSize\n                                \n                                \n                                            Optional\n                                        threshold\n                                \n                                \n                                            Optional\n                                        timerInterval\n                                \n                                \n                                        url\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        batchSize\n                                    \n                                \n                                \n                                    \n                                        batchSize:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Number of log messages sent in each request.\nDefault: 1.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        threshold\n                                    \n                                \n                                \n                                    \n                                        threshold:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Threshold.\nValid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN\nDefault: WARN.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timerInterval\n                                    \n                                \n                                \n                                    \n                                        timerInterval:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Interval for sending log messages (in milliseconds).\nIf set to 0, every message will be sent immediatedly.\nDefault: 0.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Url to send JavaScript logs\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface AjaxAppenderConfiguration {\n\n\t/**\n\t * Url to send JavaScript logs\n\t */\n\turl: string;\n\n\t/**\n\t * Number of log messages sent in each request.\n\t *\n\t * Default: 1.\n\t */\n\tbatchSize?: number;\n\n\t/**\n\t * Interval for sending log messages (in milliseconds).\n\t *\n\t * If set to 0, every message will be sent immediatedly.\n\t *\n\t * Default: 0.\n\t */\n\ttimerInterval?: number;\n\n\t/**\n\t * Threshold.\n\t *\n\t * Valid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN\n\t *\n\t * Default: WARN.\n\t */\n\tthreshold?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BrowserConsoleAppenderConfiguration.html":{"url":"interfaces/BrowserConsoleAppenderConfiguration.html","title":"interface - BrowserConsoleAppenderConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  BrowserConsoleAppenderConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/browser-console-appender.configuration.ts\n        \n\n            \n                Description\n            \n            \n                Configuration for BrowserConsoleAppender.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        threshold\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        threshold\n                                    \n                                \n                                \n                                    \n                                        threshold:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Threshold.\nValid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN\nDefault: DEBUG.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface BrowserConsoleAppenderConfiguration {\n\t/**\n\t * Threshold.\n\t *\n\t * Valid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN\n\t *\n\t * Default: DEBUG.\n\t */\n\tthreshold?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LocalStorageAppender.html":{"url":"classes/LocalStorageAppender.html","title":"class - LocalStorageAppender","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LocalStorageAppender\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/local-storage-appender.model.ts\n        \n\n            \n                Description\n            \n            \n                An appender which stores the log messages in the browser's local storage.\nThe messages are saved JSON-serialized.\nYou have to configure which key is used for storing the messages.\nA typical configuration could be:\n```json\n\n{\n\"localStorageKey\": \"myLogs\",\n\"maxMessages\": 500,\n\"threshold\": \"INFO\"\n}\n```\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                append\n                            \n                            \n                                    Public\n                                clearLog\n                            \n                            \n                                    Public\n                                configure\n                            \n                            \n                                    Public\n                                getLocalStorageKey\n                            \n                            \n                                    Public\n                                getLogMessages\n                            \n                            \n                                    Public\n                                getMaxMessages\n                            \n                            \n                                    Public\n                                setMaxMessages\n                            \n                            \n                                    Public\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configuration: LocalStorageAppenderConfiguration)\n                    \n                \n                        \n                            \n                                Defined in src/lib/local-storage-appender.model.ts:34\n                            \n                        \n\n                \n                    \n                            Creates a new instance of the appender.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configuration\n                                                  \n                                                        \n                                                                        LocalStorageAppenderConfiguration\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                configuration for the appender.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            append\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    append(loggingEvent: log4javascript.LoggingEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:100\n                \n            \n\n\n            \n                \n                    Appender-specific method to append a log message.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    loggingEvent\n                                    \n                                            log4javascript.LoggingEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        event to be appended.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            clearLog\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    clearLog()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:177\n                \n            \n\n\n            \n                \n                    Removes all messages from local storage.\nMainly for unit testing purposes.\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            configure\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(configuration: LocalStorageAppenderConfiguration)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:80\n                \n            \n\n\n            \n                \n                    Configures the logging depending on the given configuration.\nOnly the defined properties get overwritten.\nThe localStorageKey cannot be modified.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    configuration\n                                    \n                                                LocalStorageAppenderConfiguration\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        configuration data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLocalStorageKey\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLocalStorageKey()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:131\n                \n            \n\n\n            \n                \n                    Get the key which is used to store the messages in the local storage.\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLogMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLogMessages()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:169\n                \n            \n\n\n            \n                \n                    Gets all messages stored in local storage.\nMainly for unit testing purposes.\n\n\n                    \n                    \n                    \n                        Returns :         LogMessage[]\n\n                    \n                    \n                        stored messages\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMaxMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMaxMessages()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:138\n                \n            \n\n\n            \n                \n                    Get the maximum number of messages which will be stored in local storage.\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setMaxMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setMaxMessages(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:148\n                \n            \n\n\n            \n                \n                    Set the maximum number of messages which will be stored in local storage.\nIf the appender stores currently more messages than the new value allows, the oldest messages get removed.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        new maximum number\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            toString\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toString()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/local-storage-appender.model.ts:124\n                \n            \n\n\n            \n                \n                    Gets the appender's name.\nMainly for unit testing purposes.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        appender's name\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as log4javascript from \"log4javascript\";\n\nimport { LocalStorageAppenderConfiguration } from \"./local-storage-appender.configuration\";\nimport { LogLevelConverter } from \"./log-level.converter\";\nimport { LogLevel } from \"./log-level.model\";\nimport { LogMessage } from \"./log-message.model\";\n\n/**\n * An appender which stores the log messages in the browser's local storage.\n *\n * The messages are saved JSON-serialized.\n * You have to configure which key is used for storing the messages.\n *\n * A typical configuration could be:\n *\n * ```json\n * {\n *   \"localStorageKey\": \"myLogs\",\n *   \"maxMessages\": 500,\n *   \"threshold\": \"INFO\"\n * }\n * ```\n */\nexport class LocalStorageAppender extends log4javascript.Appender {\n\n\tprivate static maxMessagesDefault = 250;\n\tprivate static thresholdDefault = \"WARN\";\n\n\tprivate maxMessages: number;\n\n\t// tslint:disable-next-line:completed-docs\n\tprivate localStorageKey: string;\n\t// tslint:disable-next-line:completed-docs\n\tprivate logMessages: LogMessage[];\n\n\t/**\n\t * Creates a new instance of the appender.\n\t * @param configuration configuration for the appender.\n\t */\n\tconstructor(configuration: LocalStorageAppenderConfiguration) {\n\t\tsuper();\n\n\t\tif (!configuration) {\n\t\t\tthrow new Error(\"configuration must be not empty\");\n\t\t}\n\t\t// tslint:disable-next-line:no-null-keyword\n\t\tif (!configuration.localStorageKey || configuration.localStorageKey === \"\") {\n\t\t\tthrow new Error(\"localStorageKey must be not empty\");\n\t\t}\n\t\tthis.localStorageKey = configuration.localStorageKey;\n\n\t\t// read existing logMessages\n\t\t// tslint:disable-next-line:no-null-keyword\n\t\tif (localStorage.getItem(this.localStorageKey) === null) {\n\t\t\tthis.logMessages = [];\n\t\t} else {\n\t\t\tthis.logMessages = JSON.parse(localStorage.getItem(this.localStorageKey));\n\t\t\tfor (const logMessage of this.logMessages) {\n\t\t\t\t// timestamps are serialized as strings\n\t\t\t\tlogMessage.timeStamp = new Date(logMessage.timeStamp);\n\t\t\t}\n\t\t}\n\n\t\t// process remaining configuration\n\t\tthis.configure({\n\t\t\tlocalStorageKey: configuration.localStorageKey,\n\t\t\tmaxMessages: configuration.maxMessages || LocalStorageAppender.maxMessagesDefault,\n\t\t\tthreshold: configuration.threshold || LocalStorageAppender.thresholdDefault,\n\t\t});\n\t}\n\n\t/**\n\t * Configures the logging depending on the given configuration.\n\t *\n\t * Only the defined properties get overwritten.\n\t * The localStorageKey cannot be modified.\n\t *\n\t * @param configuration configuration data.\n\t */\n\tpublic configure(configuration: LocalStorageAppenderConfiguration): void {\n\t\tif (configuration) {\n\t\t\tif (configuration.localStorageKey && configuration.localStorageKey !== this.localStorageKey) {\n\t\t\t\tthrow new Error(\"localStorageKey must not be changed\");\n\t\t\t}\n\t\t\tif (configuration.maxMessages) {\n\t\t\t\tthis.setMaxMessages(configuration.maxMessages);\n\t\t\t}\n\t\t\tif (configuration.threshold) {\n\t\t\t\tconst convertedThreshold = LogLevelConverter.levelToLog4Javascript(\n\t\t\t\t\tLogLevelConverter.levelFromString(configuration.threshold));\n\t\t\t\tthis.setThreshold(convertedThreshold);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Appender-specific method to append a log message.\n\t * @param loggingEvent event to be appended.\n\t */\n\tpublic append(loggingEvent: log4javascript.LoggingEvent): void {\n\t\t// if logMessages is already full, remove oldest element\n\t\twhile (this.logMessages.length >= this.maxMessages) {\n\t\t\tthis.logMessages.shift();\n\t\t}\n\t\t// add event to logMessages\n\t\tconst message: LogMessage = {\n\t\t\tlevel: LogLevel[LogLevelConverter.levelFromLog4Javascript(loggingEvent.level)],\n\t\t\tlogger: typeof loggingEvent.logger !== \"undefined\" ? loggingEvent.logger.name : undefined,\n\t\t\tmessage: loggingEvent.messages.slice(1),\n\t\t\tmethodName: loggingEvent.messages[0],\n\t\t\ttimeStamp: loggingEvent.timeStamp,\n\t\t};\n\t\tthis.logMessages.push(message);\n\n\t\t// write values to localStorage\n\t\tlocalStorage.setItem(this.localStorageKey, JSON.stringify(this.logMessages));\n\t}\n\n\t/**\n\t * Gets the appender's name.\n\t * Mainly for unit testing purposes.\n\t * @return appender's name\n\t */\n\tpublic toString(): string {\n\t\treturn \"Ionic.Logging.LocalStorageAppender\";\n\t}\n\n\t/**\n\t * Get the key which is used to store the messages in the local storage.\n\t */\n\tpublic getLocalStorageKey(): string {\n\t\treturn this.localStorageKey;\n\t}\n\n\t/**\n\t * Get the maximum number of messages which will be stored in local storage.\n\t */\n\tpublic getMaxMessages(): number {\n\t\treturn this.maxMessages;\n\t}\n\n\t/**\n\t * Set the maximum number of messages which will be stored in local storage.\n\t *\n\t * If the appender stores currently more messages than the new value allows, the oldest messages get removed.\n\t * @param value new maximum number\n\t */\n\tpublic setMaxMessages(value: number): void {\n\t\tif (this.maxMessages !== value) {\n\t\t\tthis.maxMessages = value;\n\n\t\t\tif (this.logMessages.length > this.maxMessages) {\n\t\t\t\t// there are too much logMessages for the new value, therefore remove oldest messages\n\t\t\t\twhile (this.logMessages.length > this.maxMessages) {\n\t\t\t\t\tthis.logMessages.shift();\n\t\t\t\t}\n\n\t\t\t\t// write values to localStorage\n\t\t\t\tlocalStorage.setItem(this.localStorageKey, JSON.stringify(this.logMessages));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Gets all messages stored in local storage.\n\t * Mainly for unit testing purposes.\n\t * @return stored messages\n\t */\n\tpublic getLogMessages(): LogMessage[] {\n\t\treturn this.logMessages;\n\t}\n\n\t/**\n\t * Removes all messages from local storage.\n\t * Mainly for unit testing purposes.\n\t */\n\tpublic clearLog(): void {\n\t\tthis.logMessages = [];\n\t\tlocalStorage.removeItem(this.localStorageKey);\n\t}\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LocalStorageAppenderConfiguration.html":{"url":"interfaces/LocalStorageAppenderConfiguration.html","title":"interface - LocalStorageAppenderConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  LocalStorageAppenderConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/local-storage-appender.configuration.ts\n        \n\n            \n                Description\n            \n            \n                Configuration for LocalStorageAppender.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        localStorageKey\n                                \n                                \n                                            Optional\n                                        maxMessages\n                                \n                                \n                                            Optional\n                                        threshold\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        localStorageKey\n                                    \n                                \n                                \n                                    \n                                        localStorageKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Key which is used to store the messages in the local storage.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxMessages\n                                    \n                                \n                                \n                                    \n                                        maxMessages:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Maximum number of log messages stored by the appender.\nDefault: 250.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        threshold\n                                    \n                                \n                                \n                                    \n                                        threshold:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Threshold.\nValid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN\nDefault: WARN.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface LocalStorageAppenderConfiguration {\n\t/**\n\t * Key which is used to store the messages in the local storage.\n\t */\n\tlocalStorageKey: string;\n\n\t/**\n\t * Maximum number of log messages stored by the appender.\n\t *\n\t * Default: 250.\n\t */\n\tmaxMessages?: number;\n\n\t/**\n\t * Threshold.\n\t *\n\t * Valid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN\n\t *\n\t * Default: WARN.\n\t */\n\tthreshold?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LogLevelConverter.html":{"url":"classes/LogLevelConverter.html","title":"class - LogLevelConverter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LogLevelConverter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/log-level.converter.ts\n        \n\n            \n                Description\n            \n            \n                Helper class for converting log levels from and to different data type.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                levelFromLog4Javascript\n                            \n                            \n                                    Static\n                                levelFromString\n                            \n                            \n                                    Static\n                                levelToLog4Javascript\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            levelFromLog4Javascript\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    levelFromLog4Javascript(level: log4javascript.Level)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/log-level.converter.ts:15\n                \n            \n\n\n            \n                \n                    Converts log4javascript.Level to internal LogLevel.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    level\n                                    \n                                            log4javascript.Level\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        log4javascript's data type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         LogLevel\n\n                    \n                    \n                        internal data type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            levelFromString\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    levelFromString(level: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/log-level.converter.ts:43\n                \n            \n\n\n            \n                \n                    Converts string representation to internal LogLevel.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    level\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        string representation\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         LogLevel\n\n                    \n                    \n                        internal data type.\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            levelToLog4Javascript\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    levelToLog4Javascript(level: LogLevel)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/log-level.converter.ts:71\n                \n            \n\n\n            \n                \n                    Converts internal LogLevel to log4javascript.Level.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    level\n                                    \n                                                LogLevel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     log4javascript.Level\n\n                    \n                    \n                        level log4javascript's data type\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as log4javascript from \"log4javascript\";\n\nimport { LogLevel } from \"./log-level.model\";\n\n/**\n * Helper class for converting log levels from and to different data type.\n */\nexport class LogLevelConverter {\n\n\t/**\n\t * Converts log4javascript.Level to internal LogLevel.\n\t * @param level log4javascript's data type\n\t * @return internal data type.\n\t */\n\tpublic static levelFromLog4Javascript(level: log4javascript.Level): LogLevel {\n\t\tswitch (level) {\n\t\t\tcase log4javascript.Level.ALL:\n\t\t\t\treturn LogLevel.ALL;\n\t\t\tcase log4javascript.Level.DEBUG:\n\t\t\t\treturn LogLevel.DEBUG;\n\t\t\tcase log4javascript.Level.ERROR:\n\t\t\t\treturn LogLevel.ERROR;\n\t\t\tcase log4javascript.Level.FATAL:\n\t\t\t\treturn LogLevel.FATAL;\n\t\t\tcase log4javascript.Level.INFO:\n\t\t\t\treturn LogLevel.INFO;\n\t\t\tcase log4javascript.Level.OFF:\n\t\t\t\treturn LogLevel.OFF;\n\t\t\tcase log4javascript.Level.TRACE:\n\t\t\t\treturn LogLevel.TRACE;\n\t\t\tcase log4javascript.Level.WARN:\n\t\t\t\treturn LogLevel.WARN;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`invalid level ${level}`);\n\t\t}\n\t}\n\n\t/**\n\t * Converts string representation to internal LogLevel.\n\t * @param level string representation\n\t * @return internal data type.\n\t */\n\tpublic static levelFromString(level: string): LogLevel {\n\t\tswitch (level) {\n\t\t\tcase \"ALL\":\n\t\t\t\treturn LogLevel.ALL;\n\t\t\tcase \"DEBUG\":\n\t\t\t\treturn LogLevel.DEBUG;\n\t\t\tcase \"ERROR\":\n\t\t\t\treturn LogLevel.ERROR;\n\t\t\tcase \"FATAL\":\n\t\t\t\treturn LogLevel.FATAL;\n\t\t\tcase \"INFO\":\n\t\t\t\treturn LogLevel.INFO;\n\t\t\tcase \"OFF\":\n\t\t\t\treturn LogLevel.OFF;\n\t\t\tcase \"TRACE\":\n\t\t\t\treturn LogLevel.TRACE;\n\t\t\tcase \"WARN\":\n\t\t\t\treturn LogLevel.WARN;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`invalid level ${level}`);\n\t\t}\n\t}\n\n\t/**\n\t * Converts internal LogLevel to log4javascript.Level.\n\t * @param internal data type.\n\t * @return level log4javascript's data type\n\t */\n\tpublic static levelToLog4Javascript(level: LogLevel): log4javascript.Level {\n\t\tswitch (level) {\n\t\t\tcase LogLevel.ALL:\n\t\t\t\treturn log4javascript.Level.ALL;\n\t\t\tcase LogLevel.DEBUG:\n\t\t\t\treturn log4javascript.Level.DEBUG;\n\t\t\tcase LogLevel.ERROR:\n\t\t\t\treturn log4javascript.Level.ERROR;\n\t\t\tcase LogLevel.FATAL:\n\t\t\t\treturn log4javascript.Level.FATAL;\n\t\t\tcase LogLevel.INFO:\n\t\t\t\treturn log4javascript.Level.INFO;\n\t\t\tcase LogLevel.OFF:\n\t\t\t\treturn log4javascript.Level.OFF;\n\t\t\tcase LogLevel.TRACE:\n\t\t\t\treturn log4javascript.Level.TRACE;\n\t\t\tcase LogLevel.WARN:\n\t\t\t\treturn log4javascript.Level.WARN;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`invalid level ${level}`);\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LogMessage.html":{"url":"interfaces/LogMessage.html","title":"interface - LogMessage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  LogMessage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/log-message.model.ts\n        \n\n            \n                Description\n            \n            \n                Log message.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        level\n                                \n                                \n                                        logger\n                                \n                                \n                                        message\n                                \n                                \n                                        methodName\n                                \n                                \n                                        timeStamp\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        level\n                                    \n                                \n                                \n                                    \n                                        level:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Log level.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logger\n                                    \n                                \n                                \n                                    \n                                        logger:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of the logger.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Message.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        methodName\n                                    \n                                \n                                \n                                    \n                                        methodName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Method, in which the message was written.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timeStamp\n                                    \n                                \n                                \n                                    \n                                        timeStamp:         Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Date\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Time when the log was written.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface LogMessage {\n\t/**\n\t * Time when the log was written.\n\t */\n\ttimeStamp: Date;\n\n\t/**\n\t * Log level.\n\t */\n\tlevel: string;\n\n\t/**\n\t * Name of the logger.\n\t */\n\tlogger: string;\n\n\t/**\n\t * Method, in which the message was written.\n\t */\n\tmethodName: string;\n\n\t/**\n\t * Message.\n\t */\n\tmessage: string[];\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Logger.html":{"url":"classes/Logger.html","title":"class - Logger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Logger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/logger.model.ts\n        \n\n            \n                Description\n            \n            \n                Logger for writing log messages.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                debug\n                            \n                            \n                                    Public\n                                entry\n                            \n                            \n                                    Public\n                                error\n                            \n                            \n                                    Public\n                                exit\n                            \n                            \n                                    Public\n                                fatal\n                            \n                            \n                                    Public\n                                formatArgument\n                            \n                            \n                                    Public\n                                getInternalLogger\n                            \n                            \n                                    Public\n                                getLogLevel\n                            \n                            \n                                    Public\n                                info\n                            \n                            \n                                    Public\n                                setLogLevel\n                            \n                            \n                                    Public\n                                trace\n                            \n                            \n                                    Public\n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger?: string | any)\n                    \n                \n                        \n                            \n                                Defined in src/lib/logger.model.ts:11\n                            \n                        \n\n                \n                    \n                            Creates a new instance of a logger.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    string | any\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            debug\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    debug(methodName: string, ...params: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:64\n                \n            \n\n\n            \n                \n                    Logs a message at level DEBUG.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    methodName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the method\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        optional parameters to be logged; objects will be formatted as JSON\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            entry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    entry(methodName: string, ...params: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:145\n                \n            \n\n\n            \n                \n                    Logs the entry into a method.\nThe method name will be logged at level INFO, the parameters at level DEBUG.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    methodName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the method\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        optional parameters to be logged; objects will be formatted as JSON\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            error\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    error(methodName: string, ...params: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:112\n                \n            \n\n\n            \n                \n                    Logs a message at level ERROR.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    methodName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the method\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        optional parameters to be logged; objects will be formatted as JSON\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            exit\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    exit(methodName: string, ...params: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:164\n                \n            \n\n\n            \n                \n                    Logs the exit of a method.\nThe method name will be logged at level INFO, the parameters at level DEBUG.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    methodName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the method\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        optional parameters to be logged; objects will be formatted as JSON\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            fatal\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fatal(methodName: string, ...params: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:128\n                \n            \n\n\n            \n                \n                    Logs a message at level FATAL.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    methodName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the method\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        optional parameters to be logged; objects will be formatted as JSON\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            formatArgument\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    formatArgument(arg: any)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:179\n                \n            \n\n\n            \n                \n                    Formats the given argument.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    arg\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getInternalLogger\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getInternalLogger()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:199\n                \n            \n\n\n            \n                \n                    Returns the internal Logger (for unit tests only).\n\n\n                    \n                        Returns :         log4javascript.Logger\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLogLevel\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLogLevel()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:29\n                \n            \n\n\n            \n                \n                    Get the log level.\n\n\n                    \n                        Returns :         LogLevel\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            info\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    info(methodName: string, ...params: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:80\n                \n            \n\n\n            \n                \n                    Logs a message at level INFO.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    methodName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the method\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        optional parameters to be logged; objects will be formatted as JSON\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setLogLevel\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setLogLevel(level: LogLevel)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:38\n                \n            \n\n\n            \n                \n                    Set the log level.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    level\n                                    \n                                                LogLevel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the new log level\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            trace\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    trace(methodName: string, ...params: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:48\n                \n            \n\n\n            \n                \n                    Logs a message at level TRACE.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    methodName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the method\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        optional parameters to be logged; objects will be formatted as JSON\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            warn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    warn(methodName: string, ...params: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logger.model.ts:96\n                \n            \n\n\n            \n                \n                    Logs a message at level WARN.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    methodName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the method\n\n                                    \n                                \n                                \n                                    params\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        optional parameters to be logged; objects will be formatted as JSON\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as log4javascript from \"log4javascript\";\n\nimport { LogLevelConverter } from \"./log-level.converter\";\nimport { LogLevel } from \"./log-level.model\";\n\n/**\n * Logger for writing log messages.\n */\nexport class Logger {\n\n\tprivate logger: log4javascript.Logger;\n\n\t/**\n\t * Creates a new instance of a logger.\n\t */\n\tconstructor(logger?: string | any) {\n\t\tif (typeof logger === \"undefined\") {\n\t\t\tthis.logger = log4javascript.getRootLogger();\n\t\t} else if (typeof logger === \"string\") {\n\t\t\tthis.logger = log4javascript.getLogger(logger);\n\t\t} else {\n\t\t\tthis.logger = logger;\n\t\t}\n\t}\n\n\t/**\n\t * Get the log level.\n\t */\n\tpublic getLogLevel(): LogLevel {\n\t\treturn LogLevelConverter.levelFromLog4Javascript(this.logger.getLevel());\n\t}\n\n\t/**\n\t * Set the log level.\n\t *\n\t * @param level the new log level\n\t */\n\tpublic setLogLevel(level: LogLevel): void {\n\t\tthis.logger.setLevel(LogLevelConverter.levelToLog4Javascript(level));\n\t}\n\n\t/**\n\t * Logs a message at level TRACE.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic trace(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isTraceEnabled()) {\n\t\t\tconst args = [methodName];\n\t\t\tfor (const param of params) {\n\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t}\n\t\t\tthis.logger.trace.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Logs a message at level DEBUG.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic debug(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isDebugEnabled()) {\n\t\t\tconst args = [methodName];\n\t\t\tfor (const param of params) {\n\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t}\n\t\t\tthis.logger.debug.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Logs a message at level INFO.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic info(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isInfoEnabled()) {\n\t\t\tconst args = [methodName];\n\t\t\tfor (const param of params) {\n\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t}\n\t\t\tthis.logger.info.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Logs a message at level WARN.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic warn(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isWarnEnabled()) {\n\t\t\tconst args = [methodName];\n\t\t\tfor (const param of params) {\n\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t}\n\t\t\tthis.logger.warn.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Logs a message at level ERROR.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic error(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isErrorEnabled()) {\n\t\t\tconst args = [methodName];\n\t\t\tfor (const param of params) {\n\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t}\n\t\t\tthis.logger.error.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Logs a message at level FATAL.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic fatal(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isFatalEnabled()) {\n\t\t\tconst args = [methodName];\n\t\t\tfor (const param of params) {\n\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t}\n\t\t\tthis.logger.fatal.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Logs the entry into a method.\n\t * The method name will be logged at level INFO, the parameters at level DEBUG.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic entry(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isInfoEnabled()) {\n\t\t\tconst args = [methodName, \"entry\"];\n\t\t\tif (this.logger.isDebugEnabled()) {\n\t\t\t\tfor (const param of params) {\n\t\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.logger.info.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Logs the exit of a method.\n\t * The method name will be logged at level INFO, the parameters at level DEBUG.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic exit(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isInfoEnabled()) {\n\t\t\tconst args = [methodName, \"exit\"];\n\t\t\tif (this.logger.isDebugEnabled()) {\n\t\t\t\tfor (const param of params) {\n\t\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.logger.info.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Formats the given argument.\n\t */\n\tpublic formatArgument(arg: any): string {\n\t\tif (typeof arg === \"string\") {\n\t\t\treturn arg;\n\t\t} else if (typeof arg === \"number\") {\n\t\t\treturn arg.toString();\n\t\t} else if (arg instanceof Error) {\n\t\t\t// JSON.stringify() returns here \"{ }\"\n\t\t\treturn arg.toString();\n\t\t} else {\n\t\t\ttry {\n\t\t\t\treturn JSON.stringify(arg);\n\t\t\t} catch (e) {\n\t\t\t\treturn e.message;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns the internal Logger (for unit tests only).\n\t */\n\tpublic getInternalLogger(): log4javascript.Logger {\n\t\treturn this.logger;\n\t}\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingService.html":{"url":"injectables/LoggingService.html","title":"injectable - LoggingService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LoggingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/logging.service.ts\n        \n\n            \n                Description\n            \n            \n                Service for logging functionality.\nBy default, the following settings are used:\n\nlogger: root with level WARN\nappender: BrowserConsoleAppender with threshold DEBUG and MemoryAppender with threshold ALL\n\nVia configure, it is possible to amend these settings.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                ajaxAppenderFailed\n                            \n                            \n                                    Public\n                                logMessagesChanged\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                configure\n                            \n                            \n                                    Public\n                                getLogger\n                            \n                            \n                                    Public\n                                getLogMessages\n                            \n                            \n                                    Public\n                                getRootLogger\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/lib/logging.service.ts:41\n                            \n                        \n\n                \n                    \n                            Creates a new instance of the service.\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            configure\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(configuration?: LoggingServiceConfiguration)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logging.service.ts:80\n                \n            \n\n\n            \n                \n                    Configures the logging depending on the given configuration.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    configuration\n                                    \n                                                LoggingServiceConfiguration\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        configuration data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLogger\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLogger(loggerName: string)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logging.service.ts:147\n                \n            \n\n\n            \n                \n                    Gets a logger with the specified name, creating it if a logger with that name does not already exist.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    loggerName\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        name of the logger\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Logger\n\n                    \n                    \n                        logger\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLogMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLogMessages()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logging.service.ts:159\n                \n            \n\n\n            \n                \n                    Gets the last log messages.\nThe log messages are retrieved from the internal MemoryAppender.\nThat means you will get only the most current messages. The number of the messages is limited\nby its maxMessages value.\n\n\n                    \n                    \n                    \n                        Returns :         LogMessage[]\n\n                    \n                    \n                        log messages\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getRootLogger\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getRootLogger()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/logging.service.ts:138\n                \n            \n\n\n            \n                \n                    Gets the root logger from which all other loggers derive.\n\n\n                    \n                    \n                    \n                        Returns :         Logger\n\n                    \n                    \n                        root logger\n\n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            ajaxAppenderFailed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     EventEmitter\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/logging.service.ts:37\n                            \n                        \n\n                \n                    \n                        Event triggered when ajax appender could not send log messages to the server.\n\n                    \n                \n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                                    Description\n                                          \n                                      \n                                      \n                                                \n                                                        message\n                                                        \n                                                                error message\n\n                                                        \n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            logMessagesChanged\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         EventEmitter\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/logging.service.ts:31\n                            \n                        \n\n                \n                    \n                        Event triggered when new log message was added.\n\n                    \n                \n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                                    Description\n                                          \n                                      \n                                      \n                                                \n                                                        message\n                                                        \n                                                                new log message\n\n                                                        \n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n\n\n    \n\n\n    \n        import { EventEmitter, Injectable, Optional } from \"@angular/core\";\n\nimport * as log4javascript from \"log4javascript\";\n\nimport { AjaxAppender } from \"./ajax-appender.model\";\nimport { LocalStorageAppender } from \"./local-storage-appender.model\";\nimport { LogLevelConverter } from \"./log-level.converter\";\nimport { LogMessage } from \"./log-message.model\";\nimport { Logger } from \"./logger.model\";\nimport { LoggingServiceConfiguration } from \"./logging-service.configuration\";\nimport { MemoryAppender } from \"./memory-appender.model\";\n\n/**\n * Service for logging functionality.\n *\n * By default, the following settings are used:\n *  - logger: root with level WARN\n *  - appender: BrowserConsoleAppender with threshold DEBUG and MemoryAppender with threshold ALL\n *\n * Via [configure](#configure), it is possible to amend these settings.\n */\n@Injectable({\n\tprovidedIn: \"root\"\n})\nexport class LoggingService {\n\n\t/**\n\t * Event triggered when new log message was added.\n\t * @param message new log message\n\t */\n\tpublic logMessagesChanged: EventEmitter;\n\n\t/**\n\t * Event triggered when ajax appender could not send log messages to the server.\n\t * @param message error message\n\t */\n\tpublic ajaxAppenderFailed: EventEmitter;\n\n\t// tslint:disable-next-line:completed-docs\n\tprivate memoryAppender: MemoryAppender;\n\tprivate browserConsoleAppender: log4javascript.BrowserConsoleAppender;\n\n\t/**\n\t * Creates a new instance of the service.\n\t */\n\tconstructor() {\n\n\t\t// prevent log4javascript to show alerts on case of errors\n\t\tlog4javascript.logLog.setQuietMode(true);\n\n\t\t// create event emitter\n\t\tthis.logMessagesChanged = new EventEmitter();\n\t\tthis.ajaxAppenderFailed = new EventEmitter();\n\n\t\t// configure appender\n\t\tconst logger = log4javascript.getRootLogger();\n\t\tlogger.setLevel(log4javascript.Level.WARN);\n\n\t\t// browser console appender for debugger\n\t\tthis.browserConsoleAppender = new log4javascript.BrowserConsoleAppender();\n\t\tthis.browserConsoleAppender.setLayout(new log4javascript.PatternLayout(\"%d{HH:mm:ss,SSS} %c %m\"));\n\t\tthis.browserConsoleAppender.setThreshold(log4javascript.Level.ALL);\n\t\tlogger.addAppender(this.browserConsoleAppender);\n\n\t\t// in-memory appender for display on log messages page\n\t\tthis.memoryAppender = new MemoryAppender();\n\t\tthis.memoryAppender.setLayout(new log4javascript.PatternLayout(\"%d{HH:mm:ss,SSS} %c %m\"));\n\t\tthis.memoryAppender.setOnLogMessagesChangedCallback((message) => {\n\t\t\tthis.logMessagesChanged.emit(message);\n\t\t});\n\t\tlogger.addAppender(this.memoryAppender);\n\n\t\tthis.configure();\n\t}\n\n\t/**\n\t * Configures the logging depending on the given configuration.\n\t * @param configuration configuration data.\n\t */\n\tpublic configure(configuration?: LoggingServiceConfiguration): void {\n\n\t\tif (typeof configuration === \"undefined\") {\n\t\t\tconfiguration = {};\n\t\t}\n\n\t\t// set log levels\n\t\tif (typeof configuration.logLevels !== \"undefined\") {\n\t\t\tfor (const level of configuration.logLevels) {\n\t\t\t\tlet logger: log4javascript.Logger;\n\t\t\t\tif (level.loggerName === \"root\") {\n\t\t\t\t\tlogger = log4javascript.getRootLogger();\n\t\t\t\t} else {\n\t\t\t\t\tlogger = log4javascript.getLogger(level.loggerName);\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\tlogger.setLevel(LogLevelConverter.levelToLog4Javascript(LogLevelConverter.levelFromString(level.logLevel)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthrow new Error(`invalid log level ${level.logLevel}`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// configure AjaxAppender\n\t\tif (typeof configuration.ajaxAppender !== \"undefined\") {\n\t\t\tconst ajaxAppender = new AjaxAppender(configuration.ajaxAppender);\n\t\t\tajaxAppender.appenderFailed.subscribe((message: string) => {\n\t\t\t\tthis.ajaxAppenderFailed.emit(message);\n\t\t\t});\n\t\t\tlog4javascript.getRootLogger().addAppender(ajaxAppender);\n\t\t}\n\n\t\t// configure LocalStorageAppender\n\t\tif (typeof configuration.localStorageAppender !== \"undefined\") {\n\t\t\tconst localStorageAppender = new LocalStorageAppender(configuration.localStorageAppender);\n\t\t\tlog4javascript.getRootLogger().addAppender(localStorageAppender);\n\t\t}\n\n\t\t// configure MemoryAppender\n\t\tif (configuration.memoryAppender) {\n\t\t\tthis.memoryAppender.configure(configuration.memoryAppender);\n\t\t}\n\n\t\t// configure BrowserConsoleAppender\n\t\tif (configuration.browserConsoleAppender) {\n\t\t\tif (configuration.browserConsoleAppender.threshold) {\n\t\t\t\tconst convertedThreshold = LogLevelConverter.levelToLog4Javascript(\n\t\t\t\t\tLogLevelConverter.levelFromString(configuration.browserConsoleAppender.threshold));\n\t\t\t\tthis.browserConsoleAppender.setThreshold(convertedThreshold);\n\t\t\t}\n\t\t}\n\n\t}\n\n\t/**\n\t * Gets the root logger from which all other loggers derive.\n\t * @return root logger\n\t */\n\tpublic getRootLogger(): Logger {\n\t\treturn new Logger();\n\t}\n\n\t/**\n\t * Gets a logger with the specified name, creating it if a logger with that name does not already exist.\n\t * @param loggerName name of the logger\n\t * @return logger\n\t */\n\tpublic getLogger(loggerName: string): Logger {\n\t\treturn new Logger(loggerName);\n\t}\n\n\t/**\n\t * Gets the last log messages.\n\t *\n\t * The log messages are retrieved from the internal [MemoryAppender](../memoryappender.html).\n\t * That means you will get only the most current messages. The number of the messages is limited\n\t * by its maxMessages value.\n\t * @return log messages\n\t */\n\tpublic getLogMessages(): LogMessage[] {\n\t\treturn this.memoryAppender.getLogMessages();\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoggingServiceConfiguration.html":{"url":"interfaces/LoggingServiceConfiguration.html","title":"interface - LoggingServiceConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  LoggingServiceConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/logging-service.configuration.ts\n        \n\n            \n                Description\n            \n            \n                Partial configuration definition for LoggingService.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        ajaxAppender\n                                \n                                \n                                            Optional\n                                        browserConsoleAppender\n                                \n                                \n                                            Optional\n                                        localStorageAppender\n                                \n                                \n                                            Optional\n                                        logLevels\n                                \n                                \n                                            Optional\n                                        memoryAppender\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ajaxAppender\n                                    \n                                \n                                \n                                    \n                                        ajaxAppender:         AjaxAppenderConfiguration\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         AjaxAppenderConfiguration\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Settings for AjaxAppender.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        browserConsoleAppender\n                                    \n                                \n                                \n                                    \n                                        browserConsoleAppender:         BrowserConsoleAppenderConfiguration\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BrowserConsoleAppenderConfiguration\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Settings for BrowserConsoleAppender.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        localStorageAppender\n                                    \n                                \n                                \n                                    \n                                        localStorageAppender:         LocalStorageAppenderConfiguration\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         LocalStorageAppenderConfiguration\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Settings for LocalStorageAppender.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logLevels\n                                    \n                                \n                                \n                                    \n                                        logLevels:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Log levels for different loggers.\nDefault: root: WARN\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        memoryAppender\n                                    \n                                \n                                \n                                    \n                                        memoryAppender:         MemoryAppenderConfiguration\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MemoryAppenderConfiguration\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Settings for MemoryAppender.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { AjaxAppenderConfiguration } from \"./ajax-appender.configuration\";\nimport { BrowserConsoleAppenderConfiguration } from \"./browser-console-appender.configuration\";\nimport { LocalStorageAppenderConfiguration } from \"./local-storage-appender.configuration\";\nimport { MemoryAppenderConfiguration } from \"./memory-appender.configuration\";\n\n/**\n * Partial configuration definition for LoggingService.\n */\nexport interface LoggingServiceConfiguration {\n\n\t/**\n\t * Log levels for different loggers.\n\t * Default: root: WARN\n\t */\n\tlogLevels?: Array;\n\n\t/**\n\t * Settings for AjaxAppender.\n\t */\n\tajaxAppender?: AjaxAppenderConfiguration;\n\n\t/**\n\t * Settings for LocalStorageAppender.\n\t */\n\tlocalStorageAppender?: LocalStorageAppenderConfiguration;\n\n\t/**\n\t * Settings for MemoryAppender.\n\t */\n\tmemoryAppender?: MemoryAppenderConfiguration;\n\n\t/**\n\t * Settings for BrowserConsoleAppender.\n\t */\n\tbrowserConsoleAppender?: BrowserConsoleAppenderConfiguration;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LoggingServiceModule.html":{"url":"modules/LoggingServiceModule.html","title":"module - LoggingServiceModule","body":"\n                   \n\n\n\n\n    Modules\n    LoggingServiceModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/logging-service.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\n\n@NgModule({\n\timports: [\n\t],\n\tdeclarations: [\n\t],\n\texports: [\n\t]\n})\nexport class LoggingServiceModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MemoryAppender.html":{"url":"classes/MemoryAppender.html","title":"class - MemoryAppender","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MemoryAppender\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/memory-appender.model.ts\n        \n\n            \n                Description\n            \n            \n                An appender which stores the log messages in the browser's memory.\nThe MemoryAppender is enabled by default.\nIf you do not specify anything else, it is using this configuration:\n```JSON\n\n{\n\"memoryAppender\": [\n{\n\"maxMessages\": 250,\n\"threshold\": \"ALL\"\n}\n}\n```\n\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                append\n                            \n                            \n                                    Public\n                                configure\n                            \n                            \n                                    Public\n                                getLogMessages\n                            \n                            \n                                    Public\n                                getMaxMessages\n                            \n                            \n                                    Public\n                                setMaxMessages\n                            \n                            \n                                    Public\n                                setOnLogMessagesChangedCallback\n                            \n                            \n                                    Public\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configuration?: MemoryAppenderConfiguration)\n                    \n                \n                        \n                            \n                                Defined in src/lib/memory-appender.model.ts:34\n                            \n                        \n\n                \n                    \n                            Creates a new instance of the appender.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configuration\n                                                  \n                                                        \n                                                                        MemoryAppenderConfiguration\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                configuration for the appender.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            append\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    append(loggingEvent: log4javascript.LoggingEvent)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/memory-appender.model.ts:78\n                \n            \n\n\n            \n                \n                    Appender-specific method to append a log message.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    loggingEvent\n                                    \n                                            log4javascript.LoggingEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        event to be appended.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            configure\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    configure(configuration: MemoryAppenderConfiguration)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/memory-appender.model.ts:61\n                \n            \n\n\n            \n                \n                    Configures the logging depending on the given configuration.\nOnly the defined properties get overwritten.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    configuration\n                                    \n                                                MemoryAppenderConfiguration\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        configuration data.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getLogMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getLogMessages()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/memory-appender.model.ts:134\n                \n            \n\n\n            \n                \n                    Gets all messages stored in memory.\n\n\n                    \n                    \n                    \n                        Returns :         LogMessage[]\n\n                    \n                    \n                        stored messages\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            getMaxMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMaxMessages()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/memory-appender.model.ts:111\n                \n            \n\n\n            \n                \n                    Get the maximum number of messages which will be stored in memory.\n\n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setMaxMessages\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setMaxMessages(value: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/memory-appender.model.ts:121\n                \n            \n\n\n            \n                \n                    Set the maximum number of messages which will be stored in memory.\nIf the appender stores currently more messages than the new value allows, the oldest messages get removed.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        new maximum number\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            setOnLogMessagesChangedCallback\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    setOnLogMessagesChangedCallback(callback: (message: LogMessage) => void)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/memory-appender.model.ts:143\n                \n            \n\n\n            \n                \n                    Registers a callback which will be called every time a new message is appended.\nThis could be useful if you want to show new messages in realtime.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    callback\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        callback to be called\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            toString\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toString()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/memory-appender.model.ts:104\n                \n            \n\n\n            \n                \n                    Gets the appender's name.\nMainly for unit testing purposes.\n\n\n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        appender's name\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import * as log4javascript from \"log4javascript\";\n\nimport { LogLevelConverter } from \"./log-level.converter\";\nimport { LogLevel } from \"./log-level.model\";\nimport { LogMessage } from \"./log-message.model\";\nimport { MemoryAppenderConfiguration } from \"./memory-appender.configuration\";\n\n/**\n * An appender which stores the log messages in the browser's memory.\n *\n * The MemoryAppender is enabled by default.\n * If you do not specify anything else, it is using this configuration:\n *\n * ```JSON\n * {\n *   \"memoryAppender\": [\n *     {\n *       \"maxMessages\": 250,\n *       \"threshold\": \"ALL\"\n *     }\n * }\n * ```\n */\nexport class MemoryAppender extends log4javascript.Appender {\n\n\tprivate static maxMessagesDefault = 250;\n\tprivate static thresholdDefault = \"ALL\";\n\n\tprivate maxMessages: number;\n\n\t// tslint:disable-next-line:completed-docs\n\tprivate logMessages: LogMessage[];\n\t// tslint:disable-next-line:completed-docs\n\tprivate onLogMessagesChangedCallback: (message: LogMessage) => void;\n\n\t/**\n\t * Creates a new instance of the appender.\n\t * @param configuration configuration for the appender.\n\t */\n\tconstructor(configuration?: MemoryAppenderConfiguration) {\n\t\tsuper();\n\n\t\tthis.logMessages = [];\n\n\t\t// process configuration\n\t\tconfiguration = configuration || {};\n\t\tthis.configure({\n\t\t\tmaxMessages: configuration.maxMessages || MemoryAppender.maxMessagesDefault,\n\t\t\tthreshold: configuration.threshold || MemoryAppender.thresholdDefault,\n\t\t});\n\n\t\tthis.maxMessages = MemoryAppender.maxMessagesDefault;\n\t}\n\n\t/**\n\t * Configures the logging depending on the given configuration.\n\t * Only the defined properties get overwritten.\n\t *\n\t * @param configuration configuration data.\n\t */\n\tpublic configure(configuration: MemoryAppenderConfiguration): void {\n\t\tif (configuration) {\n\t\t\tif (configuration.maxMessages) {\n\t\t\t\tthis.setMaxMessages(configuration.maxMessages);\n\t\t\t}\n\t\t\tif (configuration.threshold) {\n\t\t\t\tconst convertedThreshold = LogLevelConverter.levelToLog4Javascript(\n\t\t\t\t\tLogLevelConverter.levelFromString(configuration.threshold));\n\t\t\t\tthis.setThreshold(convertedThreshold);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Appender-specific method to append a log message.\n\t * @param loggingEvent event to be appended.\n\t */\n\tpublic append(loggingEvent: log4javascript.LoggingEvent): void {\n\t\t// if logMessages is already full, remove oldest element\n\t\twhile (this.logMessages.length >= this.maxMessages) {\n\t\t\tthis.logMessages.shift();\n\t\t}\n\t\t// add event to logMessages\n\t\tconst message: LogMessage = {\n\t\t\tlevel: LogLevel[LogLevelConverter.levelFromLog4Javascript(loggingEvent.level)],\n\t\t\tlogger: typeof loggingEvent.logger === \"object\" ? loggingEvent.logger.name : undefined,\n\t\t\tmessage: loggingEvent.messages.slice(1),\n\t\t\tmethodName: loggingEvent.messages[0],\n\t\t\ttimeStamp: loggingEvent.timeStamp,\n\t\t};\n\t\tthis.logMessages.push(message);\n\n\t\t// inform about new message\n\t\tif (typeof this.onLogMessagesChangedCallback === \"function\") {\n\t\t\tthis.onLogMessagesChangedCallback(message);\n\t\t}\n\t}\n\n\t/**\n\t * Gets the appender's name.\n\t * Mainly for unit testing purposes.\n\t * @return appender's name\n\t */\n\tpublic toString(): string {\n\t\treturn \"Ionic.Logging.MemoryAppender\";\n\t}\n\n\t/**\n\t * Get the maximum number of messages which will be stored in memory.\n\t */\n\tpublic getMaxMessages(): number {\n\t\treturn this.maxMessages;\n\t}\n\n\t/**\n\t * Set the maximum number of messages which will be stored in memory.\n\t *\n\t * If the appender stores currently more messages than the new value allows, the oldest messages get removed.\n\t * @param value new maximum number\n\t */\n\tpublic setMaxMessages(value: number): void {\n\t\tthis.maxMessages = value;\n\n\t\t// if there are too much logMessages for the new value, remove oldest messages\n\t\tif (this.logMessages.length > this.maxMessages) {\n\t\t\tthis.logMessages.splice(0, this.logMessages.length - this.maxMessages);\n\t\t}\n\t}\n\n\t/**\n\t * Gets all messages stored in memory.\n\t * @return stored messages\n\t */\n\tpublic getLogMessages(): LogMessage[] {\n\t\treturn this.logMessages;\n\t}\n\n\t/**\n\t * Registers a callback which will be called every time a new message is appended.\n\t * This could be useful if you want to show new messages in realtime.\n\t * @param callback callback to be called\n\t */\n\tpublic setOnLogMessagesChangedCallback(callback: (message: LogMessage) => void): void {\n\t\tthis.onLogMessagesChangedCallback = callback;\n\t}\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MemoryAppenderConfiguration.html":{"url":"interfaces/MemoryAppenderConfiguration.html","title":"interface - MemoryAppenderConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MemoryAppenderConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/memory-appender.configuration.ts\n        \n\n            \n                Description\n            \n            \n                Configuration for MemoryAppender.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        maxMessages\n                                \n                                \n                                            Optional\n                                        threshold\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        maxMessages\n                                    \n                                \n                                \n                                    \n                                        maxMessages:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Maximum number of log messages stored by the appender.\nDefault: 250.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        threshold\n                                    \n                                \n                                \n                                    \n                                        threshold:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Threshold.\nValid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN.\nDefault: ALL.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface MemoryAppenderConfiguration {\n\t/**\n\t * Maximum number of log messages stored by the appender.\n\t *\n\t * Default: 250.\n\t */\n\tmaxMessages?: number;\n\n\t/**\n\t * Threshold.\n\t *\n\t * Valid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN.\n\t *\n\t * Default: ALL.\n\t */\n\tthreshold?: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/lib/ajax-appender.configuration.ts\n            \n            interface\n            AjaxAppenderConfiguration\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/lib/ajax-appender.model.ts\n            \n            class\n            AjaxAppender\n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/lib/browser-console-appender.configuration.ts\n            \n            interface\n            BrowserConsoleAppenderConfiguration\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/lib/local-storage-appender.configuration.ts\n            \n            interface\n            LocalStorageAppenderConfiguration\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/lib/local-storage-appender.model.ts\n            \n            class\n            LocalStorageAppender\n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/lib/log-level.converter.ts\n            \n            class\n            LogLevelConverter\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/lib/log-message.model.ts\n            \n            interface\n            LogMessage\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/lib/logger.model.ts\n            \n            class\n            Logger\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                src/lib/logging-service.configuration.ts\n            \n            interface\n            LoggingServiceConfiguration\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/lib/logging.service.ts\n            \n            injectable\n            LoggingService\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/lib/memory-appender.configuration.ts\n            \n            interface\n            MemoryAppenderConfiguration\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/lib/memory-appender.model.ts\n            \n            class\n            MemoryAppender\n            \n                100 %\n                (9/9)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            log4javascript : ^1.4.15\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : ^7.0.0\n        \n            @angular/core : ^7.0.0\n    \n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            LogLevel   (src/.../log-level.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/log-level.model.ts\n    \n        \n            \n                \n                    \n                        \n                        LogLevel\n                    \n                \n                    \n                        \n                            Logging levels.\n\n                        \n                    \n                        \n                            \n                                 ALL\n                            \n                        \n                        \n                            \n                                 TRACE\n                            \n                        \n                        \n                            \n                                 DEBUG\n                            \n                        \n                        \n                            \n                                 INFO\n                            \n                        \n                        \n                            \n                                 WARN\n                            \n                        \n                        \n                            \n                                 ERROR\n                            \n                        \n                        \n                            \n                                 FATAL\n                            \n                        \n                        \n                            \n                                 OFF\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nionic-logging-service\nThe dependencies used by the latest version are the same as needed for Ionic 4.0.0. For older versions use:\n\n\n\nionic-logging-service\nIonic\nAngular\n\n\n\n\n7.0.0\n>= 4.0.0-rc\n^7.0.0\n\n\n6.0.0\n>= 4.0.0-beta\n^6.0.0\n\n\n5.1.0\n>= 3.9.0\n^5.0.0\n\n\n3.1.0\n>= 3.0.0\n^4.0.0\n\n\n2.0.0\n>= 2.2.0\n^2.4.8\n\n\n1.2.1\n>= 2.0.0\n^2.2.1\n\n\n\nThis service encapsulates log4javascript's functionalities for apps built with Ionic framework.\nFor a sample, just have a look at ionic-logging-viewer.\nUsage\nFirst, you need to import the LoggingServiceModule in your AppModule. The next step is typically the configuration (see below). And then, finally, you can use the LoggingService in your code, e.g.:\nimport { Logger, LoggingService } from \"ionic-logging-service\";\n\nexport class MyComponent {\n\n  private logger: Logger;\n\n  constructor(\n    loggingService: LoggingService) {\n\n    this.logger = loggingService.getLogger(\"MyApp.MyComponent\");\n    const methodName = \"ctor\";\n    this.logger.entry(methodName);\n\n    ...\n\n    this.logger.exit(methodName);\n  }\n\n  public myMethod(index: number, message: string): number[] {\n    const methodName = \"myMethod\";\n    this.logger.entry(methodName, index, number);\n\n    try {\n      ...\n    } catch (e) {\n      this.logger.error(methodName, \"some error\", e);\n    }\n\n    this.logger.exit(methodName);\n    return result;\n  }\n}Depending how the code is called, this could produce the following output in the browser's console:\nI  18:49:43.794  MyApp.MyComponent  ctor  entry\nI  18:49:43.797  MyApp.MyComponent  ctor  exit\nI  18:49:43.801  MyApp.MyComponent  myMethod  entry  42  Hello\nE  18:49:43.814  MyApp.MyComponent  myMethod  some error\nI  18:49:43.801  MyApp.MyComponent  myMethod  exit  [2, 5, 99]Logger\nA logger is the component responsible for logging. Typically, you have one logger per every class. The logger name describe the place where in your app the class is placed. The single parts are separated by dots ('.'). This is quite the same as with namespaces in dotnet or packages in Java.\nThis builds some kind of hierarchy. E.g., if you have a logger named A.B.C.D, you get automatically also loggers for A.B.C, A.B and A. Additionally, there is the so-called root logger, which is the parent of all other loggers.\nThe hierarchy is important, since the loggers inherit the log level from there parent - if there is no other level defined. That means, you can define just one log level for the complete app (by setting the root logger's level), and you can par example define, you do not want to see logs written for logger A.B.C (this includes also A.B.C.D).\nLevel\nEvery log message has a level. This is the severity of the message. Available levels are TRACE, DEBUG, INFO, WARN, ERROR and FATAL - these correspond to the logging methods trace, debug, info, warn, error and fatal of Logger. Levels are ordered as follows: TRACE DEBUG INFO WARN ERROR FATAL. This means the FATAL is the most severe and TRACE the least. Also included are levels called ALL and OFF intended to enable or disable all logging respectively.\nSetting a level to a logger disables log messages of severity lower than that level. For instance, if a level of INFO is set on a logger then only log messages of severity INFO or greater will be logged, meaning DEBUG and TRACE messages will not be logged.\nAppender\nAppenders make the logs visible, e.g. by writing them to the browser's console. This is quite useful during development, either in console or using ionic serve --consolelogs. But later, you will need other logs:\n\nAjaxAppender: sends the log messages to a backend server\nMemoryAppender: keeps the log messages in memory\nLocalStorageAppender: stores the log messages in local storage\n\nIf you want to see a complete example, have a look at ionic-feedback-sample.\nConfiguration\nBy default, the following configuration is used:\n\nLogger:\n\nroot: Level.WARN\n\n\nAppender:\n\nBrowserConsoleAppender\nMemoryAppender\n\n\n\nTo change it, just call configure(). This method takes an object of type LoggingConfiguration.\nThe recommended way is to place the configuration in environment.ts:\nexport const environment = {\n  logging: {\n    ...\n  }\n};Call configure() in your app.module.ts:\nexport function configureLogging(loggingService: LoggingService): () => void {\n  return () => loggingService.configure(environment.logging);\n}\n\n@NgModule({\n  ...\n  imports: [\n    ...\n    LoggingServiceModule\n  ],\n  providers: [\n    {\n      deps: [LoggingService],\n      multi: true,\n      provide: APP_INITIALIZER,\n      useFactory: configureLogging\n    }\n  ]\n})\nexport class AppModule { }logLevels\nlogLevels gets an array of log level definitions for different loggers, e.g.\n{\n  \"logLevels\": [\n    {\n      \"loggerName\": \"root\",\n      \"logLevel\": \"DEBUG\"\n    },\n    {\n      \"loggerName\": \"MyApp.MyNamespace.MyLogger\",\n      \"logLevel\": \"INFO\"\n    }\n  ]\n};That means, instead of the default log level WARN, you want to log all messages with level DEBUG and higher. Only for MyApp.MyNamespace.MyLogger, you want to restrict the level to INFO.\najaxAppender\nWith ajaxAppender, you add an additional appender of type AjaxAppender, which sends the log messages to a backend server.\nbrowserConsoleAppender\nWith browserConsoleAppender, it is possible to configure the BrowserConsoleAppender, which writes the log to the browser's console.\nlocalStorageAppender\nWith localStorageAppender, you add an additional appender of type AjaxAppender, which stores log messages in the local storage.\nmemoryAppender\nWith memoryAppender, it is possible to configure the MemoryAppender, which keeps log messages in the memory.\nAPI\nsee API documentation.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        LoggingServiceModule\n                    \n                    \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    6 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
