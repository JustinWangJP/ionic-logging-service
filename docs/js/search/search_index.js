var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.5","fields":["title","body"],"fieldVectors":[["title/classes/AjaxAppender.html",[0,0.263,1,1.011]],["body/classes/AjaxAppender.html",[0,0.243,1,1.154,2,0.3,3,0.24,4,0.196,5,3.194,6,0.909,7,0.753,8,1.885,9,2.603,10,0.75,11,1.238,12,2.321,13,1.985,14,2.473,15,1.664,16,1.246,17,0.055,18,3.188,19,2.473,20,3.006,21,2.473,22,3.006,23,2.473,24,1.007,25,0.155,26,0.858,27,2,28,3.449,29,1.139,30,3.449,31,3.449,32,3.449,33,3.449,34,2.473,35,2.473,36,2.473,37,2.321,38,0.685,39,1.664,40,2.069,41,1.819,42,1.579,43,1.232,44,1.744,45,1.073,46,1.801,47,1.522,48,0.533,49,0.848,50,3.006,51,1.579,52,1.986,53,1.985,54,0.615,55,1.664,56,2.051,57,1.579,58,1.664,59,1.664,60,1.929,61,1.961,62,1.424,63,1.268,64,0.936,65,1.232,66,1.664,67,1.985,68,1.232,69,1.579,70,1.395,71,1.985,72,3.45,73,2.769,74,1.579,75,1.424,76,1.073,77,2.321,78,1.986,79,1.986,80,2.321,81,3.048,82,1.579,83,2.891,84,3.745,85,3.745,86,1.579,87,3.449,88,2.321,89,2.769,90,3.449,91,3.449,92,2.473,93,1.579,94,1.312,95,2.473,96,2.473,97,2.473,98,1.579,99,2.473,100,1.579,101,2.473,102,1.985,103,1.579,104,1.073,105,0.553,106,0.991,107,0.909,108,0.936,109,1.062,110,0.909,111,0.522,112,0.787,113,0.909,114,0.196,115,1.062,116,1.062,117,1.625,118,1.755,119,1.579,120,1.062,121,1.579,122,1.985,123,1.062,124,0.286,125,1.723,126,1.062,127,1.755,128,1.268,129,1.985,130,3.745,131,2.473,132,2.473,133,1.579,134,2.473,135,1.579,136,1.579,137,1.579,138,1.579,139,1.579,140,1.579,141,1.579,142,1.579,143,1.579,144,1.579,145,1.579,146,1.062,147,1.268,148,0.909,149,2.473,150,1.579,151,1.664,152,1.579,153,2.473,154,1.579,155,1.062,156,1.579,157,0.787,158,1.579,159,0.685,160,0.909,161,0.909,162,1.062,163,1.062,164,1.579,165,1.579,166,1.579,167,1.579,168,1.579,169,1.579,170,1.579,171,1.579,172,1.579,173,0.024,174,0.024]],["title/interfaces/AjaxAppenderConfiguration.html",[40,1.331,175,0.332]],["body/interfaces/AjaxAppenderConfiguration.html",[1,1.205,2,0.444,3,0.483,4,0.395,5,2.141,7,0.577,9,2.74,10,0.764,11,1.252,16,0.791,17,0.054,18,4.042,20,3.819,22,3.819,24,1.663,25,0.313,26,1.016,40,2.035,48,0.591,49,1.076,54,1.016,70,1.49,71,3.819,72,3.278,73,3.278,89,3.278,94,1.349,102,3.278,105,0.914,114,0.395,120,2.748,122,3.819,124,0.863,173,0.04,174,0.04,175,0.507,176,1.586,177,1.447,178,2.352,179,1.546,180,1.174,181,1.349,182,1.349,183,4.083,184,4.083]],["title/interfaces/BrowserConsoleAppenderConfiguration.html",[175,0.332,185,1.538]],["body/interfaces/BrowserConsoleAppenderConfiguration.html",[2,0.48,3,0.576,4,0.471,7,0.688,16,0.944,17,0.053,24,1.737,25,0.373,26,1.133,48,0.471,49,0.973,54,1.133,105,0.886,114,0.471,124,0.827,173,0.045,174,0.045,175,0.566,176,1.891,177,1.309,178,2.623,179,1.725,180,1.455,181,1.505,182,1.505,185,2.623,186,3.046,187,1.891,188,2.185]],["title/classes/LocalStorageAppender.html",[0,0.263,189,1.011]],["body/classes/LocalStorageAppender.html",[0,0.239,2,0.295,3,0.234,4,0.192,6,0.889,7,0.672,8,1.847,10,0.666,11,1.289,15,1.634,16,1.256,17,0.055,24,0.992,25,0.152,26,0.604,27,1.94,29,1.125,37,2.292,38,0.67,39,1.634,41,1.733,43,1.21,44,1.733,45,1.054,46,1.478,47,1.408,48,0.423,49,0.728,52,1.729,55,1.634,56,2.021,58,1.634,59,1.634,60,1.81,61,1.85,62,1.398,63,1.239,64,0.92,65,1.21,66,1.634,67,1.95,68,1.21,70,1.338,76,1.478,77,2.647,78,2.265,79,2.265,80,2.647,83,2.292,94,0.802,104,1.478,105,0.714,106,1.064,108,0.92,110,0.889,111,0.51,112,0.769,113,1.729,114,0.192,115,1.038,116,1.038,117,1.607,118,1.398,123,1.038,124,0.28,125,1.478,126,1.038,127,1.729,128,1.239,129,1.95,146,1.038,147,1.239,148,0.889,151,1.634,155,1.038,157,0.769,159,1.303,160,0.889,161,0.889,162,1.038,163,1.038,173,0.024,174,0.024,179,1.661,189,0.92,190,3.021,191,2.213,192,2.431,193,1.634,194,2.353,195,2.428,196,3.003,197,2.734,198,3.158,199,2.428,200,1.697,201,2.428,202,3.406,203,3.406,204,2.292,205,2.734,206,1.95,207,2.051,208,1.239,209,1.543,210,1.543,211,3.158,212,1.543,213,1.543,214,1.986,215,1.543,216,2.265,217,1.95,218,1.543,219,1.634,220,1.95,221,1.95,222,2.734,223,1.543,224,0.584,225,0.889,226,1.038,227,1.239,228,0.889,229,2.292,230,1.961,231,1.634,232,1.634,233,2.428,234,3.003,235,2.428,236,3.933,237,2.428,238,3.003,239,1.543,240,1.239,241,1.543,242,2.973,243,1.543,244,1.634,245,1.543,246,1.543,247,1.95,248,1.543,249,1.543,250,1.239,251,1.038,252,1.239,253,1.239,254,2.411,255,3.158,256,1.95,257,1.038,258,0.443,259,1.239,260,0.443,261,1.239,262,1.398,263,1.239,264,1.239,265,0.769,266,1.239,267,1.239,268,1.239,269,1.634,270,2.428,271,2.428,272,2.428,273,1.543,274,1.239,275,1.543,276,1.543]],["title/interfaces/LocalStorageAppenderConfiguration.html",[175,0.332,207,1.331]],["body/interfaces/LocalStorageAppenderConfiguration.html",[2,0.458,3,0.516,4,0.422,7,0.617,8,1.613,10,0.646,11,1.213,16,0.846,17,0.054,24,1.692,25,0.335,26,1.059,48,0.577,49,1.041,54,1.059,70,1.443,76,1.848,105,0.929,114,0.422,124,0.885,173,0.042,174,0.042,175,0.529,176,1.695,177,1.401,178,2.453,179,1.613,180,1.224,181,1.407,182,1.407,189,1.287,190,2.288,191,2.018,192,2.43,194,2.123,197,3.419,198,3.913,200,2.43,207,2.123,216,2.453,228,2.453]],["title/classes/LogLevelConverter.html",[0,0.263,111,0.882]],["body/classes/LogLevelConverter.html",[0,0.419,2,0.335,3,0.368,4,0.301,7,0.714,10,0.597,17,0.054,25,0.239,27,1.489,29,1.125,41,1.489,44,1.489,46,1.706,47,1.299,48,0.645,49,0.84,54,0.604,60,2.065,68,2.53,75,2.924,105,0.867,106,0.979,108,1.289,111,1.125,114,0.301,118,2.854,124,0.44,125,1.706,127,2.265,173,0.033,174,0.033,177,1.13,180,0.698,181,0.802,182,0.802,224,1.968,225,1.398,258,1.524,277,1.85,278,1.949,279,3.405,280,4.877,281,2.291,282,3.405,283,3.405,284,3.405,285,3.405,286,4.957,287,2.428,288,3.422,289,3.405,290,2.428,291,4.263,292,3.405,293,2.428,294,3.932,295,4.332,296,3.405,297,3.932,298,3.405,299,3.932,300,3.405,301,3.932,302,3.405,303,3.932,304,3.405,305,3.932,306,3.405,307,3.932,308,3.405,309,3.932,310,3.405,311,3.932,312,3.157]],["title/interfaces/LogMessage.html",[175,0.332,214,1.159]],["body/interfaces/LogMessage.html",[2,0.344,3,0.531,4,0.434,7,0.635,10,0.768,11,1.325,17,0.054,25,0.344,26,1.078,29,1.432,47,1.432,48,0.628,88,2.917,105,0.982,114,0.434,173,0.042,174,0.042,175,0.538,214,1.881,244,3.313,258,1.482,260,1.482,265,2.454,277,1.517,313,2.808,314,3.953,315,4.71]],["title/classes/Logger.html",[0,0.263,260,0.767]],["body/classes/Logger.html",[0,0.216,2,0.414,3,0.206,4,0.169,7,0.784,10,0.809,11,1.154,17,0.055,25,0.134,27,1.982,29,1.677,38,0.59,41,1.733,43,1.094,44,1.2,45,0.953,46,2.242,47,1.707,48,0.548,49,1.089,54,0.865,60,1.885,61,2.1,65,1.094,70,0.391,75,1.265,78,1.265,79,1.265,94,0.725,105,0.938,106,0.794,108,0.831,111,0.449,112,0.678,113,2.736,114,0.169,117,0.59,124,0.575,125,2.357,157,1.58,159,2.062,173,0.021,174,0.021,180,1.171,181,1.047,182,1.047,224,1.409,225,0.783,258,1.47,260,1.315,262,0.783,265,2.507,269,1.478,316,1.092,317,2.793,318,2.793,319,2.196,320,3.17,321,3.17,322,2.196,323,2.196,324,1.36,325,0.915,326,2.196,327,1.36,328,3.197,329,4.841,330,2.196,331,1.36,332,2.196,333,1.36,334,2.196,335,1.36,336,2.196,337,1.36,338,2.196,339,1.36,340,2.196,341,4.947,342,1.36,343,2.217,344,1.36,345,2.196,346,1.36,347,2.196,348,1.36,349,2.196,350,1.36,351,2.196,352,1.36,353,2.545,354,1.092,355,1.36,356,1.36,357,1.36,358,1.36,359,4.074,360,1.36,361,2.762,362,1.36,363,2.762,364,2.762,365,1.36,366,1.36,367,1.36,368,1.36,369,1.36,370,1.36,371,2.196,372,1.36,373,1.36,374,1.36,375,0.915,376,1.36,377,0.915,378,0.915,379,1.36]],["title/injectables/LoggingService.html",[380,1.538,381,1.331]],["body/injectables/LoggingService.html",[0,0.172,1,1.229,2,0.172,3,0.265,4,0.217,7,0.711,8,1.63,9,1.538,10,0.784,11,1.29,12,1.797,13,2.144,16,1.259,17,0.055,24,1.201,25,0.172,26,0.664,27,1.916,29,0.882,38,1.408,41,1.63,43,1.954,44,1.874,45,1.159,46,1.578,47,1.535,48,0.452,49,0.693,50,3.654,52,2.258,53,2.92,54,0.807,60,1.759,61,1.159,62,1.538,64,1.011,65,1.331,68,1.331,70,0.768,75,1.538,76,1.159,94,1.295,104,1.795,105,0.66,106,1.308,107,1.004,108,1.229,109,2.184,111,0.576,112,0.869,114,0.217,117,1.159,124,0.485,125,1.578,127,1.004,148,1.004,157,1.813,159,1.701,160,1.004,161,1.004,173,0.026,174,0.026,177,0.768,179,1.011,180,0.768,187,0.869,188,2.094,189,1.229,191,0.757,194,0.869,200,1.331,204,2.447,214,1.408,219,1.797,226,1.174,229,1.174,230,1.004,231,1.174,232,1.174,240,2.144,251,1.797,258,1.127,260,1.506,262,2.094,295,1.4,312,1.4,325,1.174,343,1.4,354,2.144,375,1.174,377,1.174,378,1.174,380,1.869,381,1.331,382,1.4,383,2.92,384,1.797,385,2.144,386,2.988,387,1.681,388,2.144,389,2.671,390,3.637,391,3.637,392,2.671,393,3.637,394,1.744,395,2.094,396,1.744,397,2.671,398,1.744,399,2.144,400,2.144,401,1.744,402,2.671,403,2.671,404,2.144,405,2.671,406,1.744,407,2.671,408,1.744,409,1.744,410,2.671,411,3.246,412,1.744,413,1.744,414,1.538,415,1.744,416,1.744,417,2.671,418,1.744,419,1.4,420,1.744,421,1.744,422,1.744,423,1.744,424,1.744,425,1.744,426,1.4,427,1.744,428,1.744,429,1.744,430,2.671,431,2.671,432,2.671,433,1.744,434,1.744,435,1.744,436,1.744,437,1.744,438,1.744,439,1.744,440,1.744,441,1.744,442,2.671,443,1.744,444,1.744,445,1.744,446,1.744,447,1.744,448,1.744,449,1.744,450,1.744,451,1.744,452,1.744,453,1.744,454,1.744,455,1.744,456,1.744,457,1.744,458,1.744,459,1.744,460,1.744,461,1.744,462,1.744,463,1.744]],["title/interfaces/LoggingServiceConfiguration.html",[175,0.332,395,1.538]],["body/interfaces/LoggingServiceConfiguration.html",[1,1.905,2,0.312,3,0.481,4,0.394,7,0.575,10,0.618,16,1.014,17,0.054,25,0.312,26,1.014,40,2.368,48,0.61,49,1.128,94,1.712,106,1.366,109,2.134,110,2.736,114,0.394,124,0.739,173,0.04,174,0.04,175,0.506,177,1.171,185,2.736,187,1.58,188,2.897,189,1.905,191,1.376,194,1.58,207,2.368,224,1.799,258,1.171,260,1.171,277,1.376,281,2.742,381,2.031,386,2.742,387,1.905,395,2.346,414,1.826,426,2.545,464,2.545,465,4.074,466,3.271,467,3.614,468,2.368]],["title/modules/LoggingServiceModule.html",[469,1.331,470,1.538]],["body/modules/LoggingServiceModule.html",[0,0.399,2,0.399,3,0.615,4,0.503,17,0.054,106,1.362,107,2.335,114,0.588,173,0.046,174,0.046,277,1.759,469,2.021,470,2.728,471,4.054,472,3.803,473,4.054]],["title/classes/MemoryAppender.html",[0,0.263,387,1.011]],["body/classes/MemoryAppender.html",[0,0.258,2,0.168,3,0.259,4,0.212,6,0.981,7,0.743,8,1.909,10,0.686,11,1.304,16,1.269,17,0.055,24,1.057,25,0.168,26,0.653,27,1.941,29,1.187,37,2.417,38,0.739,39,1.765,41,1.748,43,1.307,44,1.805,45,1.138,46,1.683,47,1.493,48,0.482,49,0.829,52,1.842,55,1.765,56,2.152,58,1.765,59,1.765,60,1.805,61,2.038,62,1.511,64,0.993,65,1.307,66,1.765,68,1.307,70,1.37,76,1.559,77,1.765,78,1.511,79,1.511,80,1.765,83,2.417,88,1.765,94,0.866,104,1.559,105,0.476,106,1.115,108,0.993,110,0.981,111,0.563,112,0.849,113,0.981,114,0.212,115,1.146,116,1.146,117,1.683,118,1.511,123,1.146,125,1.683,126,1.146,146,1.146,148,0.981,151,1.765,157,1.307,159,1.138,160,0.981,161,0.981,162,1.146,163,1.146,173,0.026,174,0.026,177,0.754,179,1.551,192,2.376,193,1.765,200,1.79,204,2.417,205,2.884,206,2.106,208,1.368,211,2.884,214,2.068,216,2.359,217,2.106,219,1.765,220,2.106,221,2.106,222,2.884,224,0.645,225,0.981,226,1.146,227,1.368,228,1.842,229,1.765,230,1.511,231,1.765,232,1.765,242,2.106,244,1.146,247,2.106,250,1.368,251,1.146,252,1.368,253,1.368,254,2.568,255,3.289,256,1.368,257,1.146,258,0.49,259,1.368,260,0.49,261,1.368,262,0.981,263,1.368,264,1.368,265,0.849,266,1.368,267,1.368,268,1.368,274,1.368,325,1.146,328,1.146,384,1.765,387,1.551,399,2.106,414,2.603,419,2.106,468,2.127,474,3.042,475,2.106,476,2.623,477,2.623,478,1.704,479,1.704,480,1.704,481,1.704,482,1.704,483,2.623,484,1.704,485,2.623,486,4.269,487,2.884,488,2.106,489,2.623,490,1.704,491,1.704,492,2.623,493,1.704,494,1.704,495,2.623,496,1.704,497,1.704,498,1.704]],["title/interfaces/MemoryAppenderConfiguration.html",[175,0.332,468,1.331]],["body/interfaces/MemoryAppenderConfiguration.html",[2,0.468,3,0.543,4,0.444,7,0.649,8,1.665,10,0.667,11,1.094,16,0.89,17,0.054,24,1.713,25,0.352,26,1.094,48,0.546,49,1.06,54,1.094,70,1.464,105,0.864,114,0.444,124,0.798,173,0.043,174,0.043,175,0.546,176,1.784,177,1.427,178,2.532,179,1.665,180,1.264,181,1.452,182,1.452,192,2.191,200,2.474,216,2.532,228,2.532,387,1.355,468,2.191,474,2.408]],["title/coverage.html",[499,2.919]],["body/coverage.html",[0,0.5,1,1.34,4,0.439,5,2.937,6,2.727,17,0.053,40,1.763,44,1.34,48,0.439,111,1.169,173,0.043,174,0.043,175,0.642,176,2.464,185,2.037,186,2.84,187,1.763,189,1.34,190,2.937,191,1.894,207,1.763,214,1.535,260,1.017,277,2.054,278,2.84,313,2.84,316,2.84,380,2.037,381,1.763,382,2.84,387,1.34,395,2.037,464,2.84,468,1.763,474,2.937,499,2.84,500,2.84,501,3.538,502,3.538,503,5.423,504,3.538,505,3.538,506,3.538,507,4.365,508,3.538,509,4.365,510,3.538,511,3.538,512,3.538,513,3.538,514,3.538,515,3.538]],["title/dependencies.html",[64,1.215,516,1.793]],["body/dependencies.html",[17,0.052,64,1.832,107,2.42,108,1.591,173,0.047,174,0.047,517,4.203,518,4.203,519,4.203,520,3.884]],["title/miscellaneous/enumerations.html",[521,1.793,522,2.576]],["body/miscellaneous/enumerations.html",[2,0.409,10,0.63,17,0.047,25,0.409,54,1.034,124,0.754,173,0.047,174,0.047,180,1.194,181,1.373,182,1.373,224,1.82,258,1.194,277,1.803,521,3.336,522,3.336,523,4.155,524,4.806]],["title/index.html",[25,0.22,104,0.969,525,2.234]],["body/index.html",[0,0.378,1,1.554,2,0.439,8,1.554,9,1.665,10,0.809,11,1.233,12,1.946,15,1.946,16,1.141,17,0.054,25,0.191,27,0.734,29,0.955,38,0.841,41,1.31,45,0.841,47,0.955,48,0.43,54,1.021,60,1.095,61,0.841,64,1.095,70,0.994,76,1.868,94,1.143,104,0.841,105,0.352,106,1.103,114,0.476,117,0.841,124,0.696,155,1.304,159,1.501,173,0.034,174,0.028,177,0.831,180,1.237,181,1.267,182,1.356,187,1.912,188,2.209,189,1.31,191,1.255,192,1.441,193,2.328,194,1.441,224,1.554,230,1.116,257,1.946,258,1.461,260,1.47,265,1.441,269,1.946,281,1.304,288,1.556,314,1.556,317,2.322,318,2.322,328,1.304,353,1.556,375,1.304,377,1.304,378,2.328,381,2.146,383,3.08,384,1.946,385,2.778,386,2.582,387,1.554,388,2.322,400,2.322,404,3.08,414,1.665,466,1.556,467,1.556,470,1.665,472,1.556,475,1.556,487,3.295,488,3.08,500,1.556,516,1.556,520,2.322,526,4.688,527,1.938,528,2.892,529,2.892,530,3.46,531,3.837,532,1.938,533,1.938,534,1.938,535,2.892,536,1.938,537,1.938,538,1.938,539,1.938,540,1.938,541,1.938,542,2.892,543,1.938,544,1.938,545,1.938,546,1.938,547,1.938,548,3.46,549,1.938,550,1.938,551,2.892,552,2.892,553,1.938,554,1.938,555,1.938,556,2.892,557,1.938,558,3.837,559,1.938,560,1.938,561,2.892,562,3.837,563,1.938,564,1.938,565,3.46,566,2.892,567,2.892,568,1.938,569,3.837,570,1.938,571,1.938,572,1.938,573,1.938,574,4.105,575,1.938,576,2.892,577,1.938,578,1.938,579,1.938,580,1.938,581,1.556,582,1.938,583,1.938,584,1.938,585,2.892,586,1.938,587,1.938,588,3.46,589,1.938,590,1.938,591,1.938,592,1.938,593,2.892,594,1.938,595,1.938,596,1.938,597,1.938,598,1.938,599,2.892,600,2.892,601,1.938,602,2.892,603,1.938,604,1.938,605,2.892,606,1.938,607,2.892,608,1.938,609,1.938,610,2.892,611,2.892,612,3.837,613,1.938,614,1.938,615,1.938,616,1.938,617,2.892,618,1.938,619,1.938,620,1.938,621,1.938,622,1.938,623,1.938,624,1.938,625,1.938,626,1.938,627,1.938,628,2.892,629,2.892,630,1.938,631,1.938,632,1.938,633,1.938,634,1.938,635,1.938,636,1.938,637,1.938,638,1.938,639,1.938,640,1.938,641,2.892,642,1.938,643,1.938,644,1.938,645,1.938,646,1.938,647,1.938,648,2.892,649,1.938,650,1.938,651,1.938,652,2.892,653,2.892]],["title/modules.html",[469,1.812]],["body/modules.html",[17,0.048,173,0.048,174,0.048,469,2.139,470,2.471,654,4.291]],["title/overview.html",[655,2.919]],["body/overview.html",[0,0.416,17,0.047,120,3.268,173,0.047,174,0.047,175,0.525,380,2.437,469,2.109,581,3.397,655,3.397,656,4.232]]],"invertedIndex":[["",{"_index":17,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["0",{"_index":122,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["1",{"_index":120,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"overview.html":{}}}],["1.2.1",{"_index":545,"title":{},"body":{"index.html":{}}}],["1.4.15",{"_index":517,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":21,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["10/10",{"_index":508,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":503,"title":{},"body":{"coverage.html":{}}}],["13/13",{"_index":505,"title":{},"body":{"coverage.html":{}}}],["14/14",{"_index":510,"title":{},"body":{"coverage.html":{}}}],["18:49:43.794",{"_index":573,"title":{},"body":{"index.html":{}}}],["18:49:43.797",{"_index":575,"title":{},"body":{"index.html":{}}}],["18:49:43.801",{"_index":576,"title":{},"body":{"index.html":{}}}],["18:49:43.814",{"_index":579,"title":{},"body":{"index.html":{}}}],["2",{"_index":580,"title":{},"body":{"index.html":{}}}],["2.0.0",{"_index":542,"title":{},"body":{"index.html":{}}}],["2.2.0",{"_index":543,"title":{},"body":{"index.html":{}}}],["2.2.1",{"_index":546,"title":{},"body":{"index.html":{}}}],["2.4.8",{"_index":544,"title":{},"body":{"index.html":{}}}],["2/2",{"_index":506,"title":{},"body":{"coverage.html":{}}}],["250",{"_index":228,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["3.0.0",{"_index":541,"title":{},"body":{"index.html":{}}}],["3.1.0",{"_index":540,"title":{},"body":{"index.html":{}}}],["3.9.0",{"_index":538,"title":{},"body":{"index.html":{}}}],["3/3",{"_index":512,"title":{},"body":{"coverage.html":{}}}],["4.0.0",{"_index":531,"title":{},"body":{"index.html":{}}}],["4/4",{"_index":507,"title":{},"body":{"coverage.html":{}}}],["42",{"_index":577,"title":{},"body":{"index.html":{}}}],["5",{"_index":581,"title":{},"body":{"index.html":{},"overview.html":{}}}],["5.0.0",{"_index":539,"title":{},"body":{"index.html":{}}}],["5.1.0",{"_index":537,"title":{},"body":{"index.html":{}}}],["5/5",{"_index":504,"title":{},"body":{"coverage.html":{}}}],["500",{"_index":201,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["6",{"_index":656,"title":{},"body":{"overview.html":{}}}],["6.0.0",{"_index":535,"title":{},"body":{"index.html":{}}}],["6/6",{"_index":509,"title":{},"body":{"coverage.html":{}}}],["60000",{"_index":23,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["7.0.0",{"_index":520,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["8",{"_index":141,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["8/8",{"_index":511,"title":{},"body":{"coverage.html":{}}}],["9/9",{"_index":513,"title":{},"body":{"coverage.html":{}}}],["99]logger",{"_index":582,"title":{},"body":{"index.html":{}}}],["a.b",{"_index":603,"title":{},"body":{"index.html":{}}}],["a.b.c",{"_index":602,"title":{},"body":{"index.html":{}}}],["a.b.c.d",{"_index":600,"title":{},"body":{"index.html":{}}}],["ad",{"_index":410,"title":{},"body":{"injectables/LoggingService.html":{}}}],["add",{"_index":257,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["addit",{"_index":652,"title":{},"body":{"index.html":{}}}],["addition",{"_index":604,"title":{},"body":{"index.html":{}}}],["ajax",{"_index":109,"title":{},"body":{"classes/AjaxAppender.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{}}}],["ajaxappend",{"_index":1,"title":{"classes/AjaxAppender.html":{}},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["ajaxappender(configuration.ajaxappend",{"_index":448,"title":{},"body":{"injectables/LoggingService.html":{}}}],["ajaxappender.appenderfailed.subscribe((messag",{"_index":449,"title":{},"body":{"injectables/LoggingService.html":{}}}],["ajaxappender.batchsizedefault",{"_index":150,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["ajaxappender.thresholddefault",{"_index":152,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["ajaxappender.timerintervaldefault",{"_index":154,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["ajaxappenderconfigur",{"_index":40,"title":{"interfaces/AjaxAppenderConfiguration.html":{}},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{}}}],["ajaxappenderfail",{"_index":390,"title":{},"body":{"injectables/LoggingService.html":{}}}],["alert",{"_index":420,"title":{},"body":{"injectables/LoggingService.html":{}}}],["allow",{"_index":221,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["alreadi",{"_index":251,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["amend",{"_index":389,"title":{},"body":{"injectables/LoggingService.html":{}}}],["angular",{"_index":533,"title":{},"body":{"index.html":{}}}],["angular/common",{"_index":519,"title":{},"body":{"dependencies.html":{}}}],["angular/cor",{"_index":107,"title":{},"body":{"classes/AjaxAppender.html":{},"injectables/LoggingService.html":{},"modules/LoggingServiceModule.html":{},"dependencies.html":{}}}],["anyth",{"_index":476,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["api",{"_index":653,"title":{},"body":{"index.html":{}}}],["app",{"_index":548,"title":{},"body":{"index.html":{}}}],["app.module.t",{"_index":638,"title":{},"body":{"index.html":{}}}],["app_initi",{"_index":645,"title":{},"body":{"index.html":{}}}],["append",{"_index":8,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["append(loggingev",{"_index":55,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["appender'",{"_index":83,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["appender.configur",{"_index":110,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{}}}],["appender.configuration.t",{"_index":176,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{}}}],["appender.model",{"_index":411,"title":{},"body":{"injectables/LoggingService.html":{}}}],["appender.model.t",{"_index":6,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{},"coverage.html":{}}}],["appender.model.ts:100",{"_index":209,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:103",{"_index":57,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:104",{"_index":490,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["appender.model.ts:111",{"_index":481,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["appender.model.ts:112",{"_index":103,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:120",{"_index":74,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:121",{"_index":482,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["appender.model.ts:124",{"_index":223,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:127",{"_index":69,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:131",{"_index":212,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:134",{"_index":480,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["appender.model.ts:135",{"_index":93,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:138",{"_index":215,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:142",{"_index":82,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:143",{"_index":484,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["appender.model.ts:148",{"_index":218,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:149",{"_index":98,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:156",{"_index":86,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:164",{"_index":100,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:169",{"_index":213,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:177",{"_index":210,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["appender.model.ts:32",{"_index":51,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:34",{"_index":208,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["appender.model.ts:35",{"_index":42,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appender.model.ts:61",{"_index":479,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["appender.model.ts:78",{"_index":478,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["appender.model.ts:80",{"_index":63,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["appenderfail",{"_index":28,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["application/json",{"_index":139,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["appmodul",{"_index":556,"title":{},"body":{"index.html":{}}}],["arg",{"_index":341,"title":{},"body":{"classes/Logger.html":{}}}],["arg.tostr",{"_index":371,"title":{},"body":{"classes/Logger.html":{}}}],["args.push(this.formatargument(param",{"_index":359,"title":{},"body":{"classes/Logger.html":{}}}],["argument",{"_index":340,"title":{},"body":{"classes/Logger.html":{}}}],["array",{"_index":467,"title":{},"body":{"interfaces/LoggingServiceConfiguration.html":{},"index.html":{}}}],["automat",{"_index":601,"title":{},"body":{"index.html":{}}}],["avail",{"_index":613,"title":{},"body":{"index.html":{}}}],["backend",{"_index":628,"title":{},"body":{"index.html":{}}}],["batch",{"_index":95,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["batchsiz",{"_index":20,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["batchsizedefault",{"_index":119,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["below",{"_index":559,"title":{},"body":{"index.html":{}}}],["beta",{"_index":536,"title":{},"body":{"index.html":{}}}],["between",{"_index":90,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["brows",{"_index":654,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":426,"title":{},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{}}}],["browser'",{"_index":193,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["browserconsoleappend",{"_index":188,"title":{},"body":{"interfaces/BrowserConsoleAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"index.html":{}}}],["browserconsoleappenderconfigur",{"_index":185,"title":{"interfaces/BrowserConsoleAppenderConfiguration.html":{}},"body":{"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{}}}],["build",{"_index":597,"title":{},"body":{"index.html":{}}}],["built",{"_index":549,"title":{},"body":{"index.html":{}}}],["c",{"_index":431,"title":{},"body":{"injectables/LoggingService.html":{}}}],["call",{"_index":487,"title":{},"body":{"classes/MemoryAppender.html":{},"index.html":{}}}],["callback",{"_index":486,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["case",{"_index":295,"title":{},"body":{"classes/LogLevelConverter.html":{},"injectables/LoggingService.html":{}}}],["catch",{"_index":377,"title":{},"body":{"classes/Logger.html":{},"injectables/LoggingService.html":{},"index.html":{}}}],["chang",{"_index":155,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"index.html":{}}}],["charset=utf",{"_index":140,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["class",{"_index":0,"title":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{}},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"coverage.html":{},"index.html":{},"overview.html":{}}}],["clearlog",{"_index":202,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["code",{"_index":561,"title":{},"body":{"index.html":{}}}],["complet",{"_index":607,"title":{},"body":{"index.html":{}}}],["compon",{"_index":583,"title":{},"body":{"index.html":{}}}],["configur",{"_index":16,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["configuration.ajaxappend",{"_index":447,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configuration.batchs",{"_index":149,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["configuration.browserconsoleappend",{"_index":457,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configuration.browserconsoleappender.threshold",{"_index":458,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configuration.localstorageappend",{"_index":452,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configuration.localstoragekey",{"_index":236,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["configuration.loglevel",{"_index":442,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configuration.maxmessag",{"_index":247,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["configuration.memoryappend",{"_index":455,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configuration.threshold",{"_index":151,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["configuration.timerinterv",{"_index":153,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["configuration.url",{"_index":130,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["configure(configur",{"_index":62,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["configure](#configur",{"_index":415,"title":{},"body":{"injectables/LoggingService.html":{}}}],["configurelog",{"_index":647,"title":{},"body":{"index.html":{}}}],["configurelogging(loggingservic",{"_index":639,"title":{},"body":{"index.html":{}}}],["consol",{"_index":187,"title":{},"body":{"interfaces/BrowserConsoleAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["consolelog",{"_index":626,"title":{},"body":{"index.html":{}}}],["const",{"_index":159,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["constructor",{"_index":38,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["constructor(configur",{"_index":39,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["constructor(logg",{"_index":323,"title":{},"body":{"classes/Logger.html":{}}}],["convert",{"_index":280,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["convertedthreshold",{"_index":160,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["correspond",{"_index":614,"title":{},"body":{"index.html":{}}}],["coverag",{"_index":499,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["creat",{"_index":43,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["ctor",{"_index":565,"title":{},"body":{"index.html":{}}}],["current",{"_index":219,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["data",{"_index":68,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["date",{"_index":315,"title":{},"body":{"interfaces/LogMessage.html":{}}}],["date(logmessage.timestamp",{"_index":246,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["debug",{"_index":180,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["debug(methodnam",{"_index":326,"title":{},"body":{"classes/Logger.html":{}}}],["debugg",{"_index":427,"title":{},"body":{"injectables/LoggingService.html":{}}}],["declar",{"_index":473,"title":{},"body":{"modules/LoggingServiceModule.html":{}}}],["default",{"_index":177,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["defin",{"_index":41,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["definit",{"_index":466,"title":{},"body":{"interfaces/LoggingServiceConfiguration.html":{},"index.html":{}}}],["dep",{"_index":642,"title":{},"body":{"index.html":{}}}],["depend",{"_index":64,"title":{"dependencies.html":{}},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"dependencies.html":{},"index.html":{}}}],["deriv",{"_index":407,"title":{},"body":{"injectables/LoggingService.html":{}}}],["describ",{"_index":587,"title":{},"body":{"index.html":{}}}],["descript",{"_index":7,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["develop",{"_index":624,"title":{},"body":{"index.html":{}}}],["differ",{"_index":281,"title":{},"body":{"classes/LogLevelConverter.html":{},"interfaces/LoggingServiceConfiguration.html":{},"index.html":{}}}],["disabl",{"_index":617,"title":{},"body":{"index.html":{}}}],["display",{"_index":435,"title":{},"body":{"injectables/LoggingService.html":{}}}],["doc",{"_index":232,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["document",{"_index":500,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["dot",{"_index":592,"title":{},"body":{"index.html":{}}}],["dotnet",{"_index":595,"title":{},"body":{"index.html":{}}}],["dure",{"_index":623,"title":{},"body":{"index.html":{}}}],["e",{"_index":378,"title":{},"body":{"classes/Logger.html":{},"injectables/LoggingService.html":{},"index.html":{}}}],["e.g",{"_index":562,"title":{},"body":{"index.html":{}}}],["e.messag",{"_index":379,"title":{},"body":{"classes/Logger.html":{}}}],["each",{"_index":72,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["element",{"_index":253,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["emitt",{"_index":422,"title":{},"body":{"injectables/LoggingService.html":{}}}],["empti",{"_index":129,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["enabl",{"_index":475,"title":{},"body":{"classes/MemoryAppender.html":{},"index.html":{}}}],["encapsul",{"_index":547,"title":{},"body":{"index.html":{}}}],["entri",{"_index":317,"title":{},"body":{"classes/Logger.html":{},"index.html":{}}}],["entry(methodnam",{"_index":330,"title":{},"body":{"classes/Logger.html":{}}}],["enumer",{"_index":522,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["environ",{"_index":637,"title":{},"body":{"index.html":{}}}],["environment.t",{"_index":636,"title":{},"body":{"index.html":{}}}],["error",{"_index":54,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["error(\"configur",{"_index":128,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["error(\"localstoragekey",{"_index":237,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["error(\"url",{"_index":131,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["error(`invalid",{"_index":312,"title":{},"body":{"classes/LogLevelConverter.html":{},"injectables/LoggingService.html":{}}}],["error(methodnam",{"_index":332,"title":{},"body":{"classes/Logger.html":{}}}],["event",{"_index":52,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["eventemitt",{"_index":50,"title":{},"body":{"classes/AjaxAppender.html":{},"injectables/LoggingService.html":{}}}],["exampl",{"_index":610,"title":{},"body":{"index.html":{}}}],["exist",{"_index":240,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{}}}],["exit",{"_index":318,"title":{},"body":{"classes/Logger.html":{},"index.html":{}}}],["exit(methodnam",{"_index":334,"title":{},"body":{"classes/Logger.html":{}}}],["export",{"_index":114,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["extend",{"_index":115,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["fals",{"_index":137,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["fatal",{"_index":181,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["fatal(methodnam",{"_index":336,"title":{},"body":{"classes/Logger.html":{}}}],["feedback",{"_index":630,"title":{},"body":{"index.html":{}}}],["file",{"_index":4,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{}}}],["final",{"_index":560,"title":{},"body":{"index.html":{}}}],["first",{"_index":555,"title":{},"body":{"index.html":{}}}],["follow",{"_index":385,"title":{},"body":{"injectables/LoggingService.html":{},"index.html":{}}}],["format",{"_index":329,"title":{},"body":{"classes/Logger.html":{}}}],["formatargu",{"_index":319,"title":{},"body":{"classes/Logger.html":{}}}],["formatargument(arg",{"_index":338,"title":{},"body":{"classes/Logger.html":{}}}],["framework",{"_index":550,"title":{},"body":{"index.html":{}}}],["full",{"_index":252,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["function",{"_index":384,"title":{},"body":{"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["get",{"_index":104,"title":{"index.html":{}},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["getbatchs",{"_index":30,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["getinternalappend",{"_index":31,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["getinternallogg",{"_index":320,"title":{},"body":{"classes/Logger.html":{}}}],["getlayout",{"_index":32,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["getlocalstoragekey",{"_index":203,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["getlogg",{"_index":392,"title":{},"body":{"injectables/LoggingService.html":{}}}],["getlogger(loggernam",{"_index":397,"title":{},"body":{"injectables/LoggingService.html":{}}}],["getloglevel",{"_index":321,"title":{},"body":{"classes/Logger.html":{}}}],["getlogmessag",{"_index":204,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["getmaxmessag",{"_index":205,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["getrootlogg",{"_index":393,"title":{},"body":{"injectables/LoggingService.html":{}}}],["gettimerinterv",{"_index":33,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["given",{"_index":65,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["greater",{"_index":620,"title":{},"body":{"index.html":{}}}],["hello",{"_index":578,"title":{},"body":{"index.html":{}}}],["helper",{"_index":279,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["here",{"_index":374,"title":{},"body":{"classes/Logger.html":{}}}],["hierarchi",{"_index":599,"title":{},"body":{"index.html":{}}}],["higher",{"_index":650,"title":{},"body":{"index.html":{}}}],["http",{"_index":14,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["https://my.backend.xy/loggingbackend",{"_index":19,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["identifi",{"_index":501,"title":{},"body":{"coverage.html":{}}}],["immediatedli",{"_index":183,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{}}}],["import",{"_index":106,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["includ",{"_index":611,"title":{},"body":{"index.html":{}}}],["index",{"_index":25,"title":{"index.html":{}},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["info",{"_index":2,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["info(methodnam",{"_index":345,"title":{},"body":{"classes/Logger.html":{}}}],["inform",{"_index":494,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["inherit",{"_index":606,"title":{},"body":{"index.html":{}}}],["inject",{"_index":380,"title":{"injectables/LoggingService.html":{}},"body":{"injectables/LoggingService.html":{},"coverage.html":{},"overview.html":{}}}],["instanc",{"_index":45,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["instanceof",{"_index":372,"title":{},"body":{"classes/Logger.html":{}}}],["instead",{"_index":649,"title":{},"body":{"index.html":{}}}],["intend",{"_index":616,"title":{},"body":{"index.html":{}}}],["interfac",{"_index":175,"title":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/LogMessage.html":{},"interfaces/LoggingServiceConfiguration.html":{},"interfaces/MemoryAppenderConfiguration.html":{}},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/LogMessage.html":{},"interfaces/LoggingServiceConfiguration.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{},"overview.html":{}}}],["intern",{"_index":75,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{}}}],["interv",{"_index":102,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["ionic",{"_index":526,"title":{},"body":{"index.html":{}}}],["ionic.logging.ajaxappend",{"_index":165,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["ionic.logging.localstorageappend",{"_index":273,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["ionic.logging.memoryappend",{"_index":497,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["java",{"_index":596,"title":{},"body":{"index.html":{}}}],["javascript",{"_index":184,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{}}}],["json",{"_index":113,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{}}}],["json.parse(localstorage.getitem(this.localstoragekey",{"_index":243,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["json.stringifi",{"_index":373,"title":{},"body":{"classes/Logger.html":{}}}],["json.stringify(arg",{"_index":376,"title":{},"body":{"classes/Logger.html":{}}}],["json.stringify(this.logmessag",{"_index":272,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["keep",{"_index":629,"title":{},"body":{"index.html":{}}}],["key",{"_index":197,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{}}}],["keyword",{"_index":235,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["kind",{"_index":598,"title":{},"body":{"index.html":{}}}],["last",{"_index":402,"title":{},"body":{"injectables/LoggingService.html":{}}}],["later",{"_index":627,"title":{},"body":{"index.html":{}}}],["latest",{"_index":527,"title":{},"body":{"index.html":{}}}],["layout",{"_index":84,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["length",{"_index":87,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["level",{"_index":258,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["level.convert",{"_index":112,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["level.converter.t",{"_index":278,"title":{},"body":{"classes/LogLevelConverter.html":{},"coverage.html":{}}}],["level.converter.ts:15",{"_index":287,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["level.converter.ts:43",{"_index":290,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["level.converter.ts:71",{"_index":293,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["level.loggernam",{"_index":443,"title":{},"body":{"injectables/LoggingService.html":{}}}],["level.loglevel",{"_index":446,"title":{},"body":{"injectables/LoggingService.html":{}}}],["level.model",{"_index":225,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{}}}],["level.model.t",{"_index":524,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["level.warn",{"_index":631,"title":{},"body":{"index.html":{}}}],["levelfromlog4javascript",{"_index":282,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["levelfromlog4javascript(level",{"_index":285,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["levelfromstr",{"_index":283,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["levelfromstring(level",{"_index":289,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["leveltolog4javascript",{"_index":284,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["leveltolog4javascript(level",{"_index":292,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["limit",{"_index":405,"title":{},"body":{"injectables/LoggingService.html":{}}}],["line:complet",{"_index":231,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["line:no",{"_index":233,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["local",{"_index":194,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"index.html":{}}}],["localstorag",{"_index":270,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["localstorage.getitem(this.localstoragekey",{"_index":241,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["localstorage.removeitem(this.localstoragekey",{"_index":276,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["localstorage.setitem(this.localstoragekey",{"_index":271,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["localstorageappend",{"_index":189,"title":{"classes/LocalStorageAppender.html":{}},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["localstorageappender(configuration.localstorageappend",{"_index":453,"title":{},"body":{"injectables/LoggingService.html":{}}}],["localstorageappender.maxmessagesdefault",{"_index":248,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["localstorageappender.thresholddefault",{"_index":249,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["localstorageappenderconfigur",{"_index":207,"title":{"interfaces/LocalStorageAppenderConfiguration.html":{}},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{}}}],["localstoragekey",{"_index":198,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{}}}],["log",{"_index":10,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["log4javascript",{"_index":108,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"dependencies.html":{}}}],["log4javascript'",{"_index":288,"title":{},"body":{"classes/LogLevelConverter.html":{},"index.html":{}}}],["log4javascript.ajaxappend",{"_index":81,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["log4javascript.ajaxappender(configuration.url",{"_index":133,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["log4javascript.append",{"_index":116,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["log4javascript.browserconsoleappend",{"_index":417,"title":{},"body":{"injectables/LoggingService.html":{}}}],["log4javascript.getlogger(level.loggernam",{"_index":444,"title":{},"body":{"injectables/LoggingService.html":{}}}],["log4javascript.getlogger(logg",{"_index":355,"title":{},"body":{"classes/Logger.html":{}}}],["log4javascript.getrootlogg",{"_index":354,"title":{},"body":{"classes/Logger.html":{},"injectables/LoggingService.html":{}}}],["log4javascript.getrootlogger().addappender(ajaxappend",{"_index":451,"title":{},"body":{"injectables/LoggingService.html":{}}}],["log4javascript.getrootlogger().addappender(localstorageappend",{"_index":454,"title":{},"body":{"injectables/LoggingService.html":{}}}],["log4javascript.jsonlayout(fals",{"_index":136,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["log4javascript.layout",{"_index":85,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["log4javascript.level",{"_index":286,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.al",{"_index":296,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.debug",{"_index":298,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.error",{"_index":300,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.fat",{"_index":302,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.info",{"_index":304,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.off",{"_index":306,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.trac",{"_index":308,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.level.warn",{"_index":310,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["log4javascript.logg",{"_index":343,"title":{},"body":{"classes/Logger.html":{},"injectables/LoggingService.html":{}}}],["log4javascript.loggingev",{"_index":56,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["log4javascript.loglog.setquietmode(tru",{"_index":421,"title":{},"body":{"injectables/LoggingService.html":{}}}],["log4javascript.patternlayout(\"%d{hh:mm:ss,sss",{"_index":430,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logger",{"_index":260,"title":{"classes/Logger.html":{}},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"coverage.html":{},"index.html":{}}}],["logger'",{"_index":608,"title":{},"body":{"index.html":{}}}],["logger(loggernam",{"_index":461,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logger.addappender(this.browserconsoleappend",{"_index":434,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logger.addappender(this.memoryappend",{"_index":441,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logger.model",{"_index":412,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logger.setlevel(log4javascript.level.warn",{"_index":425,"title":{},"body":{"injectables/LoggingService.html":{}}}],["logger.setlevel(loglevelconverter.leveltolog4javascript(loglevelconverter.levelfromstring(level.loglevel",{"_index":445,"title":{},"body":{"injectables/LoggingService.html":{}}}],["loggernam",{"_index":400,"title":{},"body":{"injectables/LoggingService.html":{},"index.html":{}}}],["loggingconfigur",{"_index":633,"title":{},"body":{"index.html":{}}}],["loggingev",{"_index":59,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loggingevent.logg",{"_index":261,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loggingevent.logger.nam",{"_index":263,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loggingevent.messages.slice(1",{"_index":264,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loggingevent.messages[0",{"_index":266,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loggingevent.timestamp",{"_index":267,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loggingservic",{"_index":381,"title":{"injectables/LoggingService.html":{}},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["loggingservice.configure(environment.log",{"_index":640,"title":{},"body":{"index.html":{}}}],["loggingservice.getlogger(\"myapp.mycompon",{"_index":564,"title":{},"body":{"index.html":{}}}],["loggingserviceconfigur",{"_index":395,"title":{"interfaces/LoggingServiceConfiguration.html":{}},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{}}}],["loggingservicemodul",{"_index":470,"title":{"modules/LoggingServiceModule.html":{}},"body":{"modules/LoggingServiceModule.html":{},"index.html":{},"modules.html":{}}}],["loglevel",{"_index":224,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["loglevel.al",{"_index":297,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel.debug",{"_index":299,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel.error",{"_index":301,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel.fat",{"_index":303,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel.info",{"_index":305,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel.off",{"_index":307,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel.trac",{"_index":309,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel.warn",{"_index":311,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["loglevel[loglevelconverter.levelfromlog4javascript(loggingevent.level",{"_index":259,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loglevelconvert",{"_index":111,"title":{"classes/LogLevelConverter.html":{}},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"coverage.html":{}}}],["loglevelconverter.levelfromlog4javascript(this.logger.getlevel",{"_index":356,"title":{},"body":{"classes/Logger.html":{}}}],["loglevelconverter.levelfromstring(configuration.browserconsoleappender.threshold",{"_index":459,"title":{},"body":{"injectables/LoggingService.html":{}}}],["loglevelconverter.levelfromstring(configuration.threshold",{"_index":162,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["loglevelconverter.leveltolog4javascript",{"_index":161,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["logmessag",{"_index":214,"title":{"interfaces/LogMessage.html":{}},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LogMessage.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"coverage.html":{}}}],["logmessage.timestamp",{"_index":245,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["logmessageschang",{"_index":391,"title":{},"body":{"injectables/LoggingService.html":{}}}],["look",{"_index":552,"title":{},"body":{"index.html":{}}}],["lower",{"_index":619,"title":{},"body":{"index.html":{}}}],["m",{"_index":432,"title":{},"body":{"injectables/LoggingService.html":{}}}],["mainli",{"_index":77,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["make",{"_index":621,"title":{},"body":{"index.html":{}}}],["match",{"_index":174,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["maximum",{"_index":216,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["maxmessag",{"_index":200,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["maxmessagesdefault",{"_index":227,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["mean",{"_index":404,"title":{},"body":{"injectables/LoggingService.html":{},"index.html":{}}}],["memori",{"_index":414,"title":{},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["memoryappend",{"_index":387,"title":{"classes/MemoryAppender.html":{}},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["memoryappender.maxmessagesdefault",{"_index":492,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["memoryappender.thresholddefault",{"_index":493,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["memoryappender](../memoryappender.html",{"_index":462,"title":{},"body":{"injectables/LoggingService.html":{}}}],["memoryappenderconfigur",{"_index":468,"title":{"interfaces/MemoryAppenderConfiguration.html":{}},"body":{"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{}}}],["messag",{"_index":11,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["message.model",{"_index":226,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["message.model.t",{"_index":313,"title":{},"body":{"interfaces/LogMessage.html":{},"coverage.html":{}}}],["method",{"_index":29,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["methodnam",{"_index":265,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["millisecond",{"_index":89,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["miscellan",{"_index":521,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["modifi",{"_index":67,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["modul",{"_index":469,"title":{"modules/LoggingServiceModule.html":{},"modules.html":{}},"body":{"modules/LoggingServiceModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":220,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["much",{"_index":274,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["multi",{"_index":643,"title":{},"body":{"index.html":{}}}],["myapp.mycompon",{"_index":574,"title":{},"body":{"index.html":{}}}],["myapp.mynamespace.mylogg",{"_index":648,"title":{},"body":{"index.html":{}}}],["mycompon",{"_index":563,"title":{},"body":{"index.html":{}}}],["mylog",{"_index":199,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["mymethod",{"_index":569,"title":{},"body":{"index.html":{}}}],["mymethod(index",{"_index":568,"title":{},"body":{"index.html":{}}}],["name",{"_index":47,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["namespac",{"_index":594,"title":{},"body":{"index.html":{}}}],["need",{"_index":530,"title":{},"body":{"index.html":{}}}],["new",{"_index":44,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"coverage.html":{}}}],["next",{"_index":230,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["ngmodul",{"_index":472,"title":{},"body":{"modules/LoggingServiceModule.html":{},"index.html":{}}}],["null",{"_index":234,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["number",{"_index":70,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["object",{"_index":328,"title":{},"body":{"classes/Logger.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["older",{"_index":532,"title":{},"body":{"index.html":{}}}],["oldest",{"_index":222,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["on",{"_index":585,"title":{},"body":{"index.html":{}}}],["onlogmessageschangedcallback",{"_index":491,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["option",{"_index":49,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["order",{"_index":615,"title":{},"body":{"index.html":{}}}],["output",{"_index":572,"title":{},"body":{"index.html":{}}}],["overview",{"_index":655,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwritten",{"_index":66,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["packag",{"_index":516,"title":{"dependencies.html":{}},"body":{"index.html":{}}}],["page",{"_index":436,"title":{},"body":{"injectables/LoggingService.html":{}}}],["par",{"_index":609,"title":{},"body":{"index.html":{}}}],["param",{"_index":125,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["paramet",{"_index":46,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["parent",{"_index":605,"title":{},"body":{"index.html":{}}}],["part",{"_index":590,"title":{},"body":{"index.html":{}}}],["partial",{"_index":465,"title":{},"body":{"interfaces/LoggingServiceConfiguration.html":{}}}],["peer",{"_index":518,"title":{},"body":{"dependencies.html":{}}}],["per",{"_index":586,"title":{},"body":{"index.html":{}}}],["place",{"_index":588,"title":{},"body":{"index.html":{}}}],["possibl",{"_index":388,"title":{},"body":{"injectables/LoggingService.html":{},"index.html":{}}}],["prevent",{"_index":418,"title":{},"body":{"injectables/LoggingService.html":{}}}],["privat",{"_index":117,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["process",{"_index":146,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["produc",{"_index":571,"title":{},"body":{"index.html":{}}}],["properti",{"_index":26,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/LogMessage.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["provid",{"_index":641,"title":{},"body":{"index.html":{}}}],["providedin",{"_index":416,"title":{},"body":{"injectables/LoggingService.html":{}}}],["public",{"_index":27,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["purpos",{"_index":80,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["queu",{"_index":91,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["quit",{"_index":593,"title":{},"body":{"index.html":{}}}],["rc",{"_index":534,"title":{},"body":{"index.html":{}}}],["read",{"_index":239,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["realtim",{"_index":489,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["recommend",{"_index":634,"title":{},"body":{"index.html":{}}}],["regist",{"_index":485,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["remain",{"_index":147,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{}}}],["remov",{"_index":211,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["represent",{"_index":291,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["request",{"_index":73,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["respect",{"_index":618,"title":{},"body":{"index.html":{}}}],["respons",{"_index":584,"title":{},"body":{"index.html":{}}}],["restrict",{"_index":651,"title":{},"body":{"index.html":{}}}],["result",{"_index":173,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{}}}],["retriev",{"_index":403,"title":{},"body":{"injectables/LoggingService.html":{}}}],["return",{"_index":60,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["root",{"_index":386,"title":{},"body":{"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"index.html":{}}}],["same",{"_index":529,"title":{},"body":{"index.html":{}}}],["sampl",{"_index":551,"title":{},"body":{"index.html":{}}}],["save",{"_index":195,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["see",{"_index":558,"title":{},"body":{"index.html":{}}}],["send",{"_index":9,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"index.html":{}}}],["sent",{"_index":71,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["separ",{"_index":591,"title":{},"body":{"index.html":{}}}],["serial",{"_index":196,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["serv",{"_index":625,"title":{},"body":{"index.html":{}}}],["server",{"_index":12,"title":{},"body":{"classes/AjaxAppender.html":{},"injectables/LoggingService.html":{},"index.html":{}}}],["servic",{"_index":383,"title":{},"body":{"injectables/LoggingService.html":{},"index.html":{}}}],["service.configur",{"_index":413,"title":{},"body":{"injectables/LoggingService.html":{}}}],["service.configuration.t",{"_index":464,"title":{},"body":{"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{}}}],["service.module.t",{"_index":471,"title":{},"body":{"modules/LoggingServiceModule.html":{}}}],["set",{"_index":94,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["setbatchs",{"_index":34,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["setbatchsize(batchs",{"_index":92,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["setlayout",{"_index":35,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["setlayout(layout",{"_index":97,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["setloglevel",{"_index":322,"title":{},"body":{"classes/Logger.html":{}}}],["setloglevel(level",{"_index":347,"title":{},"body":{"classes/Logger.html":{}}}],["setmaxmessag",{"_index":206,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["setmaxmessages(valu",{"_index":217,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["setonlogmessageschangedcallback",{"_index":477,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["setonlogmessageschangedcallback(callback",{"_index":483,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["settimerinterv",{"_index":36,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["settimerinterval(timerinterv",{"_index":99,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["sever",{"_index":612,"title":{},"body":{"index.html":{}}}],["show",{"_index":419,"title":{},"body":{"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["singl",{"_index":589,"title":{},"body":{"index.html":{}}}],["size",{"_index":96,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["sourc",{"_index":3,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["specif",{"_index":58,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["specifi",{"_index":399,"title":{},"body":{"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["src/.../log",{"_index":523,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/lib/ajax",{"_index":5,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"coverage.html":{}}}],["src/lib/brows",{"_index":186,"title":{},"body":{"interfaces/BrowserConsoleAppenderConfiguration.html":{},"coverage.html":{}}}],["src/lib/loc",{"_index":190,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"coverage.html":{}}}],["src/lib/log",{"_index":277,"title":{},"body":{"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"interfaces/LoggingServiceConfiguration.html":{},"modules/LoggingServiceModule.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/lib/logger.model.t",{"_index":316,"title":{},"body":{"classes/Logger.html":{},"coverage.html":{}}}],["src/lib/logger.model.ts:11",{"_index":324,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:112",{"_index":333,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:128",{"_index":337,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:145",{"_index":331,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:164",{"_index":335,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:179",{"_index":339,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:199",{"_index":342,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:29",{"_index":344,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:38",{"_index":348,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:48",{"_index":350,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:64",{"_index":327,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:80",{"_index":346,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logger.model.ts:96",{"_index":352,"title":{},"body":{"classes/Logger.html":{}}}],["src/lib/logging.service.t",{"_index":382,"title":{},"body":{"injectables/LoggingService.html":{},"coverage.html":{}}}],["src/lib/logging.service.ts:138",{"_index":406,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:147",{"_index":398,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:159",{"_index":401,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:31",{"_index":409,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:37",{"_index":408,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:41",{"_index":394,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/logging.service.ts:80",{"_index":396,"title":{},"body":{"injectables/LoggingService.html":{}}}],["src/lib/memori",{"_index":474,"title":{},"body":{"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{}}}],["start",{"_index":525,"title":{"index.html":{}},"body":{}}],["statement",{"_index":502,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":118,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"classes/MemoryAppender.html":{}}}],["step",{"_index":557,"title":{},"body":{"index.html":{}}}],["storag",{"_index":191,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["store",{"_index":192,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["string",{"_index":105,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"index.html":{}}}],["super",{"_index":126,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["switch",{"_index":294,"title":{},"body":{"classes/LogLevelConverter.html":{}}}],["tabl",{"_index":515,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverag",{"_index":514,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":632,"title":{},"body":{"index.html":{}}}],["test",{"_index":79,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{}}}],["therefor",{"_index":275,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["this.ajaxappend",{"_index":132,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.addheader(\"cont",{"_index":138,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.append(loggingev",{"_index":164,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.getbatchs",{"_index":166,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.getlayout",{"_index":168,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.gettimerinterv",{"_index":170,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.setbatchsize(batchs",{"_index":167,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.setfailcallback((messag",{"_index":144,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.setlayout(layout",{"_index":169,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.setlayout(new",{"_index":135,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.setsendallonunload(tru",{"_index":142,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.settimed(timerinterv",{"_index":171,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappender.settimerinterval(timerinterv",{"_index":172,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.ajaxappenderfail",{"_index":424,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.ajaxappenderfailed.emit(messag",{"_index":450,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.appenderfail",{"_index":143,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.appenderfailed.emit(messag",{"_index":145,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.browserconsoleappend",{"_index":428,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.browserconsoleappender.setlayout(new",{"_index":429,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.browserconsoleappender.setthreshold(convertedthreshold",{"_index":460,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.browserconsoleappender.setthreshold(log4javascript.level.al",{"_index":433,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.configur",{"_index":148,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["this.localstoragekey",{"_index":238,"title":{},"body":{"classes/LocalStorageAppender.html":{}}}],["this.logg",{"_index":353,"title":{},"body":{"classes/Logger.html":{},"index.html":{}}}],["this.logger.debug.apply(this.logg",{"_index":362,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.entry(methodnam",{"_index":566,"title":{},"body":{"index.html":{}}}],["this.logger.error(methodnam",{"_index":570,"title":{},"body":{"index.html":{}}}],["this.logger.error.apply(this.logg",{"_index":368,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.exit(methodnam",{"_index":567,"title":{},"body":{"index.html":{}}}],["this.logger.fatal.apply(this.logg",{"_index":370,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.info.apply(this.logg",{"_index":364,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.isdebugen",{"_index":361,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.iserroren",{"_index":367,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.isfatalen",{"_index":369,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.isinfoen",{"_index":363,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.istraceen",{"_index":358,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.iswarnen",{"_index":365,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.setlevel(loglevelconverter.leveltolog4javascript(level",{"_index":357,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.trace.apply(this.logg",{"_index":360,"title":{},"body":{"classes/Logger.html":{}}}],["this.logger.warn.apply(this.logg",{"_index":366,"title":{},"body":{"classes/Logger.html":{}}}],["this.logmessag",{"_index":242,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["this.logmessages.length",{"_index":254,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["this.logmessages.push(messag",{"_index":268,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["this.logmessages.shift",{"_index":256,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["this.logmessages.splice(0",{"_index":498,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["this.logmessageschang",{"_index":423,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.logmessageschanged.emit(messag",{"_index":440,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.maxmessag",{"_index":255,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["this.memoryappend",{"_index":437,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.memoryappender.configure(configuration.memoryappend",{"_index":456,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.memoryappender.getlogmessag",{"_index":463,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.memoryappender.setlayout(new",{"_index":438,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.memoryappender.setonlogmessageschangedcallback((messag",{"_index":439,"title":{},"body":{"injectables/LoggingService.html":{}}}],["this.onlogmessageschangedcallback",{"_index":495,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["this.onlogmessageschangedcallback(messag",{"_index":496,"title":{},"body":{"classes/MemoryAppender.html":{}}}],["this.setbatchsize(configuration.batchs",{"_index":156,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.setmaxmessages(configuration.maxmessag",{"_index":250,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["this.setthreshold(convertedthreshold",{"_index":163,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["this.settimerinterval(configuration.timerinterv",{"_index":158,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["this.url",{"_index":134,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["threshold",{"_index":24,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["thresholddefault",{"_index":123,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["throw",{"_index":127,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/LogLevelConverter.html":{},"injectables/LoggingService.html":{}}}],["time",{"_index":88,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/LogMessage.html":{},"classes/MemoryAppender.html":{}}}],["timer",{"_index":101,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["timerinterv",{"_index":22,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["timerintervaldefault",{"_index":121,"title":{},"body":{"classes/AjaxAppender.html":{}}}],["timestamp",{"_index":244,"title":{},"body":{"classes/LocalStorageAppender.html":{},"interfaces/LogMessage.html":{},"classes/MemoryAppender.html":{}}}],["tostr",{"_index":37,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/MemoryAppender.html":{}}}],["trace",{"_index":182,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["trace(methodnam",{"_index":349,"title":{},"body":{"classes/Logger.html":{}}}],["tri",{"_index":375,"title":{},"body":{"classes/Logger.html":{},"injectables/LoggingService.html":{},"index.html":{}}}],["trigger",{"_index":53,"title":{},"body":{"classes/AjaxAppender.html":{},"injectables/LoggingService.html":{}}}],["true",{"_index":644,"title":{},"body":{"index.html":{}}}],["tslint:dis",{"_index":229,"title":{},"body":{"classes/LocalStorageAppender.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["type",{"_index":48,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"interfaces/LogMessage.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"coverage.html":{},"index.html":{}}}],["typeof",{"_index":157,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["typic",{"_index":15,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"index.html":{}}}],["undefin",{"_index":262,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}],["unit",{"_index":78,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"classes/MemoryAppender.html":{}}}],["url",{"_index":18,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{}}}],["us",{"_index":76,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["usag",{"_index":554,"title":{},"body":{"index.html":{}}}],["usefactori",{"_index":646,"title":{},"body":{"index.html":{}}}],["valid",{"_index":178,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["valu",{"_index":179,"title":{},"body":{"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"interfaces/MemoryAppenderConfiguration.html":{}}}],["version",{"_index":528,"title":{},"body":{"index.html":{}}}],["via",{"_index":13,"title":{},"body":{"classes/AjaxAppender.html":{},"injectables/LoggingService.html":{}}}],["viewer",{"_index":553,"title":{},"body":{"index.html":{}}}],["visibl",{"_index":622,"title":{},"body":{"index.html":{}}}],["void",{"_index":61,"title":{},"body":{"classes/AjaxAppender.html":{},"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{},"index.html":{}}}],["want",{"_index":488,"title":{},"body":{"classes/MemoryAppender.html":{},"index.html":{}}}],["warn",{"_index":124,"title":{},"body":{"classes/AjaxAppender.html":{},"interfaces/AjaxAppenderConfiguration.html":{},"interfaces/BrowserConsoleAppenderConfiguration.html":{},"classes/LocalStorageAppender.html":{},"interfaces/LocalStorageAppenderConfiguration.html":{},"classes/LogLevelConverter.html":{},"classes/Logger.html":{},"injectables/LoggingService.html":{},"interfaces/LoggingServiceConfiguration.html":{},"interfaces/MemoryAppenderConfiguration.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["warn(methodnam",{"_index":351,"title":{},"body":{"classes/Logger.html":{}}}],["way",{"_index":635,"title":{},"body":{"index.html":{}}}],["write",{"_index":269,"title":{},"body":{"classes/LocalStorageAppender.html":{},"classes/Logger.html":{},"index.html":{}}}],["written",{"_index":314,"title":{},"body":{"interfaces/LogMessage.html":{},"index.html":{}}}],["ye",{"_index":325,"title":{},"body":{"classes/Logger.html":{},"injectables/LoggingService.html":{},"classes/MemoryAppender.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AjaxAppender.html":{"url":"classes/AjaxAppender.html","title":"class - AjaxAppender","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AjaxAppender\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ajax-appender.model.ts\n        \n\n            \n                Description\n            \n            \n                An appender which sends the log messages to a server via HTTP.\nA typical configuration could be:\n * {\n *   \"url\": \"https://my.backend.xy/LoggingBackend\",\n *   \"batchSize\": 10,\n *   \"timerInterval\": 60000,\n *   \"threshold\": \"INFO\"\n * }\n *\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                appenderFailed\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                append\n                            \n                            \n                                    Public\n                                configure\n                            \n                            \n                                    Public\n                                getBatchSize\n                            \n                            \n                                    Public\n                                getInternalAppender\n                            \n                            \n                                    Public\n                                getLayout\n                            \n                            \n                                    Public\n                                getTimerInterval\n                            \n                            \n                                    Public\n                                setBatchSize\n                            \n                            \n                                    Public\n                                setLayout\n                            \n                            \n                                    Public\n                                setTimerInterval\n                            \n                            \n                                    Public\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configuration: AjaxAppenderConfiguration)\n                    \n                \n                        \n                            \n                                Defined in src/lib/ajax-appender.model.ts:35\n                            \n                        \n\n                \n                    \n                            Creates a new instance of the appender.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configuration\n                                                  \n                                                        \n                                                                    AjaxAppenderConfiguration\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                configuration for the appender.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            appenderFailed\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        appenderFailed:     EventEmitter\n\n                    \n                \n                    \n                        \n                            Type :     EventEmitter\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/ajax-appender.model.ts:32\n                            \n                        \n\n                \n                    \n                        Event triggered when the appender could not send log messages to the server.\n\n                    \n                \n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                                    Description\n                                          \n                                      \n                                      \n                                                \n                                                        message\n                                                        \n                                                                error message\n\n                                                        \n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            append\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        append(loggingEvent: log4javascript.LoggingEvent)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/ajax-appender.model.ts:103\n                            \n                        \n\n\n                \n                    \n                            Appender-specific method to append a log message.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        loggingEvent\n                                                        \n                                                                    log4javascript.LoggingEvent\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                event to be appended.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            configure\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        configure(configuration: AjaxAppenderConfiguration)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/ajax-appender.model.ts:80\n                            \n                        \n\n\n                \n                    \n                            Configures the logging depending on the given configuration.\nOnly the defined properties get overwritten.\nThe url cannot be modified.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configuration\n                                                        \n                                                                    AjaxAppenderConfiguration\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                configuration data.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getBatchSize\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getBatchSize()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/ajax-appender.model.ts:127\n                            \n                        \n\n\n                \n                    \n                            Returns the number of log messages sent in each request.\n\n\n                            \n                                Returns :     number\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getInternalAppender\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getInternalAppender()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/ajax-appender.model.ts:120\n                            \n                        \n\n\n                \n                    \n                            Get the internally used appender.\nMainly for unit testing purposes.\n\n\n                            \n                                Returns :     log4javascript.AjaxAppender\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getLayout\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getLayout()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/ajax-appender.model.ts:142\n                            \n                        \n\n\n                \n                    \n                            Returns the appender's layout.\n\n\n                            \n                                Returns :     log4javascript.Layout\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getTimerInterval\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getTimerInterval()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/ajax-appender.model.ts:156\n                            \n                        \n\n\n                \n                    \n                            Returns the length of time in milliseconds between each sending of queued log messages.\n\n\n                            \n                                Returns :     number\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setBatchSize\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setBatchSize(batchSize: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/ajax-appender.model.ts:135\n                            \n                        \n\n\n                \n                    \n                            Sets the number of log messages to send in each request.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        batchSize\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                new batch size\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setLayout\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setLayout(layout: log4javascript.Layout)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/ajax-appender.model.ts:149\n                            \n                        \n\n\n                \n                    \n                            Sets the appender's layout.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        layout\n                                                        \n                                                                    log4javascript.Layout\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setTimerInterval\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setTimerInterval(timerInterval: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/ajax-appender.model.ts:164\n                            \n                        \n\n\n                \n                    \n                            Sets the length of time in milliseconds between each sending of queued log messages.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        timerInterval\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                new timer interval\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        toString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/ajax-appender.model.ts:112\n                            \n                        \n\n\n                \n                    \n                            Gets the appender's name.\nMainly for unit testing purposes.\n\n\n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    appender's name\n\n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { EventEmitter } from \"@angular/core\";\n\nimport * as log4javascript from \"log4javascript\";\n\nimport { AjaxAppenderConfiguration } from \"./ajax-appender.configuration\";\nimport { LogLevelConverter } from \"./log-level.converter\";\n\n/**\n * An appender which sends the log messages to a server via HTTP.\n *\n * A typical configuration could be:\n *\n * ```json\n * {\n *   \"url\": \"https://my.backend.xy/LoggingBackend\",\n *   \"batchSize\": 10,\n *   \"timerInterval\": 60000,\n *   \"threshold\": \"INFO\"\n * }\n * ```\n */\nexport class AjaxAppender extends log4javascript.Appender {\n\n\tprivate static batchSizeDefault = 1;\n\tprivate static timerIntervalDefault = 0;\n\tprivate static thresholdDefault = \"WARN\";\n\n\t/**\n\t * Event triggered when the appender could not send log messages to the server.\n\t * @param message error message\n\t */\n\tpublic appenderFailed: EventEmitter;\n\n\tprivate ajaxAppender: log4javascript.AjaxAppender;\n\tprivate url: string;\n\n\t/**\n\t * Creates a new instance of the appender.\n\t * @param configuration configuration for the appender.\n\t */\n\tconstructor(configuration: AjaxAppenderConfiguration) {\n\t\tsuper();\n\n\t\tif (!configuration) {\n\t\t\tthrow new Error(\"configuration must be not empty\");\n\t\t}\n\t\tif (!configuration.url) {\n\t\t\tthrow new Error(\"url must be not empty\");\n\t\t}\n\t\tthis.ajaxAppender = new log4javascript.AjaxAppender(configuration.url);\n\t\tthis.url = configuration.url;\n\n\t\tthis.ajaxAppender.setLayout(new log4javascript.JsonLayout(false, false));\n\t\tthis.ajaxAppender.addHeader(\"Content-Type\", \"application/json; charset=utf-8\");\n\t\tthis.ajaxAppender.setSendAllOnUnload(true);\n\n\t\tthis.appenderFailed = new EventEmitter();\n\t\tthis.ajaxAppender.setFailCallback((message: any) => {\n\t\t\tthis.appenderFailed.emit(message);\n\t\t});\n\n\t\t// process remaining configuration\n\t\tthis.configure({\n\t\t\tbatchSize: configuration.batchSize || AjaxAppender.batchSizeDefault,\n\t\t\tthreshold: configuration.threshold || AjaxAppender.thresholdDefault,\n\t\t\ttimerInterval: configuration.timerInterval || AjaxAppender.timerIntervalDefault,\n\t\t\turl: configuration.url,\n\t\t});\n\n\t}\n\n\t/**\n\t * Configures the logging depending on the given configuration.\n\t *\n\t * Only the defined properties get overwritten.\n\t * The url cannot be modified.\n\t *\n\t * @param configuration configuration data.\n\t */\n\tpublic configure(configuration: AjaxAppenderConfiguration): void {\n\t\tif (configuration) {\n\t\t\tif (configuration.url && configuration.url !== this.url) {\n\t\t\t\tthrow new Error(\"url must not be changed\");\n\t\t\t}\n\t\t\tif (configuration.batchSize) {\n\t\t\t\tthis.setBatchSize(configuration.batchSize);\n\t\t\t}\n\t\t\tif (typeof configuration.timerInterval === \"number\") {\n\t\t\t\tthis.setTimerInterval(configuration.timerInterval);\n\t\t\t}\n\t\t\tif (configuration.threshold) {\n\t\t\t\tconst convertedThreshold = LogLevelConverter.levelToLog4Javascript(\n\t\t\t\t\tLogLevelConverter.levelFromString(configuration.threshold));\n\t\t\t\tthis.setThreshold(convertedThreshold);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Appender-specific method to append a log message.\n\t * @param loggingEvent event to be appended.\n\t */\n\tpublic append(loggingEvent: log4javascript.LoggingEvent): void {\n\t\tthis.ajaxAppender.append(loggingEvent);\n\t}\n\n\t/**\n\t * Gets the appender's name.\n\t * Mainly for unit testing purposes.\n\t * @return appender's name\n\t */\n\tpublic toString(): string {\n\t\treturn \"Ionic.Logging.AjaxAppender\";\n\t}\n\n\t/**\n\t * Get the internally used appender.\n\t * Mainly for unit testing purposes.\n\t */\n\tpublic getInternalAppender(): log4javascript.AjaxAppender {\n\t\treturn this.ajaxAppender;\n\t}\n\n\t/**\n\t * Returns the number of log messages sent in each request.\n\t */\n\tpublic getBatchSize(): number {\n\t\treturn this.ajaxAppender.getBatchSize();\n\t}\n\n\t/**\n\t * Sets the number of log messages to send in each request.\n\t * @param batchSize new batch size\n\t */\n\tpublic setBatchSize(batchSize: number): void {\n\t\tthis.ajaxAppender.setBatchSize(batchSize);\n\t}\n\n\t/**\n\t * Returns the appender's layout.\n\t */\n\tpublic getLayout(): log4javascript.Layout {\n\t\treturn this.ajaxAppender.getLayout();\n\t}\n\n\t/**\n\t * Sets the appender's layout.\n\t */\n\tpublic setLayout(layout: log4javascript.Layout): void {\n\t\tthis.ajaxAppender.setLayout(layout);\n\t}\n\n\t/**\n\t * Returns the length of time in milliseconds between each sending of queued log messages.\n\t */\n\tpublic getTimerInterval(): number {\n\t\treturn this.ajaxAppender.getTimerInterval();\n\t}\n\n\t/**\n\t * Sets the length of time in milliseconds between each sending of queued log messages.\n\t * @param timerInterval new timer interval\n\t */\n\tpublic setTimerInterval(timerInterval: number): void {\n\t\tthis.ajaxAppender.setTimed(timerInterval > 0);\n\t\tthis.ajaxAppender.setTimerInterval(timerInterval);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AjaxAppenderConfiguration.html":{"url":"interfaces/AjaxAppenderConfiguration.html","title":"interface - AjaxAppenderConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  AjaxAppenderConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ajax-appender.configuration.ts\n        \n\n            \n                Description\n            \n            \n                Configuration for AjaxAppender.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        batchSize\n                                \n                                \n                                            Optional\n                                        threshold\n                                \n                                \n                                            Optional\n                                        timerInterval\n                                \n                                \n                                        url\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        batchSize\n                                    \n                                \n                                \n                                    \n                                        batchSize:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Number of log messages sent in each request.\nDefault: 1.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        threshold\n                                    \n                                \n                                \n                                    \n                                        threshold:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Threshold.\nValid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN\nDefault: WARN.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timerInterval\n                                    \n                                \n                                \n                                    \n                                        timerInterval:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Interval for sending log messages (in milliseconds).\nIf set to 0, every message will be sent immediatedly.\nDefault: 0.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                    \n                                \n                                \n                                    \n                                        url:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Url to send JavaScript logs\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface AjaxAppenderConfiguration {\n\n\t/**\n\t * Url to send JavaScript logs\n\t */\n\turl: string;\n\n\t/**\n\t * Number of log messages sent in each request.\n\t *\n\t * Default: 1.\n\t */\n\tbatchSize?: number;\n\n\t/**\n\t * Interval for sending log messages (in milliseconds).\n\t *\n\t * If set to 0, every message will be sent immediatedly.\n\t *\n\t * Default: 0.\n\t */\n\ttimerInterval?: number;\n\n\t/**\n\t * Threshold.\n\t *\n\t * Valid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN\n\t *\n\t * Default: WARN.\n\t */\n\tthreshold?: string;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BrowserConsoleAppenderConfiguration.html":{"url":"interfaces/BrowserConsoleAppenderConfiguration.html","title":"interface - BrowserConsoleAppenderConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  BrowserConsoleAppenderConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/browser-console-appender.configuration.ts\n        \n\n            \n                Description\n            \n            \n                Configuration for BrowserConsoleAppender.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        threshold\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        threshold\n                                    \n                                \n                                \n                                    \n                                        threshold:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Threshold.\nValid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN\nDefault: DEBUG.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface BrowserConsoleAppenderConfiguration {\n\t/**\n\t * Threshold.\n\t *\n\t * Valid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN\n\t *\n\t * Default: DEBUG.\n\t */\n\tthreshold?: string;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LocalStorageAppender.html":{"url":"classes/LocalStorageAppender.html","title":"class - LocalStorageAppender","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LocalStorageAppender\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/local-storage-appender.model.ts\n        \n\n            \n                Description\n            \n            \n                An appender which stores the log messages in the browser's local storage.\nThe messages are saved JSON-serialized.\nYou have to configure which key is used for storing the messages.\nA typical configuration could be:\n * {\n *   \"localStorageKey\": \"myLogs\",\n *   \"maxMessages\": 500,\n *   \"threshold\": \"INFO\"\n * }\n *\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                append\n                            \n                            \n                                    Public\n                                clearLog\n                            \n                            \n                                    Public\n                                configure\n                            \n                            \n                                    Public\n                                getLocalStorageKey\n                            \n                            \n                                    Public\n                                getLogMessages\n                            \n                            \n                                    Public\n                                getMaxMessages\n                            \n                            \n                                    Public\n                                setMaxMessages\n                            \n                            \n                                    Public\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configuration: LocalStorageAppenderConfiguration)\n                    \n                \n                        \n                            \n                                Defined in src/lib/local-storage-appender.model.ts:34\n                            \n                        \n\n                \n                    \n                            Creates a new instance of the appender.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configuration\n                                                  \n                                                        \n                                                                    LocalStorageAppenderConfiguration\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                configuration for the appender.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            append\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        append(loggingEvent: log4javascript.LoggingEvent)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/local-storage-appender.model.ts:100\n                            \n                        \n\n\n                \n                    \n                            Appender-specific method to append a log message.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        loggingEvent\n                                                        \n                                                                    log4javascript.LoggingEvent\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                event to be appended.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            clearLog\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        clearLog()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/local-storage-appender.model.ts:177\n                            \n                        \n\n\n                \n                    \n                            Removes all messages from local storage.\nMainly for unit testing purposes.\n\n\n                            \n                                Returns :     void\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            configure\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        configure(configuration: LocalStorageAppenderConfiguration)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/local-storage-appender.model.ts:80\n                            \n                        \n\n\n                \n                    \n                            Configures the logging depending on the given configuration.\nOnly the defined properties get overwritten.\nThe localStorageKey cannot be modified.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configuration\n                                                        \n                                                                    LocalStorageAppenderConfiguration\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                configuration data.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getLocalStorageKey\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getLocalStorageKey()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/local-storage-appender.model.ts:131\n                            \n                        \n\n\n                \n                    \n                            Get the key which is used to store the messages in the local storage.\n\n\n                            \n                                Returns :     string\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getLogMessages\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getLogMessages()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/local-storage-appender.model.ts:169\n                            \n                        \n\n\n                \n                    \n                            Gets all messages stored in local storage.\nMainly for unit testing purposes.\n\n\n                            \n                            \n                            \n                                Returns :     LogMessage[]\n\n                            \n                                \n                                    stored messages\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getMaxMessages\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getMaxMessages()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/local-storage-appender.model.ts:138\n                            \n                        \n\n\n                \n                    \n                            Get the maximum number of messages which will be stored in local storage.\n\n\n                            \n                                Returns :     number\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setMaxMessages\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setMaxMessages(value: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/local-storage-appender.model.ts:148\n                            \n                        \n\n\n                \n                    \n                            Set the maximum number of messages which will be stored in local storage.\nIf the appender stores currently more messages than the new value allows, the oldest messages get removed.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                new maximum number\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        toString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/local-storage-appender.model.ts:124\n                            \n                        \n\n\n                \n                    \n                            Gets the appender's name.\nMainly for unit testing purposes.\n\n\n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    appender's name\n\n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import * as log4javascript from \"log4javascript\";\n\nimport { LocalStorageAppenderConfiguration } from \"./local-storage-appender.configuration\";\nimport { LogLevelConverter } from \"./log-level.converter\";\nimport { LogLevel } from \"./log-level.model\";\nimport { LogMessage } from \"./log-message.model\";\n\n/**\n * An appender which stores the log messages in the browser's local storage.\n *\n * The messages are saved JSON-serialized.\n * You have to configure which key is used for storing the messages.\n *\n * A typical configuration could be:\n *\n * ```json\n * {\n *   \"localStorageKey\": \"myLogs\",\n *   \"maxMessages\": 500,\n *   \"threshold\": \"INFO\"\n * }\n * ```\n */\nexport class LocalStorageAppender extends log4javascript.Appender {\n\n\tprivate static maxMessagesDefault = 250;\n\tprivate static thresholdDefault = \"WARN\";\n\n\tprivate maxMessages: number;\n\n\t// tslint:disable-next-line:completed-docs\n\tprivate localStorageKey: string;\n\t// tslint:disable-next-line:completed-docs\n\tprivate logMessages: LogMessage[];\n\n\t/**\n\t * Creates a new instance of the appender.\n\t * @param configuration configuration for the appender.\n\t */\n\tconstructor(configuration: LocalStorageAppenderConfiguration) {\n\t\tsuper();\n\n\t\tif (!configuration) {\n\t\t\tthrow new Error(\"configuration must be not empty\");\n\t\t}\n\t\t// tslint:disable-next-line:no-null-keyword\n\t\tif (!configuration.localStorageKey || configuration.localStorageKey === \"\") {\n\t\t\tthrow new Error(\"localStorageKey must be not empty\");\n\t\t}\n\t\tthis.localStorageKey = configuration.localStorageKey;\n\n\t\t// read existing logMessages\n\t\t// tslint:disable-next-line:no-null-keyword\n\t\tif (localStorage.getItem(this.localStorageKey) === null) {\n\t\t\tthis.logMessages = [];\n\t\t} else {\n\t\t\tthis.logMessages = JSON.parse(localStorage.getItem(this.localStorageKey));\n\t\t\tfor (const logMessage of this.logMessages) {\n\t\t\t\t// timestamps are serialized as strings\n\t\t\t\tlogMessage.timeStamp = new Date(logMessage.timeStamp);\n\t\t\t}\n\t\t}\n\n\t\t// process remaining configuration\n\t\tthis.configure({\n\t\t\tlocalStorageKey: configuration.localStorageKey,\n\t\t\tmaxMessages: configuration.maxMessages || LocalStorageAppender.maxMessagesDefault,\n\t\t\tthreshold: configuration.threshold || LocalStorageAppender.thresholdDefault,\n\t\t});\n\t}\n\n\t/**\n\t * Configures the logging depending on the given configuration.\n\t *\n\t * Only the defined properties get overwritten.\n\t * The localStorageKey cannot be modified.\n\t *\n\t * @param configuration configuration data.\n\t */\n\tpublic configure(configuration: LocalStorageAppenderConfiguration): void {\n\t\tif (configuration) {\n\t\t\tif (configuration.localStorageKey && configuration.localStorageKey !== this.localStorageKey) {\n\t\t\t\tthrow new Error(\"localStorageKey must not be changed\");\n\t\t\t}\n\t\t\tif (configuration.maxMessages) {\n\t\t\t\tthis.setMaxMessages(configuration.maxMessages);\n\t\t\t}\n\t\t\tif (configuration.threshold) {\n\t\t\t\tconst convertedThreshold = LogLevelConverter.levelToLog4Javascript(\n\t\t\t\t\tLogLevelConverter.levelFromString(configuration.threshold));\n\t\t\t\tthis.setThreshold(convertedThreshold);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Appender-specific method to append a log message.\n\t * @param loggingEvent event to be appended.\n\t */\n\tpublic append(loggingEvent: log4javascript.LoggingEvent): void {\n\t\t// if logMessages is already full, remove oldest element\n\t\twhile (this.logMessages.length >= this.maxMessages) {\n\t\t\tthis.logMessages.shift();\n\t\t}\n\t\t// add event to logMessages\n\t\tconst message: LogMessage = {\n\t\t\tlevel: LogLevel[LogLevelConverter.levelFromLog4Javascript(loggingEvent.level)],\n\t\t\tlogger: typeof loggingEvent.logger !== \"undefined\" ? loggingEvent.logger.name : undefined,\n\t\t\tmessage: loggingEvent.messages.slice(1),\n\t\t\tmethodName: loggingEvent.messages[0],\n\t\t\ttimeStamp: loggingEvent.timeStamp,\n\t\t};\n\t\tthis.logMessages.push(message);\n\n\t\t// write values to localStorage\n\t\tlocalStorage.setItem(this.localStorageKey, JSON.stringify(this.logMessages));\n\t}\n\n\t/**\n\t * Gets the appender's name.\n\t * Mainly for unit testing purposes.\n\t * @return appender's name\n\t */\n\tpublic toString(): string {\n\t\treturn \"Ionic.Logging.LocalStorageAppender\";\n\t}\n\n\t/**\n\t * Get the key which is used to store the messages in the local storage.\n\t */\n\tpublic getLocalStorageKey(): string {\n\t\treturn this.localStorageKey;\n\t}\n\n\t/**\n\t * Get the maximum number of messages which will be stored in local storage.\n\t */\n\tpublic getMaxMessages(): number {\n\t\treturn this.maxMessages;\n\t}\n\n\t/**\n\t * Set the maximum number of messages which will be stored in local storage.\n\t *\n\t * If the appender stores currently more messages than the new value allows, the oldest messages get removed.\n\t * @param value new maximum number\n\t */\n\tpublic setMaxMessages(value: number): void {\n\t\tif (this.maxMessages !== value) {\n\t\t\tthis.maxMessages = value;\n\n\t\t\tif (this.logMessages.length > this.maxMessages) {\n\t\t\t\t// there are too much logMessages for the new value, therefore remove oldest messages\n\t\t\t\twhile (this.logMessages.length > this.maxMessages) {\n\t\t\t\t\tthis.logMessages.shift();\n\t\t\t\t}\n\n\t\t\t\t// write values to localStorage\n\t\t\t\tlocalStorage.setItem(this.localStorageKey, JSON.stringify(this.logMessages));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Gets all messages stored in local storage.\n\t * Mainly for unit testing purposes.\n\t * @return stored messages\n\t */\n\tpublic getLogMessages(): LogMessage[] {\n\t\treturn this.logMessages;\n\t}\n\n\t/**\n\t * Removes all messages from local storage.\n\t * Mainly for unit testing purposes.\n\t */\n\tpublic clearLog(): void {\n\t\tthis.logMessages = [];\n\t\tlocalStorage.removeItem(this.localStorageKey);\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LocalStorageAppenderConfiguration.html":{"url":"interfaces/LocalStorageAppenderConfiguration.html","title":"interface - LocalStorageAppenderConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  LocalStorageAppenderConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/local-storage-appender.configuration.ts\n        \n\n            \n                Description\n            \n            \n                Configuration for LocalStorageAppender.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        localStorageKey\n                                \n                                \n                                            Optional\n                                        maxMessages\n                                \n                                \n                                            Optional\n                                        threshold\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        localStorageKey\n                                    \n                                \n                                \n                                    \n                                        localStorageKey:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Key which is used to store the messages in the local storage.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxMessages\n                                    \n                                \n                                \n                                    \n                                        maxMessages:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Maximum number of log messages stored by the appender.\nDefault: 250.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        threshold\n                                    \n                                \n                                \n                                    \n                                        threshold:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Threshold.\nValid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN\nDefault: WARN.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface LocalStorageAppenderConfiguration {\n\t/**\n\t * Key which is used to store the messages in the local storage.\n\t */\n\tlocalStorageKey: string;\n\n\t/**\n\t * Maximum number of log messages stored by the appender.\n\t *\n\t * Default: 250.\n\t */\n\tmaxMessages?: number;\n\n\t/**\n\t * Threshold.\n\t *\n\t * Valid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN\n\t *\n\t * Default: WARN.\n\t */\n\tthreshold?: string;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LogLevelConverter.html":{"url":"classes/LogLevelConverter.html","title":"class - LogLevelConverter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LogLevelConverter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/log-level.converter.ts\n        \n\n            \n                Description\n            \n            \n                Helper class for converting log levels from and to different data type.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                levelFromLog4Javascript\n                            \n                            \n                                    Static\n                                levelFromString\n                            \n                            \n                                    Static\n                                levelToLog4Javascript\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            levelFromLog4Javascript\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        levelFromLog4Javascript(level: log4javascript.Level)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/log-level.converter.ts:15\n                            \n                        \n\n\n                \n                    \n                            Converts log4javascript.Level to internal LogLevel.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        level\n                                                        \n                                                                    log4javascript.Level\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                log4javascript's data type\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     LogLevel\n\n                            \n                                \n                                    internal data type.\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            levelFromString\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        levelFromString(level: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/log-level.converter.ts:43\n                            \n                        \n\n\n                \n                    \n                            Converts string representation to internal LogLevel.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        level\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                string representation\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     LogLevel\n\n                            \n                                \n                                    internal data type.\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Static\n                            levelToLog4Javascript\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        levelToLog4Javascript(level: LogLevel)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/log-level.converter.ts:71\n                            \n                        \n\n\n                \n                    \n                            Converts internal LogLevel to log4javascript.Level.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        level\n                                                        \n                                                                    LogLevel\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     log4javascript.Level\n\n                            \n                                \n                                    level log4javascript's data type\n\n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import * as log4javascript from \"log4javascript\";\n\nimport { LogLevel } from \"./log-level.model\";\n\n/**\n * Helper class for converting log levels from and to different data type.\n */\nexport class LogLevelConverter {\n\n\t/**\n\t * Converts log4javascript.Level to internal LogLevel.\n\t * @param level log4javascript's data type\n\t * @return internal data type.\n\t */\n\tpublic static levelFromLog4Javascript(level: log4javascript.Level): LogLevel {\n\t\tswitch (level) {\n\t\t\tcase log4javascript.Level.ALL:\n\t\t\t\treturn LogLevel.ALL;\n\t\t\tcase log4javascript.Level.DEBUG:\n\t\t\t\treturn LogLevel.DEBUG;\n\t\t\tcase log4javascript.Level.ERROR:\n\t\t\t\treturn LogLevel.ERROR;\n\t\t\tcase log4javascript.Level.FATAL:\n\t\t\t\treturn LogLevel.FATAL;\n\t\t\tcase log4javascript.Level.INFO:\n\t\t\t\treturn LogLevel.INFO;\n\t\t\tcase log4javascript.Level.OFF:\n\t\t\t\treturn LogLevel.OFF;\n\t\t\tcase log4javascript.Level.TRACE:\n\t\t\t\treturn LogLevel.TRACE;\n\t\t\tcase log4javascript.Level.WARN:\n\t\t\t\treturn LogLevel.WARN;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`invalid level ${level}`);\n\t\t}\n\t}\n\n\t/**\n\t * Converts string representation to internal LogLevel.\n\t * @param level string representation\n\t * @return internal data type.\n\t */\n\tpublic static levelFromString(level: string): LogLevel {\n\t\tswitch (level) {\n\t\t\tcase \"ALL\":\n\t\t\t\treturn LogLevel.ALL;\n\t\t\tcase \"DEBUG\":\n\t\t\t\treturn LogLevel.DEBUG;\n\t\t\tcase \"ERROR\":\n\t\t\t\treturn LogLevel.ERROR;\n\t\t\tcase \"FATAL\":\n\t\t\t\treturn LogLevel.FATAL;\n\t\t\tcase \"INFO\":\n\t\t\t\treturn LogLevel.INFO;\n\t\t\tcase \"OFF\":\n\t\t\t\treturn LogLevel.OFF;\n\t\t\tcase \"TRACE\":\n\t\t\t\treturn LogLevel.TRACE;\n\t\t\tcase \"WARN\":\n\t\t\t\treturn LogLevel.WARN;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`invalid level ${level}`);\n\t\t}\n\t}\n\n\t/**\n\t * Converts internal LogLevel to log4javascript.Level.\n\t * @param internal data type.\n\t * @return level log4javascript's data type\n\t */\n\tpublic static levelToLog4Javascript(level: LogLevel): log4javascript.Level {\n\t\tswitch (level) {\n\t\t\tcase LogLevel.ALL:\n\t\t\t\treturn log4javascript.Level.ALL;\n\t\t\tcase LogLevel.DEBUG:\n\t\t\t\treturn log4javascript.Level.DEBUG;\n\t\t\tcase LogLevel.ERROR:\n\t\t\t\treturn log4javascript.Level.ERROR;\n\t\t\tcase LogLevel.FATAL:\n\t\t\t\treturn log4javascript.Level.FATAL;\n\t\t\tcase LogLevel.INFO:\n\t\t\t\treturn log4javascript.Level.INFO;\n\t\t\tcase LogLevel.OFF:\n\t\t\t\treturn log4javascript.Level.OFF;\n\t\t\tcase LogLevel.TRACE:\n\t\t\t\treturn log4javascript.Level.TRACE;\n\t\t\tcase LogLevel.WARN:\n\t\t\t\treturn log4javascript.Level.WARN;\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`invalid level ${level}`);\n\t\t}\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LogMessage.html":{"url":"interfaces/LogMessage.html","title":"interface - LogMessage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  LogMessage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/log-message.model.ts\n        \n\n            \n                Description\n            \n            \n                Log message.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        level\n                                \n                                \n                                        logger\n                                \n                                \n                                        message\n                                \n                                \n                                        methodName\n                                \n                                \n                                        timeStamp\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        level\n                                    \n                                \n                                \n                                    \n                                        level:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Log level.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logger\n                                    \n                                \n                                \n                                    \n                                        logger:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Name of the logger.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                    \n                                \n                                \n                                    \n                                        message:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Message.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        methodName\n                                    \n                                \n                                \n                                    \n                                        methodName:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Method, in which the message was written.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timeStamp\n                                    \n                                \n                                \n                                    \n                                        timeStamp:     Date\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Date\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Time when the log was written.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface LogMessage {\n\t/**\n\t * Time when the log was written.\n\t */\n\ttimeStamp: Date;\n\n\t/**\n\t * Log level.\n\t */\n\tlevel: string;\n\n\t/**\n\t * Name of the logger.\n\t */\n\tlogger: string;\n\n\t/**\n\t * Method, in which the message was written.\n\t */\n\tmethodName: string;\n\n\t/**\n\t * Message.\n\t */\n\tmessage: string[];\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Logger.html":{"url":"classes/Logger.html","title":"class - Logger","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Logger\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/logger.model.ts\n        \n\n            \n                Description\n            \n            \n                Logger for writing log messages.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                debug\n                            \n                            \n                                    Public\n                                entry\n                            \n                            \n                                    Public\n                                error\n                            \n                            \n                                    Public\n                                exit\n                            \n                            \n                                    Public\n                                fatal\n                            \n                            \n                                    Public\n                                formatArgument\n                            \n                            \n                                    Public\n                                getInternalLogger\n                            \n                            \n                                    Public\n                                getLogLevel\n                            \n                            \n                                    Public\n                                info\n                            \n                            \n                                    Public\n                                setLogLevel\n                            \n                            \n                                    Public\n                                trace\n                            \n                            \n                                    Public\n                                warn\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(logger?: string | any)\n                    \n                \n                        \n                            \n                                Defined in src/lib/logger.model.ts:11\n                            \n                        \n\n                \n                    \n                            Creates a new instance of a logger.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        logger\n                                                  \n                                                        \n                                                                    string | any\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            debug\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        debug(methodName: string, ...params: any[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/logger.model.ts:64\n                            \n                        \n\n\n                \n                    \n                            Logs a message at level DEBUG.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        methodName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                name of the method\n\n                                                        \n                                                \n                                                \n                                                        params\n                                                        \n                                                                    any[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                optional parameters to be logged; objects will be formatted as JSON\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            entry\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        entry(methodName: string, ...params: any[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/logger.model.ts:145\n                            \n                        \n\n\n                \n                    \n                            Logs the entry into a method.\nThe method name will be logged at level INFO, the parameters at level DEBUG.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        methodName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                name of the method\n\n                                                        \n                                                \n                                                \n                                                        params\n                                                        \n                                                                    any[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                optional parameters to be logged; objects will be formatted as JSON\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            error\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        error(methodName: string, ...params: any[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/logger.model.ts:112\n                            \n                        \n\n\n                \n                    \n                            Logs a message at level ERROR.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        methodName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                name of the method\n\n                                                        \n                                                \n                                                \n                                                        params\n                                                        \n                                                                    any[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                optional parameters to be logged; objects will be formatted as JSON\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            exit\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        exit(methodName: string, ...params: any[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/logger.model.ts:164\n                            \n                        \n\n\n                \n                    \n                            Logs the exit of a method.\nThe method name will be logged at level INFO, the parameters at level DEBUG.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        methodName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                name of the method\n\n                                                        \n                                                \n                                                \n                                                        params\n                                                        \n                                                                    any[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                optional parameters to be logged; objects will be formatted as JSON\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            fatal\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        fatal(methodName: string, ...params: any[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/logger.model.ts:128\n                            \n                        \n\n\n                \n                    \n                            Logs a message at level FATAL.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        methodName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                name of the method\n\n                                                        \n                                                \n                                                \n                                                        params\n                                                        \n                                                                    any[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                optional parameters to be logged; objects will be formatted as JSON\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            formatArgument\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        formatArgument(arg: any)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/logger.model.ts:179\n                            \n                        \n\n\n                \n                    \n                            Formats the given argument.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        arg\n                                                        \n                                                                    any\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getInternalLogger\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getInternalLogger()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/logger.model.ts:199\n                            \n                        \n\n\n                \n                    \n                            Returns the internal Logger (for unit tests only).\n\n\n                            \n                                Returns :     log4javascript.Logger\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getLogLevel\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getLogLevel()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/logger.model.ts:29\n                            \n                        \n\n\n                \n                    \n                            Get the log level.\n\n\n                            \n                                Returns :     LogLevel\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            info\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        info(methodName: string, ...params: any[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/logger.model.ts:80\n                            \n                        \n\n\n                \n                    \n                            Logs a message at level INFO.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        methodName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                name of the method\n\n                                                        \n                                                \n                                                \n                                                        params\n                                                        \n                                                                    any[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                optional parameters to be logged; objects will be formatted as JSON\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setLogLevel\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setLogLevel(level: LogLevel)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/logger.model.ts:38\n                            \n                        \n\n\n                \n                    \n                            Set the log level.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        level\n                                                        \n                                                                    LogLevel\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                the new log level\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            trace\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        trace(methodName: string, ...params: any[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/logger.model.ts:48\n                            \n                        \n\n\n                \n                    \n                            Logs a message at level TRACE.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        methodName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                name of the method\n\n                                                        \n                                                \n                                                \n                                                        params\n                                                        \n                                                                    any[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                optional parameters to be logged; objects will be formatted as JSON\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            warn\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        warn(methodName: string, ...params: any[])\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/logger.model.ts:96\n                            \n                        \n\n\n                \n                    \n                            Logs a message at level WARN.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        methodName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                name of the method\n\n                                                        \n                                                \n                                                \n                                                        params\n                                                        \n                                                                    any[]\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                optional parameters to be logged; objects will be formatted as JSON\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import * as log4javascript from \"log4javascript\";\n\nimport { LogLevelConverter } from \"./log-level.converter\";\nimport { LogLevel } from \"./log-level.model\";\n\n/**\n * Logger for writing log messages.\n */\nexport class Logger {\n\n\tprivate logger: log4javascript.Logger;\n\n\t/**\n\t * Creates a new instance of a logger.\n\t */\n\tconstructor(logger?: string | any) {\n\t\tif (typeof logger === \"undefined\") {\n\t\t\tthis.logger = log4javascript.getRootLogger();\n\t\t} else if (typeof logger === \"string\") {\n\t\t\tthis.logger = log4javascript.getLogger(logger);\n\t\t} else {\n\t\t\tthis.logger = logger;\n\t\t}\n\t}\n\n\t/**\n\t * Get the log level.\n\t */\n\tpublic getLogLevel(): LogLevel {\n\t\treturn LogLevelConverter.levelFromLog4Javascript(this.logger.getLevel());\n\t}\n\n\t/**\n\t * Set the log level.\n\t *\n\t * @param level the new log level\n\t */\n\tpublic setLogLevel(level: LogLevel): void {\n\t\tthis.logger.setLevel(LogLevelConverter.levelToLog4Javascript(level));\n\t}\n\n\t/**\n\t * Logs a message at level TRACE.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic trace(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isTraceEnabled()) {\n\t\t\tconst args = [methodName];\n\t\t\tfor (const param of params) {\n\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t}\n\t\t\tthis.logger.trace.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Logs a message at level DEBUG.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic debug(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isDebugEnabled()) {\n\t\t\tconst args = [methodName];\n\t\t\tfor (const param of params) {\n\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t}\n\t\t\tthis.logger.debug.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Logs a message at level INFO.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic info(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isInfoEnabled()) {\n\t\t\tconst args = [methodName];\n\t\t\tfor (const param of params) {\n\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t}\n\t\t\tthis.logger.info.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Logs a message at level WARN.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic warn(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isWarnEnabled()) {\n\t\t\tconst args = [methodName];\n\t\t\tfor (const param of params) {\n\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t}\n\t\t\tthis.logger.warn.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Logs a message at level ERROR.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic error(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isErrorEnabled()) {\n\t\t\tconst args = [methodName];\n\t\t\tfor (const param of params) {\n\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t}\n\t\t\tthis.logger.error.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Logs a message at level FATAL.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic fatal(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isFatalEnabled()) {\n\t\t\tconst args = [methodName];\n\t\t\tfor (const param of params) {\n\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t}\n\t\t\tthis.logger.fatal.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Logs the entry into a method.\n\t * The method name will be logged at level INFO, the parameters at level DEBUG.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic entry(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isInfoEnabled()) {\n\t\t\tconst args = [methodName, \"entry\"];\n\t\t\tif (this.logger.isDebugEnabled()) {\n\t\t\t\tfor (const param of params) {\n\t\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.logger.info.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Logs the exit of a method.\n\t * The method name will be logged at level INFO, the parameters at level DEBUG.\n\t *\n\t * @param methodName name of the method\n\t * @param params optional parameters to be logged; objects will be formatted as JSON\n\t */\n\tpublic exit(methodName: string, ...params: any[]): void {\n\t\tif (this.logger.isInfoEnabled()) {\n\t\t\tconst args = [methodName, \"exit\"];\n\t\t\tif (this.logger.isDebugEnabled()) {\n\t\t\t\tfor (const param of params) {\n\t\t\t\t\targs.push(this.formatArgument(param));\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.logger.info.apply(this.logger, args);\n\t\t}\n\t}\n\n\t/**\n\t * Formats the given argument.\n\t */\n\tpublic formatArgument(arg: any): string {\n\t\tif (typeof arg === \"string\") {\n\t\t\treturn arg;\n\t\t} else if (typeof arg === \"number\") {\n\t\t\treturn arg.toString();\n\t\t} else if (arg instanceof Error) {\n\t\t\t// JSON.stringify() returns here \"{ }\"\n\t\t\treturn arg.toString();\n\t\t} else {\n\t\t\ttry {\n\t\t\t\treturn JSON.stringify(arg);\n\t\t\t} catch (e) {\n\t\t\t\treturn e.message;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns the internal Logger (for unit tests only).\n\t */\n\tpublic getInternalLogger(): log4javascript.Logger {\n\t\treturn this.logger;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoggingService.html":{"url":"injectables/LoggingService.html","title":"injectable - LoggingService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LoggingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/logging.service.ts\n        \n\n            \n                Description\n            \n            \n                Service for logging functionality.\nBy default, the following settings are used:\n\nlogger: root with level WARN\nappender: BrowserConsoleAppender with threshold DEBUG and MemoryAppender with threshold ALL\n\nVia configure, it is possible to amend these settings.\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                ajaxAppenderFailed\n                            \n                            \n                                    Public\n                                logMessagesChanged\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                configure\n                            \n                            \n                                    Public\n                                getLogger\n                            \n                            \n                                    Public\n                                getLogMessages\n                            \n                            \n                                    Public\n                                getRootLogger\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/lib/logging.service.ts:41\n                            \n                        \n\n                \n                    \n                            Creates a new instance of the service.\n\n                    \n                \n            \n        \n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            configure\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        configure(configuration?: LoggingServiceConfiguration)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/logging.service.ts:80\n                            \n                        \n\n\n                \n                    \n                            Configures the logging depending on the given configuration.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configuration\n                                                        \n                                                                    LoggingServiceConfiguration\n                                                        \n                                                    \n                                                    \n                                                            Yes\n                                                    \n                                                    \n\n                                                        \n                                                                configuration data.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getLogger\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getLogger(loggerName: string)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/logging.service.ts:147\n                            \n                        \n\n\n                \n                    \n                            Gets a logger with the specified name, creating it if a logger with that name does not already exist.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        loggerName\n                                                        \n                                                                    string\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                name of the logger\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     Logger\n\n                            \n                                \n                                    logger\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getLogMessages\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getLogMessages()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/logging.service.ts:159\n                            \n                        \n\n\n                \n                    \n                            Gets the last log messages.\nThe log messages are retrieved from the internal MemoryAppender.\nThat means you will get only the most current messages. The number of the messages is limited\nby its maxMessages value.\n\n\n                            \n                            \n                            \n                                Returns :     LogMessage[]\n\n                            \n                                \n                                    log messages\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getRootLogger\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getRootLogger()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/logging.service.ts:138\n                            \n                        \n\n\n                \n                    \n                            Gets the root logger from which all other loggers derive.\n\n\n                            \n                            \n                            \n                                Returns :     Logger\n\n                            \n                                \n                                    root logger\n\n                                \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            ajaxAppenderFailed\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        ajaxAppenderFailed:     EventEmitter\n\n                    \n                \n                    \n                        \n                            Type :     EventEmitter\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/logging.service.ts:37\n                            \n                        \n\n                \n                    \n                        Event triggered when ajax appender could not send log messages to the server.\n\n                    \n                \n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                                    Description\n                                          \n                                      \n                                      \n                                                \n                                                        message\n                                                        \n                                                                error message\n\n                                                        \n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            logMessagesChanged\n                            \n                            \n                        \n                    \n                \n                \n                    \n                        logMessagesChanged:     EventEmitter\n\n                    \n                \n                    \n                        \n                            Type :     EventEmitter\n\n                        \n                    \n                        \n                            \n                                    Defined in src/lib/logging.service.ts:31\n                            \n                        \n\n                \n                    \n                        Event triggered when new log message was added.\n\n                    \n                \n\n                    \n                        \n                          \n                                  Parameters :\n                                  \n                                      \n                                          \n                                                Name\n                                                    Description\n                                          \n                                      \n                                      \n                                                \n                                                        message\n                                                        \n                                                                new log message\n\n                                                        \n                                                \n                                      \n                                  \n                          \n                        \n                    \n            \n        \n\n\n    \n\n\n    \n        import { EventEmitter, Injectable, Optional } from \"@angular/core\";\n\nimport * as log4javascript from \"log4javascript\";\n\nimport { AjaxAppender } from \"./ajax-appender.model\";\nimport { LocalStorageAppender } from \"./local-storage-appender.model\";\nimport { LogLevelConverter } from \"./log-level.converter\";\nimport { LogMessage } from \"./log-message.model\";\nimport { Logger } from \"./logger.model\";\nimport { LoggingServiceConfiguration } from \"./logging-service.configuration\";\nimport { MemoryAppender } from \"./memory-appender.model\";\n\n/**\n * Service for logging functionality.\n *\n * By default, the following settings are used:\n *  - logger: root with level WARN\n *  - appender: BrowserConsoleAppender with threshold DEBUG and MemoryAppender with threshold ALL\n *\n * Via [configure](#configure), it is possible to amend these settings.\n */\n@Injectable({\n\tprovidedIn: \"root\"\n})\nexport class LoggingService {\n\n\t/**\n\t * Event triggered when new log message was added.\n\t * @param message new log message\n\t */\n\tpublic logMessagesChanged: EventEmitter;\n\n\t/**\n\t * Event triggered when ajax appender could not send log messages to the server.\n\t * @param message error message\n\t */\n\tpublic ajaxAppenderFailed: EventEmitter;\n\n\t// tslint:disable-next-line:completed-docs\n\tprivate memoryAppender: MemoryAppender;\n\tprivate browserConsoleAppender: log4javascript.BrowserConsoleAppender;\n\n\t/**\n\t * Creates a new instance of the service.\n\t */\n\tconstructor() {\n\n\t\t// prevent log4javascript to show alerts on case of errors\n\t\tlog4javascript.logLog.setQuietMode(true);\n\n\t\t// create event emitter\n\t\tthis.logMessagesChanged = new EventEmitter();\n\t\tthis.ajaxAppenderFailed = new EventEmitter();\n\n\t\t// configure appender\n\t\tconst logger = log4javascript.getRootLogger();\n\t\tlogger.setLevel(log4javascript.Level.WARN);\n\n\t\t// browser console appender for debugger\n\t\tthis.browserConsoleAppender = new log4javascript.BrowserConsoleAppender();\n\t\tthis.browserConsoleAppender.setLayout(new log4javascript.PatternLayout(\"%d{HH:mm:ss,SSS} %c %m\"));\n\t\tthis.browserConsoleAppender.setThreshold(log4javascript.Level.ALL);\n\t\tlogger.addAppender(this.browserConsoleAppender);\n\n\t\t// in-memory appender for display on log messages page\n\t\tthis.memoryAppender = new MemoryAppender();\n\t\tthis.memoryAppender.setLayout(new log4javascript.PatternLayout(\"%d{HH:mm:ss,SSS} %c %m\"));\n\t\tthis.memoryAppender.setOnLogMessagesChangedCallback((message) => {\n\t\t\tthis.logMessagesChanged.emit(message);\n\t\t});\n\t\tlogger.addAppender(this.memoryAppender);\n\n\t\tthis.configure();\n\t}\n\n\t/**\n\t * Configures the logging depending on the given configuration.\n\t * @param configuration configuration data.\n\t */\n\tpublic configure(configuration?: LoggingServiceConfiguration): void {\n\n\t\tif (typeof configuration === \"undefined\") {\n\t\t\tconfiguration = {};\n\t\t}\n\n\t\t// set log levels\n\t\tif (typeof configuration.logLevels !== \"undefined\") {\n\t\t\tfor (const level of configuration.logLevels) {\n\t\t\t\tlet logger: log4javascript.Logger;\n\t\t\t\tif (level.loggerName === \"root\") {\n\t\t\t\t\tlogger = log4javascript.getRootLogger();\n\t\t\t\t} else {\n\t\t\t\t\tlogger = log4javascript.getLogger(level.loggerName);\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\tlogger.setLevel(LogLevelConverter.levelToLog4Javascript(LogLevelConverter.levelFromString(level.logLevel)));\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthrow new Error(`invalid log level ${level.logLevel}`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// configure AjaxAppender\n\t\tif (typeof configuration.ajaxAppender !== \"undefined\") {\n\t\t\tconst ajaxAppender = new AjaxAppender(configuration.ajaxAppender);\n\t\t\tajaxAppender.appenderFailed.subscribe((message: string) => {\n\t\t\t\tthis.ajaxAppenderFailed.emit(message);\n\t\t\t});\n\t\t\tlog4javascript.getRootLogger().addAppender(ajaxAppender);\n\t\t}\n\n\t\t// configure LocalStorageAppender\n\t\tif (typeof configuration.localStorageAppender !== \"undefined\") {\n\t\t\tconst localStorageAppender = new LocalStorageAppender(configuration.localStorageAppender);\n\t\t\tlog4javascript.getRootLogger().addAppender(localStorageAppender);\n\t\t}\n\n\t\t// configure MemoryAppender\n\t\tif (configuration.memoryAppender) {\n\t\t\tthis.memoryAppender.configure(configuration.memoryAppender);\n\t\t}\n\n\t\t// configure BrowserConsoleAppender\n\t\tif (configuration.browserConsoleAppender) {\n\t\t\tif (configuration.browserConsoleAppender.threshold) {\n\t\t\t\tconst convertedThreshold = LogLevelConverter.levelToLog4Javascript(\n\t\t\t\t\tLogLevelConverter.levelFromString(configuration.browserConsoleAppender.threshold));\n\t\t\t\tthis.browserConsoleAppender.setThreshold(convertedThreshold);\n\t\t\t}\n\t\t}\n\n\t}\n\n\t/**\n\t * Gets the root logger from which all other loggers derive.\n\t * @return root logger\n\t */\n\tpublic getRootLogger(): Logger {\n\t\treturn new Logger();\n\t}\n\n\t/**\n\t * Gets a logger with the specified name, creating it if a logger with that name does not already exist.\n\t * @param loggerName name of the logger\n\t * @return logger\n\t */\n\tpublic getLogger(loggerName: string): Logger {\n\t\treturn new Logger(loggerName);\n\t}\n\n\t/**\n\t * Gets the last log messages.\n\t *\n\t * The log messages are retrieved from the internal [MemoryAppender](../memoryappender.html).\n\t * That means you will get only the most current messages. The number of the messages is limited\n\t * by its maxMessages value.\n\t * @return log messages\n\t */\n\tpublic getLogMessages(): LogMessage[] {\n\t\treturn this.memoryAppender.getLogMessages();\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoggingServiceConfiguration.html":{"url":"interfaces/LoggingServiceConfiguration.html","title":"interface - LoggingServiceConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  LoggingServiceConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/logging-service.configuration.ts\n        \n\n            \n                Description\n            \n            \n                Partial configuration definition for LoggingService.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        ajaxAppender\n                                \n                                \n                                            Optional\n                                        browserConsoleAppender\n                                \n                                \n                                            Optional\n                                        localStorageAppender\n                                \n                                \n                                            Optional\n                                        logLevels\n                                \n                                \n                                            Optional\n                                        memoryAppender\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ajaxAppender\n                                    \n                                \n                                \n                                    \n                                        ajaxAppender:     AjaxAppenderConfiguration\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     AjaxAppenderConfiguration\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Settings for AjaxAppender.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        browserConsoleAppender\n                                    \n                                \n                                \n                                    \n                                        browserConsoleAppender:     BrowserConsoleAppenderConfiguration\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     BrowserConsoleAppenderConfiguration\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Settings for BrowserConsoleAppender.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        localStorageAppender\n                                    \n                                \n                                \n                                    \n                                        localStorageAppender:     LocalStorageAppenderConfiguration\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     LocalStorageAppenderConfiguration\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Settings for LocalStorageAppender.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        logLevels\n                                    \n                                \n                                \n                                    \n                                        logLevels:     Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Array\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Log levels for different loggers.\nDefault: root: WARN\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        memoryAppender\n                                    \n                                \n                                \n                                    \n                                        memoryAppender:     MemoryAppenderConfiguration\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     MemoryAppenderConfiguration\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Settings for MemoryAppender.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { AjaxAppenderConfiguration } from \"./ajax-appender.configuration\";\nimport { BrowserConsoleAppenderConfiguration } from \"./browser-console-appender.configuration\";\nimport { LocalStorageAppenderConfiguration } from \"./local-storage-appender.configuration\";\nimport { MemoryAppenderConfiguration } from \"./memory-appender.configuration\";\n\n/**\n * Partial configuration definition for LoggingService.\n */\nexport interface LoggingServiceConfiguration {\n\n\t/**\n\t * Log levels for different loggers.\n\t * Default: root: WARN\n\t */\n\tlogLevels?: Array;\n\n\t/**\n\t * Settings for AjaxAppender.\n\t */\n\tajaxAppender?: AjaxAppenderConfiguration;\n\n\t/**\n\t * Settings for LocalStorageAppender.\n\t */\n\tlocalStorageAppender?: LocalStorageAppenderConfiguration;\n\n\t/**\n\t * Settings for MemoryAppender.\n\t */\n\tmemoryAppender?: MemoryAppenderConfiguration;\n\n\t/**\n\t * Settings for BrowserConsoleAppender.\n\t */\n\tbrowserConsoleAppender?: BrowserConsoleAppenderConfiguration;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LoggingServiceModule.html":{"url":"modules/LoggingServiceModule.html","title":"module - LoggingServiceModule","body":"\n                   \n\n\n\n\n    Modules\n    LoggingServiceModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/logging-service.module.ts\n        \n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from \"@angular/core\";\n\n@NgModule({\n\timports: [\n\t],\n\tdeclarations: [\n\t],\n\texports: [\n\t]\n})\nexport class LoggingServiceModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MemoryAppender.html":{"url":"classes/MemoryAppender.html","title":"class - MemoryAppender","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MemoryAppender\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/memory-appender.model.ts\n        \n\n            \n                Description\n            \n            \n                An appender which stores the log messages in the browser's memory.\nThe MemoryAppender is enabled by default.\nIf you do not specify anything else, it is using this configuration:\n * {\n *   \"memoryAppender\": [\n *     {\n *       \"maxMessages\": 250,\n *       \"threshold\": \"ALL\"\n *     }\n * }\n *\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                append\n                            \n                            \n                                    Public\n                                configure\n                            \n                            \n                                    Public\n                                getLogMessages\n                            \n                            \n                                    Public\n                                getMaxMessages\n                            \n                            \n                                    Public\n                                setMaxMessages\n                            \n                            \n                                    Public\n                                setOnLogMessagesChangedCallback\n                            \n                            \n                                    Public\n                                toString\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configuration?: MemoryAppenderConfiguration)\n                    \n                \n                        \n                            \n                                Defined in src/lib/memory-appender.model.ts:34\n                            \n                        \n\n                \n                    \n                            Creates a new instance of the appender.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configuration\n                                                  \n                                                        \n                                                                    MemoryAppenderConfiguration\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                configuration for the appender.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n        \n            Methods\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            append\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        append(loggingEvent: log4javascript.LoggingEvent)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/memory-appender.model.ts:78\n                            \n                        \n\n\n                \n                    \n                            Appender-specific method to append a log message.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        loggingEvent\n                                                        \n                                                                    log4javascript.LoggingEvent\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                event to be appended.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            configure\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        configure(configuration: MemoryAppenderConfiguration)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/memory-appender.model.ts:61\n                            \n                        \n\n\n                \n                    \n                            Configures the logging depending on the given configuration.\nOnly the defined properties get overwritten.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        configuration\n                                                        \n                                                                    MemoryAppenderConfiguration\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                configuration data.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getLogMessages\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getLogMessages()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/memory-appender.model.ts:134\n                            \n                        \n\n\n                \n                    \n                            Gets all messages stored in memory.\n\n\n                            \n                            \n                            \n                                Returns :     LogMessage[]\n\n                            \n                                \n                                    stored messages\n\n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            getMaxMessages\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        getMaxMessages()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/memory-appender.model.ts:111\n                            \n                        \n\n\n                \n                    \n                            Get the maximum number of messages which will be stored in memory.\n\n\n                            \n                                Returns :     number\n\n                            \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setMaxMessages\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setMaxMessages(value: number)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/memory-appender.model.ts:121\n                            \n                        \n\n\n                \n                    \n                            Set the maximum number of messages which will be stored in memory.\nIf the appender stores currently more messages than the new value allows, the oldest messages get removed.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        value\n                                                        \n                                                                    number\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                new maximum number\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            setOnLogMessagesChangedCallback\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        setOnLogMessagesChangedCallback(callback: (message: LogMessage) => void)\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/memory-appender.model.ts:143\n                            \n                        \n\n\n                \n                    \n                            Registers a callback which will be called every time a new message is appended.\nThis could be useful if you want to show new messages in realtime.\n\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        callback\n                                                        \n                                                                    function\n                                                        \n                                                    \n                                                    \n                                                            No\n                                                    \n                                                    \n\n                                                        \n                                                                callback to be called\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                            \n                            \n                            \n                                Returns :     void\n\n                            \n                                \n                                    \n                                \n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Public\n                            toString\n                            \n                            \n                        \n                    \n                \n                \n                    \n                            \n                        toString()\n                    \n                \n\n\n                        \n                            \n                                    Defined in src/lib/memory-appender.model.ts:104\n                            \n                        \n\n\n                \n                    \n                            Gets the appender's name.\nMainly for unit testing purposes.\n\n\n                            \n                            \n                            \n                                Returns :     string\n\n                            \n                                \n                                    appender's name\n\n                                \n                    \n                \n            \n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import * as log4javascript from \"log4javascript\";\n\nimport { LogLevelConverter } from \"./log-level.converter\";\nimport { LogLevel } from \"./log-level.model\";\nimport { LogMessage } from \"./log-message.model\";\nimport { MemoryAppenderConfiguration } from \"./memory-appender.configuration\";\n\n/**\n * An appender which stores the log messages in the browser's memory.\n *\n * The MemoryAppender is enabled by default.\n * If you do not specify anything else, it is using this configuration:\n *\n * ```JSON\n * {\n *   \"memoryAppender\": [\n *     {\n *       \"maxMessages\": 250,\n *       \"threshold\": \"ALL\"\n *     }\n * }\n * ```\n */\nexport class MemoryAppender extends log4javascript.Appender {\n\n\tprivate static maxMessagesDefault = 250;\n\tprivate static thresholdDefault = \"ALL\";\n\n\tprivate maxMessages: number;\n\n\t// tslint:disable-next-line:completed-docs\n\tprivate logMessages: LogMessage[];\n\t// tslint:disable-next-line:completed-docs\n\tprivate onLogMessagesChangedCallback: (message: LogMessage) => void;\n\n\t/**\n\t * Creates a new instance of the appender.\n\t * @param configuration configuration for the appender.\n\t */\n\tconstructor(configuration?: MemoryAppenderConfiguration) {\n\t\tsuper();\n\n\t\tthis.logMessages = [];\n\n\t\t// process configuration\n\t\tconfiguration = configuration || {};\n\t\tthis.configure({\n\t\t\tmaxMessages: configuration.maxMessages || MemoryAppender.maxMessagesDefault,\n\t\t\tthreshold: configuration.threshold || MemoryAppender.thresholdDefault,\n\t\t});\n\n\t\tthis.maxMessages = MemoryAppender.maxMessagesDefault;\n\t}\n\n\t/**\n\t * Configures the logging depending on the given configuration.\n\t * Only the defined properties get overwritten.\n\t *\n\t * @param configuration configuration data.\n\t */\n\tpublic configure(configuration: MemoryAppenderConfiguration): void {\n\t\tif (configuration) {\n\t\t\tif (configuration.maxMessages) {\n\t\t\t\tthis.setMaxMessages(configuration.maxMessages);\n\t\t\t}\n\t\t\tif (configuration.threshold) {\n\t\t\t\tconst convertedThreshold = LogLevelConverter.levelToLog4Javascript(\n\t\t\t\t\tLogLevelConverter.levelFromString(configuration.threshold));\n\t\t\t\tthis.setThreshold(convertedThreshold);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Appender-specific method to append a log message.\n\t * @param loggingEvent event to be appended.\n\t */\n\tpublic append(loggingEvent: log4javascript.LoggingEvent): void {\n\t\t// if logMessages is already full, remove oldest element\n\t\twhile (this.logMessages.length >= this.maxMessages) {\n\t\t\tthis.logMessages.shift();\n\t\t}\n\t\t// add event to logMessages\n\t\tconst message: LogMessage = {\n\t\t\tlevel: LogLevel[LogLevelConverter.levelFromLog4Javascript(loggingEvent.level)],\n\t\t\tlogger: typeof loggingEvent.logger === \"object\" ? loggingEvent.logger.name : undefined,\n\t\t\tmessage: loggingEvent.messages.slice(1),\n\t\t\tmethodName: loggingEvent.messages[0],\n\t\t\ttimeStamp: loggingEvent.timeStamp,\n\t\t};\n\t\tthis.logMessages.push(message);\n\n\t\t// inform about new message\n\t\tif (typeof this.onLogMessagesChangedCallback === \"function\") {\n\t\t\tthis.onLogMessagesChangedCallback(message);\n\t\t}\n\t}\n\n\t/**\n\t * Gets the appender's name.\n\t * Mainly for unit testing purposes.\n\t * @return appender's name\n\t */\n\tpublic toString(): string {\n\t\treturn \"Ionic.Logging.MemoryAppender\";\n\t}\n\n\t/**\n\t * Get the maximum number of messages which will be stored in memory.\n\t */\n\tpublic getMaxMessages(): number {\n\t\treturn this.maxMessages;\n\t}\n\n\t/**\n\t * Set the maximum number of messages which will be stored in memory.\n\t *\n\t * If the appender stores currently more messages than the new value allows, the oldest messages get removed.\n\t * @param value new maximum number\n\t */\n\tpublic setMaxMessages(value: number): void {\n\t\tthis.maxMessages = value;\n\n\t\t// if there are too much logMessages for the new value, remove oldest messages\n\t\tif (this.logMessages.length > this.maxMessages) {\n\t\t\tthis.logMessages.splice(0, this.logMessages.length - this.maxMessages);\n\t\t}\n\t}\n\n\t/**\n\t * Gets all messages stored in memory.\n\t * @return stored messages\n\t */\n\tpublic getLogMessages(): LogMessage[] {\n\t\treturn this.logMessages;\n\t}\n\n\t/**\n\t * Registers a callback which will be called every time a new message is appended.\n\t * This could be useful if you want to show new messages in realtime.\n\t * @param callback callback to be called\n\t */\n\tpublic setOnLogMessagesChangedCallback(callback: (message: LogMessage) => void): void {\n\t\tthis.onLogMessagesChangedCallback = callback;\n\t}\n}\n\n    \n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MemoryAppenderConfiguration.html":{"url":"interfaces/MemoryAppenderConfiguration.html","title":"interface - MemoryAppenderConfiguration","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  MemoryAppenderConfiguration\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/memory-appender.configuration.ts\n        \n\n            \n                Description\n            \n            \n                Configuration for MemoryAppender.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        maxMessages\n                                \n                                \n                                            Optional\n                                        threshold\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        maxMessages\n                                    \n                                \n                                \n                                    \n                                        maxMessages:     number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Maximum number of log messages stored by the appender.\nDefault: 250.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        threshold\n                                    \n                                \n                                \n                                    \n                                        threshold:     string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Threshold.\nValid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN.\nDefault: ALL.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface MemoryAppenderConfiguration {\n\t/**\n\t * Maximum number of log messages stored by the appender.\n\t *\n\t * Default: 250.\n\t */\n\tmaxMessages?: number;\n\n\t/**\n\t * Threshold.\n\t *\n\t * Valid values are: ALL, DEBUG, ERROR, FATAL, INFO, OFF, TRACE, WARN.\n\t *\n\t * Default: ALL.\n\t */\n\tthreshold?: string;\n}\n\n    \n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/lib/ajax-appender.configuration.ts\n            \n            \n                interface\n            \n            \n                AjaxAppenderConfiguration\n            \n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/lib/ajax-appender.model.ts\n            \n            \n                class\n            \n            \n                AjaxAppender\n            \n            \n                100 %\n                (13/13)\n            \n        \n        \n            \n                \n                src/lib/browser-console-appender.configuration.ts\n            \n            \n                interface\n            \n            \n                BrowserConsoleAppenderConfiguration\n            \n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/lib/local-storage-appender.configuration.ts\n            \n            \n                interface\n            \n            \n                LocalStorageAppenderConfiguration\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/lib/local-storage-appender.model.ts\n            \n            \n                class\n            \n            \n                LocalStorageAppender\n            \n            \n                100 %\n                (10/10)\n            \n        \n        \n            \n                \n                src/lib/log-level.converter.ts\n            \n            \n                class\n            \n            \n                LogLevelConverter\n            \n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/lib/log-message.model.ts\n            \n            \n                interface\n            \n            \n                LogMessage\n            \n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/lib/logger.model.ts\n            \n            \n                class\n            \n            \n                Logger\n            \n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                src/lib/logging-service.configuration.ts\n            \n            \n                interface\n            \n            \n                LoggingServiceConfiguration\n            \n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/lib/logging.service.ts\n            \n            \n                injectable\n            \n            \n                LoggingService\n            \n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/lib/memory-appender.configuration.ts\n            \n            \n                interface\n            \n            \n                MemoryAppenderConfiguration\n            \n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/lib/memory-appender.model.ts\n            \n            \n                class\n            \n            \n                MemoryAppender\n            \n            \n                100 %\n                (9/9)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            log4javascript : ^1.4.15\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : ^7.0.0\n        \n            @angular/core : ^7.0.0\n    \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            LogLevel   (src/.../log-level.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/log-level.model.ts\n    \n        \n            \n                \n                    \n                        \n                        LogLevel\n                    \n                \n                    \n                        \n                            Logging levels.\n\n                        \n                    \n                        \n                            \n                                 ALL\n                            \n                        \n                        \n                            \n                                 TRACE\n                            \n                        \n                        \n                            \n                                 DEBUG\n                            \n                        \n                        \n                            \n                                 INFO\n                            \n                        \n                        \n                            \n                                 WARN\n                            \n                        \n                        \n                            \n                                 ERROR\n                            \n                        \n                        \n                            \n                                 FATAL\n                            \n                        \n                        \n                            \n                                 OFF\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nionic-logging-service\nThe dependencies used by the latest version are the same as needed for Ionic 4.0.0. For older versions use:\n\n\n\nionic-logging-service\nIonic\nAngular\n\n\n\n\n7.0.0\n>= 4.0.0-rc\n^7.0.0\n\n\n6.0.0\n>= 4.0.0-beta\n^6.0.0\n\n\n5.1.0\n>= 3.9.0\n^5.0.0\n\n\n3.1.0\n>= 3.0.0\n^4.0.0\n\n\n2.0.0\n>= 2.2.0\n^2.4.8\n\n\n1.2.1\n>= 2.0.0\n^2.2.1\n\n\n\nThis service encapsulates log4javascript's functionalities for apps built with Ionic framework.\nFor a sample, just have a look at ionic-logging-viewer.\nUsage\nFirst, you need to import the LoggingServiceModule in your AppModule. The next step is typically the configuration (see below). And then, finally, you can use the LoggingService in your code, e.g.:\nimport { Logger, LoggingService } from \"ionic-logging-service\";\n\nexport class MyComponent {\n\n  private logger: Logger;\n\n  constructor(\n    loggingService: LoggingService) {\n\n    this.logger = loggingService.getLogger(\"MyApp.MyComponent\");\n    const methodName = \"ctor\";\n    this.logger.entry(methodName);\n\n    ...\n\n    this.logger.exit(methodName);\n  }\n\n  public myMethod(index: number, message: string): number[] {\n    const methodName = \"myMethod\";\n    this.logger.entry(methodName, index, number);\n\n    try {\n      ...\n    } catch (e) {\n      this.logger.error(methodName, \"some error\", e);\n    }\n\n    this.logger.exit(methodName);\n    return result;\n  }\n}Depending how the code is called, this could produce the following output in the browser's console:\nI  18:49:43.794  MyApp.MyComponent  ctor  entry\nI  18:49:43.797  MyApp.MyComponent  ctor  exit\nI  18:49:43.801  MyApp.MyComponent  myMethod  entry  42  Hello\nE  18:49:43.814  MyApp.MyComponent  myMethod  some error\nI  18:49:43.801  MyApp.MyComponent  myMethod  exit  [2, 5, 99]Logger\nA logger is the component responsible for logging. Typically, you have one logger per every class. The logger name describe the place where in your app the class is placed. The single parts are separated by dots ('.'). This is quite the same as with namespaces in dotnet or packages in Java.\nThis builds some kind of hierarchy. E.g., if you have a logger named A.B.C.D, you get automatically also loggers for A.B.C, A.B and A. Additionally, there is the so-called root logger, which is the parent of all other loggers.\nThe hierarchy is important, since the loggers inherit the log level from there parent - if there is no other level defined. That means, you can define just one log level for the complete app (by setting the root logger's level), and you can par example define, you do not want to see logs written for logger A.B.C (this includes also A.B.C.D).\nLevel\nEvery log message has a level. This is the severity of the message. Available levels are TRACE, DEBUG, INFO, WARN, ERROR and FATAL - these correspond to the logging methods trace, debug, info, warn, error and fatal of Logger. Levels are ordered as follows: TRACE DEBUG INFO WARN ERROR FATAL. This means the FATAL is the most severe and TRACE the least. Also included are levels called ALL and OFF intended to enable or disable all logging respectively.\nSetting a level to a logger disables log messages of severity lower than that level. For instance, if a level of INFO is set on a logger then only log messages of severity INFO or greater will be logged, meaning DEBUG and TRACE messages will not be logged.\nAppender\nAppenders make the logs visible, e.g. by writing them to the browser's console. This is quite useful during development, either in console or using ionic serve --consolelogs. But later, you will need other logs:\n\nAjaxAppender: sends the log messages to a backend server\nMemoryAppender: keeps the log messages in memory\nLocalStorageAppender: stores the log messages in local storage\n\nIf you want to see a complete example, have a look at ionic-feedback-sample.\nConfiguration\nBy default, the following configuration is used:\n\nLogger:\n\nroot: Level.WARN\n\n\nAppender:\n\nBrowserConsoleAppender\nMemoryAppender\n\n\n\nTo change it, just call configure(). This method takes an object of type LoggingConfiguration.\nThe recommended way is to place the configuration in environment.ts:\nexport const environment = {\n  logging: {\n    ...\n  }\n};Call configure() in your app.module.ts:\nexport function configureLogging(loggingService: LoggingService): () => void {\n  return () => loggingService.configure(environment.logging);\n}\n\n@NgModule({\n  ...\n  imports: [\n    ...\n    LoggingServiceModule\n  ],\n  providers: [\n    {\n      deps: [LoggingService],\n      multi: true,\n      provide: APP_INITIALIZER,\n      useFactory: configureLogging\n    }\n  ]\n})\nexport class AppModule { }logLevels\nlogLevels gets an array of log level definitions for different loggers, e.g.\n{\n  \"logLevels\": [\n    {\n      \"loggerName\": \"root\",\n      \"logLevel\": \"DEBUG\"\n    },\n    {\n      \"loggerName\": \"MyApp.MyNamespace.MyLogger\",\n      \"logLevel\": \"INFO\"\n    }\n  ]\n};That means, instead of the default log level WARN, you want to log all messages with level DEBUG and higher. Only for MyApp.MyNamespace.MyLogger, you want to restrict the level to INFO.\najaxAppender\nWith ajaxAppender, you add an additional appender of type AjaxAppender, which sends the log messages to a backend server.\nbrowserConsoleAppender\nWith browserConsoleAppender, it is possible to configure the BrowserConsoleAppender, which writes the log to the browser's console.\nlocalStorageAppender\nWith localStorageAppender, you add an additional appender of type AjaxAppender, which stores log messages in the local storage.\nmemoryAppender\nWith memoryAppender, it is possible to configure the MemoryAppender, which keeps log messages in the memory.\nAPI\nsee API documentation.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        LoggingServiceModule\n                    \n                    \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n\n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    5 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    6 Interfaces\n                \n            \n        \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
